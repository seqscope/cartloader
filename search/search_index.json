{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A scalable, harmonized, and cloud-friendly ecosystem for spatial transcriptomics data","text":""},{"location":"#overview","title":"Overview","text":"<p>Spatial transcriptomics (ST) technologies have revolutionized our ability to map molecular features with remarkable resolution\u2014down to cellular and subcellular levels.</p> <p>While the rapid development of sequencing-based platforms (e.g., Seq-Scope, Stereo-seq, Pixel-seq, 10x Visium HD) and imaging-based platforms (e.g., 10x Xenium, Vizgen MERSCOPE, CosMx SMI) has led to an explosion in the production of ST datasets across diverse tissues and species, this platform diversity has also introduced heterogeneous data formats and metadata schemas, which further obstruct efforts toward standardized data ingestion, cross-platform format conversion, and reproducible analytical workflows.</p> <p>To address this challenge, we introduce a scalable, harmonized, and cloud-friendly ecosystem for spatial transcriptomics data across platforms, composed of two components:</p> <ul> <li>cartloader \u2013 a harmonized, scalable pipeline for high-resolution spatial omics data processing and analysis with retaining the original resolution.</li> <li>cartostore \u2013 an open-access, cloud-hosted repository for dataset sharing and visualization.</li> </ul> <p>Together, this system should provide a unified solution for working with raw pixel-level spatial omics data\u2014without sacrificing resolution or reproducibility.</p>"},{"location":"#cartloader-a-scalable-spatial-transcriptomics-pipeline","title":"<code>cartloader</code>: A Scalable Spatial Transcriptomics Pipeline","text":"<p>This document introduces <code>cartloader</code>, which is the core engine of our ecosystem. It provides a modular, reproducible tool to harmonize, integrate, analyze, and visualize raw high-resolution ST data across platforms. Usage examples are provided in the Vignettes. Detailed descriptions of its workflow, inputs, outputs, and parameters are provided in the Reference Pages.</p> <p>Key Features</p> <ul> <li>Cross-Platform Format Conversion: Converts raw spatial gene expression (SGE) data from diverse ST platforms into a unified format, enabling consistent downstream processing.</li> <li>Spatial Factor Inference: Applies FICTURE to infer spatial factors directly from pixel-level data, capturing biological patterns without requiring cell segmentation.</li> <li>Multi-Modal Alignment: Aligns and overlays histology images to SGE data so all layers (histology, SGE, and histological images) share a common coordinate system for pixel-accurate comparisons.</li> <li>Cloud-Friendly Outputs: Produces compact, geospatially-indexed data formats suitable for web visualization and cloud storage.</li> <li>Batch Integration and Sample Stitching: Supports joint analysis and SGE stitching across samples or platforms to reveal shared or differential features across tissues.</li> <li>Modular and Reproducible Workflow: Orchestrates all steps through a Makefile-based system to ensure scalability, transparency, and reproducibility.</li> </ul>"},{"location":"#cartostore-cloud-access-and-visualization","title":"cartostore: Cloud Access and Visualization","text":"<p>As a natural companion to <code>cartloader</code>, <code>cartostore</code> hosts the dataset and the output from <code>cartloader</code> for public access and exploration.</p> <p>Designed for scalability and interoperability, <code>cartostore</code> uses spatially indexed formats like PMTiles to support interactive visualization and seamless integration.</p> <p>Explore the <code>cartostore</code> documentation to learn more about dataset access and how to contribute.</p>"},{"location":"#citations","title":"Citations:","text":"<ul> <li>FICTURE: doi.org/10.1038/s41592-024-02415-2</li> </ul>"},{"location":"INSTALLATION/","title":"Installation Guide","text":"<p>This is an instruction to set up the required environment, and install dependencies and <code>cartloader</code>.</p>"},{"location":"INSTALLATION/#1-dependencies","title":"1. Dependencies","text":"<p>To ensure full functionality of <code>cartloader</code>, the following dependencies must be installed:</p>"},{"location":"INSTALLATION/#11-system-dependencies","title":"1.1 System Dependencies","text":"<p>Ensure the following command-line tools are available on your system:  </p> <ul> <li><code>gzip</code> </li> <li><code>sort</code> </li> <li><code>bgzip</code> </li> <li><code>tabix</code> </li> </ul>"},{"location":"INSTALLATION/#12-external-tools-utilities","title":"1.2 External Tools &amp; Utilities","text":"<p>The following external tools and utilities are required for handling spatial data and file processing. Some of these are included as submodules within the repository.</p> <p>Python &amp; Related Packages:</p> <ul> <li><code>python</code> (<code>cartloader</code> has been tested with v3.10 and v3.13.1)</li> <li><code>parquet-tools</code></li> </ul> <p>External Tools (Included in submodules)</p> <ul> <li><code>punkst</code> (the latest and more efficient implementation of FICTURE)</li> <li><code>spatula</code></li> <li><code>tippecanoe</code></li> <li><code>magick</code></li> <li><code>go-pmtiles</code></li> </ul> <p>Geospatial Data Handling:</p> <ul> <li><code>gdal</code></li> </ul> <p>Cloud &amp; CLI Tools:</p> <ul> <li><code>aws-cli</code></li> </ul>"},{"location":"INSTALLATION/#2-setting-up-the-environment-using-conda","title":"2. Setting Up the Environment using <code>conda</code>","text":"<p>We recommended to use <code>conda</code> to manage dependencies efficiently and avoid conflicts.</p>"},{"location":"INSTALLATION/#21-installing-conda","title":"2.1 Installing <code>conda</code>","text":"<p>If <code>conda</code> is not installed, download and install Miniconda or Anaconda.</p> <p>Here is an example to install <code>Miniconda3</code> on Linux.</p> <pre><code>env_dir=/path/to/your/directory/hosting/tools/      ## replace `/path/to/your/directory/hosting/tools/` by the path to your tool directory\ncd $env_dir\n\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh\n</code></pre>"},{"location":"INSTALLATION/#22-creating-an-environment","title":"2.2 Creating an Environment","text":"<p>Create a dedicated Conda environment for <code>cartloader</code>:</p> <pre><code>conda_env=ENV_NAME              # replace ENV_NAME with the name of your conda environment\npython_version=3.13.1           # replace 3.13.1 with the version you prefer\n\nconda create -n ENV_NAME python=$python_version\nconda activate ENV_NAME\n</code></pre>"},{"location":"INSTALLATION/#23-installing-dependencies","title":"2.3 Installing Dependencies","text":"<p>Once inside the environment, install the required dependencies:</p> <pre><code>conda install -c conda-forge gdal aws-cli imagemagick parquet-tools\n</code></pre>"},{"location":"INSTALLATION/#3-installing-cartloader","title":"3. Installing <code>cartloader</code>","text":"<p>Clone the repository and install it:</p> <pre><code>cd $env_dir\ngit clone git@github.com:seqscope/cartloader.git\ncd cartloader\n\n# Install its requirements:\npip install -r ./requirements.txt\n\npip install -e ./\n</code></pre>"},{"location":"INSTALLATION/#4-installing-submodules","title":"4. Installing Submodules","text":"<pre><code>cd $env_dir/cartloader\ngit submodule update --init --recursive\n</code></pre>"},{"location":"INSTALLATION/#41-installing-spatula","title":"4.1 Installing <code>spatula</code>","text":"<p>Install <code>spatula</code> with its dependencies from the submodules directory:</p> <pre><code>cd ${env_dir}/cartloader/submodules/spatula\n\ncd submodules\nbash -x build.sh\ncd ..\n\n## build spatula\nmkdir build\ncd build\ncmake ..\nmake\n</code></pre>"},{"location":"INSTALLATION/#42-installing-punkst","title":"4.2 Installing <code>punkst</code>","text":"<p>Install <code>punkst</code> toolkit to use <code>FICTURE</code> (Si et al., Nature Methods 2024).</p> <p>Please following the <code>punkst</code> installation guide.</p> What is <code>FICTURE</code> and <code>punkst</code> <p><code>FICTURE</code> is a segmentation-free method that infers latent spatial factors\u2014coherent spatial patterns of gene activity\u2014that correspond to underlying transcriptional programs or tissue structures. These factors can then be projected back to the pixel level. Although <code>FICTURE</code> is built on a Latent Dirichlet Allocation (LDA) framework by default, it is also compatible with clustering outputs from external tools like <code>Seurat</code> for pixel-level projection.</p> <p>The <code>punkst</code> toolkit is a streamlined implementation of the <code>FICTURE</code>, designed for improved computational efficiency and scalability while producing results equivalent to the original <code>FICTURE</code>.</p>"},{"location":"INSTALLATION/#43-installing-tippecanoe","title":"4.3 Installing <code>tippecanoe</code>","text":"<pre><code>cd ${env_dir}/cartloader/submodules/tippecanoe\nmake -j\n\n## Choose one of the following methods to install tippecanoe:\n# (1) System-wide installation (requires root access):\nmake install\n\n# (2) Local installation (no root access): specify a custom PREFIX\nmake install PREFIX=${env_dir}/cartloader/submodules/tippecanoe/  # Replace with your desired installation path\n</code></pre>"},{"location":"INSTALLATION/#44-installing-go-pmtiles","title":"4.4 Installing <code>go-pmtiles</code>","text":"<p>An easy way to install <code>go-pmtiles</code> is to download a release from the official website and decompress it. This will return a <code>pmtiles</code> bin file ready for use.</p> <p>Here is an example of its installation:</p> <pre><code>cd ${env_dir}\nwget https://github.com/protomaps/go-pmtiles/releases/download/v1.28.0/go-pmtiles_1.28.0_Linux_x86_64.tar.gz ./\ntar -zxvf ./go-pmtiles_1.28.0_Linux_x86_64.tar.gz\n</code></pre>"},{"location":"INSTALLATION/#45-installing-imagemagick","title":"4.5 Installing ImageMagick","text":"<p>If you have already installed ImageMagick when setting conda environment, skip this step.</p> <pre><code>cd ${env_dir}/cartloader/submodules/ImageMagick\n./configure     # Alternatively, run `./configure --prefix=${env_dir}/cartloader/submodules/ImageMagick`.\nmake \nmake install \n</code></pre>"},{"location":"INSTALLATION/#5-verifying-the-installation","title":"5. Verifying the Installation","text":"<p>To confirm the package is installed correctly, run:</p> <pre><code>python -c \"import cartloader; print('cartloader installed successfully!')\"\n</code></pre>"},{"location":"reference/run_cartload2/","title":"Spatial Asset Packaging","text":""},{"location":"reference/run_cartload2/#overview","title":"Overview","text":"<p>Following spatial factor inference via FICTURE analysis, <code>cartloader</code> offers the <code>run_cartload2</code> module package SGE data and spatial factor output from FICTURE analysis into standardized, spatially indexed, and storage-efficient PMTiles, a web-native tiling format. These PMTiles outputs are optimized for downstream analysis, interactive web visualization (e.g., in CartoScope), and data sharing across platforms.</p>"},{"location":"reference/run_cartload2/#requirements","title":"Requirements","text":"<ul> <li>A completed FICTURE run from <code>run_ficture2</code>, including<ul> <li>pixel-level decoding outputs </li> <li>a metadata file describing the input-output structure (<code>ficture.params.json</code>)</li> </ul> </li> <li>Pre-installed CLI tools: <code>tippecanoe</code>, <code>gdal_translate</code>, <code>gdaladdo</code>, <code>pmtiles</code>, <code>spatula</code>, <code>gzip</code></li> </ul>"},{"location":"reference/run_cartload2/#example-usage","title":"Example Usage","text":"<pre><code>DATA_ID=\"dataset_id\"               ## replace dataset_id with the id for your dataset\n\ncartloader run_cartload2 \\\n    --makefn run_cartload2.mk \\\n    --fic-dir /path/to/run_ficture2/results \\\n    --out-dir /path/to/output/directory \\\n    --id ${DATA_ID} \\\n    --colname-count count \\\n    --n-jobs 20  \\\n    --threads 20 \\\n    --spatula /path/to/spatula/binary \\\n    --pmtiles /path/to/pmtiles/binary \\\n    --tippecanoe /path/to/tippecanoe/binary\n</code></pre>"},{"location":"reference/run_cartload2/#actions","title":"Actions","text":"<p>Specifically, <code>run_cartload2</code> performs all of the following steps:</p> <ul> <li>Converts transcript-level SGE to raster-format PMTiles.</li> <li>Converts topic proportions (.results.tsv.gz) into vector PMTiles for spatial factors.</li> <li>Processes each decoded pixel-level output to generate raster PMTiles for visual overlays.</li> <li>Create a joined molecule-feature matrix by joining decoded pixel-level spatial factors from FICTURE with transcript-level molecules from the original SGE based on spatial proximity.</li> <li>Converts the joined molecule-feature matrix into storage-efficient, multi-feature PMTiles.</li> <li>Generates a JSON file listing all FICTURE assets and a YAML catalog describing the final visualization layers.</li> </ul>"},{"location":"reference/run_cartload2/#parameters","title":"Parameters","text":"<p>The following outlines the minimum required parameters. </p> <p>For auxiliary parameters, we recommend using the default values unless you possess a thorough understanding of <code>run_cartload2</code>. For further details, refer to the collapsible sections below or run:</p> <pre><code>cartloader run_cartload2 --help\n</code></pre>"},{"location":"reference/run_cartload2/#inputoutput-parameters","title":"Input/Output Parameters","text":"<ul> <li><code>--fic-dir</code> (str): Path to the input directory containing FICTURE output.</li> <li><code>--out-dir</code> (str): Path to the output directory for storing generated assets.</li> </ul>"},{"location":"reference/run_cartload2/#dataset-id-and-descriptions","title":"Dataset ID and Descriptions","text":"<ul> <li><code>--id</code> (str): Unique identifier for the output asset set.</li> <li><code>--title</code> (str): Optional title for the output assets.</li> <li><code>--desc</code> (str): Optional description for the output assets.</li> </ul> Auxiliary <code>run_cartload2</code> Paramaters <p>Auxiliary Conversion Parameters:</p> <ul> <li><code>--in-fic-params</code> (str): Path to input JSON file with SGE files and FICTURE parameters (Default: <code>ficture.params.json</code>).</li> <li><code>--out-fic-assets</code> (str): Path to output JSON file to write FICTURE assets (Default: <code>ficture_assets.json</code>).</li> <li><code>--out-catalog</code> (str): Path to output YAML file for assets (Default: catalog.yaml).</li> <li><code>--background-assets</code> (str list): List of background asset descriptors in <code>[id:file]</code> or <code>[id1:id2:file]</code> format.</li> <li><code>--rename-x</code> (str): Column renaming rule for X axis in <code>tippecanoe</code> (Default: x:lon).</li> <li><code>--rename-y</code> (str): Column renaming rule for Y axis in <code>tippecanoe</code> (Default: y:lat).</li> <li><code>--colname-feature</code> (str): Column name for gene/feature name (Default: gene).</li> <li><code>--colname-count</code> (str): Column name for feature count (Default: count).</li> <li><code>--out-molecules-id</code> (str): Prefix for output molecule PMTiles files (Default: genes).</li> <li><code>--max-join-dist-um</code> (float): Maximum join distance (\u00b5m) between molecules and pixels (Default: 0.1).</li> <li><code>--join-tile-size</code> (float): Tile size (\u00b5m) for molecule\u2013pixel joining. (Default: 500).</li> <li><code>--max-tile-bytes</code> (int): Maximum allowed tile size in bytes for PMTiles (Default: 5e6).</li> <li><code>--max-feature-counts</code> (int): Maximum number of features per tile (Default: 5e5).</li> <li><code>--preserve-point-density-thres</code> (int): Threshold to preserve point density in PMTiles (Default: 1024).</li> <li><code>--keep-intermediate-files</code> (flag): If set, retain intermediate files generated.</li> <li><code>--skip-raster</code> (flag): If set, skip raster tile generation and related dependencies.</li> <li><code>--tmp-dir</code> (str): Path to a temporary directory (Default: <code>&lt;out-dir&gt;/tmp</code>).</li> </ul> <p>Auxiliary Environment Parameters:</p> <ul> <li><code>--gzip</code> (str): Path to the <code>gzip</code> binary. For faster compression, use <code>\"pigz -p4\"</code> (Default: gzip).</li> <li><code>--pmtiles</code> (str): Path to the <code>pmtiles</code> binary from go-pmtiles (Default: pmtiles).</li> <li><code>--gdal_translate</code> (str): Path to the <code>gdal_translate</code> binary (Default: gdal_translate).</li> <li><code>--gdaladdo</code> (str): Path to the <code>gdaladdo</code> binary (Default: gdaladdo).</li> <li><code>--tippecanoe</code> (str): Path to the <code>tippecanoe</code> binary (Default: tippecanoe).</li> <li><code>--spatula</code> (str): Path to the <code>spatula</code> binary (Default: spatula).</li> </ul>"},{"location":"reference/run_cartload2/#output","title":"Output","text":""},{"location":"reference/run_cartload2/#copied-ficture-output","title":"Copied FICTURE Output","text":"<p>Copied FICTURE output from <code>&lt;fic_dir&gt;</code>. See formats in FICTURE analysis.</p>"},{"location":"reference/run_cartload2/#rasterized-transcript-level-sge","title":"Rasterized transcript-level SGE","text":"<ul> <li>SGE mono PMTiles (<code>sge-mono-dark.pmtiles</code> and <code>sge-mono-light.pmtiles</code>): Rasterized gene expression tiles created from raw SGE for web visualization.</li> </ul>"},{"location":"reference/run_cartload2/#rasterized-spatial-factor-maps","title":"Rasterized Spatial Factor Maps","text":"<ul> <li>Factor probability PMTiles (<code>*-results.pmtiles</code>): Vector tiles encoding posterior topic probabilities per spatial location.</li> <li>Decoded factor PMTiles (<code>*-pixel-raster.pmtiles</code>): Rasterized spatial factor maps derived from pixel-level decoding results.</li> </ul>"},{"location":"reference/run_cartload2/#joined-molecule-factor-pmtiles","title":"Joined molecule-factor PMTiles","text":"<ul> <li>Joined molecule-factor TSV (<code>transcripts_pixel_joined.tsv.gz</code>): Merged file linking transcript-level SGE with decoded pixel factors.</li> <li>Final molecule PMTiles (<code>genes_bin*.pmtiles</code>, <code>genes_index.tsv</code>, <code>genes_pmtiles_index.tsv</code>, <code>genes_bin_counts.json</code>): Indexed, multi-feature PMTiles built from joined pixel-factor data for CartoScope.</li> </ul>"},{"location":"reference/run_cartload2/#summary-files","title":"Summary Files","text":"<ul> <li>FICTURE assets file (<code>ficture_assets.json</code>): JSON catalog listing all output files and their roles for each trained model.</li> <li>Catalog file (<code>catalog.yaml</code>): Final YAML file summarizing all visual assets and layers for further deployment and visualization.</li> </ul>"},{"location":"reference/run_ficture2/","title":"Spatial Factor Inference Analysis using FICTURE","text":""},{"location":"reference/run_ficture2/#overview","title":"Overview","text":"<p>Following format conversion, cartloader provides <code>run_ficture2</code> module to run spatial factor inference using <code>FICTURE</code> (Si et al., Nature Methods, 2024). This method infers spatial factors directly at the pixel level with submicron resolution, eliminating the need for segmentation.</p> <p>What is <code>FICTURE</code>?</p> <p><code>FICTURE</code> reconstructs the fine-scale tissue structure by first decomposing gene expression patterns across the tissue section into spatial factors and then assigns each pixel to these factors using local context. Biologically, these inferred factors may correspond to specific cell types, functional or physiological states, subcellular domains, or extracellular transcriptomic signatures.</p> <p>By default, <code>FICTURE</code> learns the spatial factors by implementing a standard latent Dirichlet allocation (LDA) model on a hexagonal grid overlay of the spatial coordinates. Optionally, spatial factors can also be derived from external sources, such as single-cell or single-nucleus RNA-seq reference datasets, or from spatially agnostic factor learning methods (e.g., Seurat, Scanpy).</p> <p>The <code>punkst</code> version of <code>FICTURE</code></p> <p>To efficiently run FICTURE-based inference, cartloader integrates <code>punkst</code>, an optimized implementation of FICTURE that maintains output equivalence while enhancing computational scalability and performance. </p> <p>Currently, <code>run_ficture2</code> is using <code>punkst</code> version of <code>FICTURE</code>.</p>"},{"location":"reference/run_ficture2/#requirements","title":"Requirements","text":"<ul> <li>An SGE in the unified format</li> <li>Pre-installed tools: <code>spatula</code>, <code>punkst</code>, <code>gzip</code>, <code>sort</code>, <code>python</code></li> </ul>"},{"location":"reference/run_ficture2/#example-usage","title":"Example Usage","text":"<pre><code>cartloader run_ficture2 \\\n    --main \\\n    --in-transcript /path/to/input/harmonized/transcripts/tsv/file \\\n    --in-feature /path/to/input/harmonized/feature/tsv/file \\\n    --in-minmax /path/to/input/harmonized/coordinates/minmax/tsv/file \\\n    --cmap-file /path/to/cartloader/assets/fixed_color_map_256.tsv \\\n    --colname-count count \\\n    --out-dir /path/to/output/directory \\\n    --width 18 \\\n    --n-factor 24 \\\n    --spatula /path/to/spatula/binary \\\n    --ficture2 /path/to/punkst/directory \\  \n    --exclude-feature-regex '^(mt-|Gm\\d+$)' \\\n    --n-jobs 20  \\\n    --threads 20 \n</code></pre>"},{"location":"reference/run_ficture2/#actions","title":"Actions","text":""},{"location":"reference/run_ficture2/#tiling-step","title":"Tiling step","text":"<p>The tiling step takes the standarized SGE (from SGE format conversion step) as input. It aims to reorganizes input coordinate data into non-overlapping square tiles in a plain TSV format and generates an index file with tile offsets to enable efficient random access.</p>"},{"location":"reference/run_ficture2/#segmentation-step","title":"Segmentation Step","text":"<p>The segmentation step starts from the tiled SGE, using the plain TSV file from tiling step as input. It aggregates tiled pixel data into non-overlapping hexagons in a TSV file for spot-level analysis, outputting a tab-delimited file of hexagon records and associated metadata in JSON format.</p>"},{"location":"reference/run_ficture2/#lda-training-step","title":"LDA Training Step","text":"<p>The LDA training step uses the hexagon TSV and JSON file from segmentation step as input, trains a Latent Dirichlet Allocation (LDA) model on sparse gene count data from hexagon units, using metadata to interpret input structure and optionally filter or weight features, producing a factorized topic model in TSV.</p>"},{"location":"reference/run_ficture2/#decoding-step","title":"Decoding Step","text":"<p>The decoding step applies a trained LDA model from LDA training step to tiled pixel-level transcript data from tiling step to infer the top spatial factors and their posterior probabilities for each pixel, enabling fine-grained spatial mapping of gene expression. It outputs a pixel-level annotation file in TSV format with coordinates and factor assignments, along with a pseudobulk gene-by-factor matrix in TSV format.</p>"},{"location":"reference/run_ficture2/#summarization-step","title":"Summarization Step","text":"<p>The summarization step generate a JSON file to include all details of the FICTURE analysis, including the input files, output files, and parameters.</p>"},{"location":"reference/run_ficture2/#parameters","title":"Parameters","text":"<p>The following outlines the minimum required parameters. </p> <p>For auxiliary parameters, we recommend using the default values unless you possess a thorough understanding of FICTURE. For further details, refer to the collapsible sections below or run:</p> <pre><code>cartloader run_ficture2 --help\n</code></pre>"},{"location":"reference/run_ficture2/#action-parameters","title":"Action Parameters","text":"<p>Action Specifications</p> <p>At least one of the actions (<code>--main</code>, <code>--tile</code>, <code>--segment</code>, <code>--init-lda</code>, <code>--decode</code>, <code>--summary</code>) should be enabled.</p> <ul> <li><code>--main</code>: Run all of the following five actions.</li> <li><code>--tile</code>: Run tiling step.</li> <li><code>--segment</code>: Run segmentation step.</li> <li><code>--init-lda</code>: Run LDA training step.</li> <li><code>--decode</code>: Run decoding step.</li> <li><code>--summary</code>: Run summarization step.</li> </ul>"},{"location":"reference/run_ficture2/#inputoutput-parameters","title":"Input/Output Parameters","text":"<ul> <li><code>--out-dir</code> (str): Output directory to store all result files.</li> <li><code>--out-json</code> (str): Output JSON file summarizing FICTURE parameters (Default: <code>&lt;out-dir&gt;/ficture.params.json</code>).</li> <li><code>--in-transcript</code> (str): Input transcript-indexed SGE file in TSV format.</li> <li><code>--in-minmax</code> (str): Optional input coordinate min-max file.</li> <li><code>--in-feature</code> (str): Optional input UMI count per gene TSV file.</li> </ul>"},{"location":"reference/run_ficture2/#key-parameters","title":"Key Parameters","text":"<ul> <li><code>--width</code> (str): Comma-separated hexagon flat-to-flat widths (in \u00b5m) for LDA training.</li> <li><code>--n-factor</code> (str): Comma-separated list of factor counts for LDA training.</li> <li><code>--include-feature-regex</code> (str): (Optional) Regex pattern for including features/genes.</li> <li><code>--exclude-feature-regex</code> (str): (Optional) Regex pattern for excluding features/genes.</li> <li><code>--cmap-file</code> (str): (Optional) Path to fixed color map TSV file. If not provided, FICTURE will generate a color map.</li> </ul> Auxiliary <code>run_ficture2</code> Paramaters <p>Auxiliary Input Parameters</p> <ul> <li><code>--in-feature-ficture</code> (str): (Optional) A separate feature file applied to FICTURE analysis. Alternative to customizing via auxiliary parameters.</li> <li><code>--colidx-x</code> (int): Column index of X in the transcript file (Default: 1).</li> <li><code>--colidx-y</code> (int): Column index of Y in the transcript file (Default: 2).</li> <li><code>--colname-count</code> (str): Column name to use as count value (Default: count).</li> <li><code>--colname-feature</code> (str): Column name for gene/feature name (Default: gene).</li> </ul> <p>Auxiliary FICTURE Parameters:</p> <ul> <li>Tiling-specific parameters:<ul> <li><code>--tile-size</code> (int): Size of tiles for processing (Default: 500).</li> <li><code>--tile-buffer</code> (int): Buffer zone around each tile (Default: 1000).</li> </ul> </li> <li>Segmentation-specific parameters:<ul> <li><code>--min-ct-per-unit-hexagon</code> (int): Minimum count per hexagon (Default: 50).</li> <li><code>--minibatch-size</code> (int): Minibatch size for preprocessing (Default: 500).</li> </ul> </li> <li>LDA training-specific parameters:<ul> <li><code>--min-ct-per-unit-train</code> (int): Minimum count for training (Default: 50).</li> <li><code>--train-epoch</code> (int): Number of epochs to train LDA model (Default: 2).</li> </ul> </li> <li> <p>Decoding-specific paramaters:</p> <ul> <li><code>--fit-width</code> (int): Hexagon width (in \u00b5m) for model fitting (Default: same as train width).</li> <li><code>--min-ct-per-unit-fit</code> (int): Minimum count per unit during model fitting (Default: 50).</li> <li><code>--anchor-res</code> (int): Anchor resolution used in decoding (Default: 6).</li> <li><code>--radius-buffer</code> (int): Buffer added to anchor resolution for decoding (Default: 1).</li> <li><code>--fit-plot-um-per-pixel</code> (int): Image resolution for fit coarse plots (Default: 1).</li> <li><code>--decode-scale</code> (int): Scales input coordinates to pixels in the output image (Default: 1)')</li> </ul> </li> <li> <p>Shared paramaters across steps:</p> <ul> <li><code>--seed</code> (int): Random seed for reproducibility (Default: 1).</li> <li><code>--min-ct-per-feature</code> (int): Minimum count per feature for LDA and decoding (Default: 20).</li> <li><code>--de-max-pval</code> (float): p-value cutoff for differential expression (Default: 1e-3).</li> <li><code>--de-min-fold</code> (float): Fold-change threshold for differential expression (Default: 1.5).</li> </ul> </li> </ul> <p>Auxiliary Environment Parameters: For tools that require specifying the path to their executable binaries, you may omit the path if the binary is already included in your system's <code>PATH</code>.</p> <ul> <li><code>--gzip</code> (str): Path to <code>gzip</code> binary; consider <code>pigz -p 4</code> for speed (Default: <code>gzip</code>).</li> <li><code>--sort</code> (str): Path to <code>sort</code> binary (Default: <code>sort</code>).</li> <li><code>--sort-mem</code> (str): Memory allocated per <code>sort</code> process (Default: 1G).</li> <li><code>--spatula</code> (str): Path to <code>spatula</code> binary (Default: <code>spatula</code>).</li> <li><code>--ficture2</code> (str): Path to the <code>punkst</code> repository (Default to <code>punkst</code> directory in <code>submodules</code>)</li> <li><code>--python</code> (str): Path to Python 3 binary (Default: <code>python3</code>).</li> </ul>"},{"location":"reference/run_ficture2/#output","title":"Output","text":""},{"location":"reference/run_ficture2/#tiling-output","title":"Tiling Output","text":"<ul> <li><code>transcripts.tiled.tsv</code>: A tab-delimited TSV file where each line records a tile with X and Y coordinates, a feature name (e.g., gene), and its associated count.     <pre><code>3815.69 491.9   Arfgef1 1\n</code></pre></li> <li><code>transcripts.tiled.index</code>: An index file that records the byte offsets of each tile in the tiled TSV file, enabling fast random access to tile-specific data. It includes comment lines with metadata (tile size, pixel count, min/max X and Y coordinates) and data lines listing the offset positions for each tile.     <pre><code># tilesize  500\n# npixels   333021294\n# xmin  0.28\n# xmax  19851.1\n# ymin  0.5\n# ymax  13476.4\n0   7   0           13103550    569474\n0   8   13103550    40259340    1180529\n</code></pre></li> <li><code>transcripts.tiled.coord_range.tsv</code>: A tab-delimited TSV file provides xmin, xmax, ymin, and ymax as key\u2013value pairs.     <pre><code>xmin    0.28\nxmax    19851.1\nymin    0.5\nymax    13476.4\n</code></pre></li> <li><code>transcripts.tiled.features.tsv</code>: A tab-delimited TSV file listing each feature name and its expression count per line.     <pre><code>1810009J06Rik   1\nGm48545         1\n</code></pre></li> </ul>"},{"location":"reference/run_ficture2/#segmentation-output","title":"Segmentation Output","text":"<ul> <li> <p><code>hexagon_d_{width}.randomized.tsv</code>: A plain-text TSV file that stores sparse feature representations for hexagon units, with each line corresponding to one hexagon.</p> <p>File Format</p> <p>This is not a regular table\u2014the number of columns varies across lines depending on the number of features present in each hexagon.</p> <pre><code>00001c64  18999.0000  9773.9627  227  244   2417 1  10469 2  2448 1  543 1   10935 1  6460 1  1797 1  6517 1  1094 1  9872 1  8587 1  7137 1  8786 1  10564 1  2127 1  439 1   1529 1  8432 1   1304 1  1739 1   3012 1  6434 1  5297 1  10017 1  2567 1  4771 1  5644 1  6415 1  5258 1   258 1   2314 1  6378 1  8843 1  7386 1  3322 1  2041 1  4735 1  9755 1  8614 1   4665 1  5693 1  2194 1  1680 1  10406 1  2696 1  7250 1  2367 1  7189 1  1616 1  10721 1  441 1   9981 1   8696 1  1012 1  8545 1  835 1   6550 1  4409 1  1860 1  575 1   139 1   5473 1  10172 1  7316 1  5260 1  180 1   2068 1  10806 1  8817 1  1621 1  4542 1  6193 1  440 1   6608 1  6989 1  4782 1  3258 1  5205 1  1093 1  9060 1  1921 1  6333 1   846 1   10575 1  2608 1  10186 1  932 1   2217 1  5392 1  2275 1  4845 1   8401 1  341 1   2810 1   754 1   4501 1  1160 1  5354 1  5097 1  3713 1  1619 1  9843 1  2749 1  1207 1  7384 1  2758 1  445 1   9040 1  45 1    2517 1   11255 1  8161 1  393 1   2963 1  3457 1  4481 1  10649 1  6954 2  2842 1  7982 1  2034 1  2849 2  5393 1  5257 1  773 1   1030 1  5455 1  2380 1  7079 1  1491 1  353 1    5343 1  1231 1  178 1   8659 1  10994 1  6168 1  267 1    6770 1   9083 1   2691 1  2423 2  3058 3  6921 1  1778 1  236 1   7175 1  7683 1   47 1    9094 2  1898 1  6524 1  5640 1  6668 1   6411 1  3536 1  10475 2  6538 1  1443 1  2728 1  7717 1  4633 1  6634 1   5349 1  11215 2  9159 1  2129 1  5984 1  8584 2  7042 1  3819 2  7931 1  2343 1  1182 2  2724 1  1871 1  716 1   1744 1  263 1   7459 1  6737 1  4654 1   9023 1  775 2    1546 1  1512 1  6395 1  5624 1  1560 2  8919 2  4689 1  2403 1  4163 1  5705 1  1260 1  8068 1  1900 1  1701 1  1187 1  8172 1  5955 1  494 1   428 1   6082 1  479 1   5362 1   11273 1  1764 1   9546 1  8261 1  11088 1  6262 1  2154 1  612 1   6777 2  866 1    10850 1  4168 1  9334 1  9077 2   3818 1  732 1   6386 1  989 1   1277 1  319 1   6230 1\n</code></pre> <ul> <li>1st column (str): Random identifier for the hexagon</li> <li>2nd and 3rd columns (float): Axial coordinates in the hexagonal coordinate system</li> <li>4th and 5th columns (int): Number of unique features and total counts, repeated per modality (for K modalities)</li> <li>6th column onward (integer integer): Index\u2013count pairs for non-zero features, using 0-based indices from --feature-dict or as provided in the input file</li> </ul> </li> <li> <p><code>hexagon_d_{width}.json</code>: The meta data for the hexagons. such as, , hexagon size, x and y column indices (), number of features, number of modalities, and number of hexagons (<code>n_units</code>),     <pre><code>{\n\"dictionary\": {\n    \"A2m\": 9636,\n    \"AA986860\": 6486,\n    ...\n    },\n    \"header_info\": [\n        \"random_key\",\n        \"x\",\n        \"y\"\n    ],\n    \"hex_size\": 10.392304845413264,\n    \"icol_x\": 1,\n    \"icol_y\": 2,\n    \"n_features\": 11319,\n    \"n_modalities\": 1,\n    \"n_units\": 498019,\n    \"offset_data\": 3,\n    \"random_key\": 0\n}\n</code></pre></p> <ul> <li><code>dictionary</code>: The feature name-idex pairs</li> <li><code>header_info</code>: Header information</li> <li><code>hex_size</code>: Size of hexagons</li> <li><code>icol_x</code> and <code>icol_y</code>: Indices of X and Y coordinates</li> <li><code>n_features</code>: Number of features</li> <li><code>n_modalities</code>: Number of modalities</li> <li><code>n_units</code>: Number of hexagons</li> <li><code>offset_data</code>: ?</li> <li><code>random_key</code>: the random seed for reproduction</li> </ul> </li> </ul>"},{"location":"reference/run_ficture2/#lda-training-output","title":"LDA Training Output","text":"<ul> <li><code>t{width}_f{n_factor}.model.tsv</code>: A matrix to store the learned topic-word distribution.     <pre><code>Feature  0        1      2      3      4      5      6         7      8      9      10        11       12     13     14        15     16     17     18      19     20      21     22     23\nNeu4     481.168  0.042  0.042  0.042  0.042  0.042  1828.293  0.042  0.042  0.042  2290.443  836.722  0.042  0.042  1704.589  0.042  0.042  0.042  29.738  0.042  24.854  0.042  0.042  0.042\n</code></pre><ul> <li>Rows (str): LDA topics or spatial factors</li> <li>Columns (int): Feature identifiers (e.g., gene names or indices)</li> <li>Values (float): Probability or weight of a feature under each topic <code>(P(feature | topic))</code></li> </ul> </li> <li><code>t{width}_f{n_factor}.results.tsv.gz</code>: A tab-delimited file containing the posterior topic distributions for each hexagon. <pre><code>x           y          0       1       2       3       4       5       6       7       8       9       10      11      12      13      14      15      16      17      18      19      20      21      22      23      topK  topP\n14202.0000  5393.6062  0.0000  0.5087  0.0860  0.0000  0.0269  0.0000  0.0136  0.0000  0.0000  0.0179  0.0153  0.0000  0.0490  0.0000  0.0982  0.0000  0.0911  0.0199  0.0143  0.0189  0.0373  0.0000  0.0030  0.0000  1     0.5087\n</code></pre><ul> <li><code>x</code> and <code>y</code> (float): X Y coordinates of the hexagon.</li> <li>Columns <code>0</code> to <code>{n_factor-1}</code> (float): Posterior probabilities for each latent factor <code>(P(topic | hexagon))</code></li> <li><code>topK</code> (int): Index of the most probable factor</li> <li><code>topP</code> (float): Posterior probability of the top factor</li> </ul> </li> <li> <p><code>t{width}_f{n_factor}.bulk_chisq.tsv</code> <pre><code>gene  factor  Chi2      pval      FoldChange  gene_total  log10pval\nApp   0       864182.5  0.00e+00  4.41        1422353     187657.91\n</code></pre></p> <ul> <li><code>gene</code> (str): Gene names.</li> <li><code>factor</code> (int): Factor IDs.</li> <li><code>Chi2</code> (float): Chi-squared test statistic comparing the expression in the target factor and the rest.</li> <li><code>pval</code> (float): P-value associated with the chi-squared test.</li> <li><code>FoldChange</code> (float): Ratio of gene expression inside versus outside the factor\u2019s high-loading region.</li> <li><code>gene_total</code> (int): Total count of the gene in the dataset.</li> <li><code>log10pval</code> (float): Base-10 logarithm of the inverse p-value (i.e., -log10(pval)), useful for ranking significant genes.</li> </ul> </li> <li> <p><code>t{width}_f{n_factor}.factor.info.tsv</code> and <code>t{width}_f{n_factor}.factor.info.html</code>: A TSV and HTML file providing the information for each factor per line.     <pre><code>Factor  RGB          Weight   PostUMI   TopGene_pval                                                                                                                                       TopGene_fc                                                                                                                                           TopGene_weight\n0       255,101,101  0.11279  82949360  App, Snrpn, Calm3, Eef1a2, Dctn1, Ptprn2, Akt3, Tmem181a, Sgtb, Ncdn, Selenow, Atp6v0a1, Cacng8, Atp2a2, Stub1, Akap5, Cmip, Cap1, Rundc3a, Ptprn  Sgtb, Map3k9, Cmip, Vps51, Ptprn2, Zscan2, Ppp2cb, Cacng8, Als2, Eif4e3, Ubxn2a, Gabrb2, Pms1, Rnpc3, Prepl, Zfp418, Tmem181a, Akap5, Dctn1, Atp2b3  App, Calm3, Selenow, Camk2n1, Snrpn, Ncdn, Atp2a2, Eef1a2, Uchl1, Ndfip1, Snap25, Stxbp1, Ywhag, Arf3, Serinc1, Atp6v1b2, Maged1, Atp6v0a1, Dnm1, Rab6b\n</code></pre></p> <ul> <li><code>Factor</code> (int): Factor IDs</li> <li><code>RGB</code> (str): Comma-separated RGB values</li> <li><code>Weight</code> (float): Proportion of the total factor signal explained by this factor</li> <li><code>PostUMI</code> (int): Sum of posterior UMI counts across all spatial locations for this factor</li> <li><code>TopGene_pval</code>, <code>TopGene_fc</code>, <code>TopGene_weight</code> (str): Top marker genes per factor ranked by significance (p-value), fold change, or weight</li> </ul> </li> <li><code>t{width}_f{n_factor}.cmap.tsv</code>: a color map.     <pre><code>R    G    B    Color_hex  Name\n255  101  101  #ff6565    0\n</code></pre><ul> <li><code>Name</code> (int): Factor IDs</li> <li><code>Color_hex</code> (str): Color HEX code</li> <li><code>R</code>, <code>G</code>, <code>B</code> (float): Red, Green, and Blue channel values (range: 0.0 to 1.0)</li> </ul> </li> </ul>"},{"location":"reference/run_ficture2/#decoding-output","title":"Decoding Output","text":"<ul> <li> <p><code>t{width}_f{n_factor}_p{width}_a{anchor_res}.tsv.gz</code>: A tab-delimited file where each line represents a pixel\u2013feature pair, recording the pixel\u2019s coordinates, the expressed feature and its count, along with the top three most probable latent factors (<code>K1</code>\u2013<code>K3</code>) and their corresponding probabilities (<code>P1</code>\u2013<code>P3</code>).     <pre><code>#x         y         feature  ct  K1  K2  K3  P1          P2          P3\n5159.4800  450.1500  Retreg2  1   0   19  9   9.5073e-01  4.8011e-02  5.0298e-04\n</code></pre></p> <ul> <li><code>x</code> and <code>y</code> (float): X Y coordinates</li> <li><code>feature</code> (str): feature names.</li> <li><code>ct</code> (int): count</li> <li><code>K1</code> (int) and <code>P1</code> (float): The most probable factor and its probability</li> <li><code>K2</code> (int) and <code>P2</code> (float): The 2nd most probable factor and its probability</li> <li><code>K3</code> (int) and <code>P3</code> (float): The 3rd most probable factor and its probability</li> </ul> </li> <li> <p><code>t{width}_f{n_factor}_p{width}_a{anchor_res}.index</code>: An index file for <code>t{width}_f{n_factor}_p{width}_a{anchor_res}.tsv.gz</code>.</p> </li> <li><code>t{width}_f{n_factor}_p{width}_a{anchor_res}.json</code>: A JSON file to provide header information for <code>t{width}_f{n_factor}_p{width}_a{anchor_res}.tsv.gz</code>.     <pre><code>{\n    \"K1\": 4,\n    \"K2\": 5,\n    \"K3\": 6,\n    \"P1\": 7,\n    \"P2\": 8,\n    \"P3\": 9,\n    \"ct\": 3,\n    \"feature\": 2,\n    \"x\": 0,\n    \"y\": 1\n}\n</code></pre></li> <li><code>t{width}_f{n_factor}_p{width}_a{anchor_res}.png</code>: A PNG file to visualize the spatial factors distribution at pixel level.</li> <li> <p><code>t{width}_f{n_factor}_p{width}_a{anchor_res}.pseudobulk.tsv</code>: A feature-by-factor matrix showing feature distribution across topics.     <pre><code>Feature  0         1       2       3       4       5       6          7       8       9       10         11        12      13      14        15      16      17      18       19      20       21      22      23\nNeu4     648.5156  0.0000  0.9999  0.0000  0.0000  2.1425  1316.2651  0.0000  0.0000  0.0000  1114.2935  527.5519  0.0000  0.0000  820.3735  0.0000  0.0000  3.3504  30.4680  0.0000  38.0400  0.0000  0.0000  0.0000\n</code></pre></p> <ul> <li>Rows (str): LDA topics or spatial factors</li> <li>Columns (int): Feature identifiers (e.g., gene names or indices)</li> <li>Values (float): Posterior probability of a feature in a factor.</li> </ul> </li> <li> <p><code>t{width}_f{n_factor}_p{width}_a{anchor_res}.bulk_chisq.tsv</code>: Same format as the <code>t{width}_f{n_factor}.bulk_chisq.tsv</code></p> </li> <li><code>t{width}_f{n_factor}_p{width}_a{anchor_res}.factor.info.tsv</code>:  Same format as the <code>t{width}_f{n_factor}.factor.info.tsv</code></li> <li><code>t{width}_f{n_factor}_p{width}_a{anchor_res}.factor.info.html</code>: Same format as the <code>t{width}_f{n_factor}.factor.info.html</code></li> </ul>"},{"location":"reference/run_ficture2/#summarization-output","title":"Summarization Output","text":"<ul> <li><code>ficture.params.json</code>: A JSON file to summarize the path to input, output, and paramaters.     <pre><code>{\n\"in_sge\": {\n    \"in_transcript\": \"/path/to/transcripts.unsorted.tsv.gz\",\n    \"in_feature\": \"/path/to/transcripts.tiled.features.hdr.tsv\",\n    \"in_minmax\": \"/path/to/coordinate_minmax.tsv\"\n},\n\"in_feature_ficture\": \"/path/to/transcripts.tiled.overlapping_features.min100.hdr.tsv\", # if available\n\"train_params\": [\n    {\n        \"model_type\": \"lda\",\n        \"model_id\": \"t{width}_f{n_factor}\",\n        \"model_path\": \"/path/to/t{width}_f{n_factor}.model.tsv\",\n        \"train_width\": width,\n        \"n_factor\": n_factor,\n        \"cmap\": \"/path/to/t{width}_f{n_factor}.cmap.tsv\",\n        \"decode_params\": [\n            {\n                \"decode_id\": \"t{width}_f{n_factor}_p{width}_a{anchor_res}\",\n                \"fit_width\": width,\n                \"anchor_res\": anchor_res\n            }\n        ]\n    }\n]\n}\n</code></pre></li> </ul>"},{"location":"reference/sge_convert/","title":"Spatial Gene Expression Format Conversion","text":""},{"location":"reference/sge_convert/#overview","title":"Overview","text":"<p>SGE datasets vary widely in format and resolution across platforms. Since <code>FICTURE</code> requires SGE in a specific format, <code>cartloader</code> toolkit provides this <code>sge_convert</code> module to standardize the raw, platform-specific SGE into a FICTURE-compatible format.</p>"},{"location":"reference/sge_convert/#requirements","title":"Requirements","text":"<p>Input Data Requirement:</p> <p>Please make sure the input data (raw, platform-specific SGE) contains at least the following information. should be a transcript-indexed SGE containing at least:</p> <ul> <li>Spatial coordinates (X coordinates, Y coordinates)</li> <li>Feature metadata (such as gene symbols)</li> <li>Expression Counts</li> </ul> <p>Platform Compatibility</p> <p>The current <code>sge_convert</code> supports standarizing SGE from the following platforms:</p> Source <code>--platform</code> Option Required Input Files 10x Visium HD <code>10x_visium_hd</code> <code>--in-mex</code>, <code>--in-parquet</code>, <code>--scale-json</code> Seq-Scope <code>seqscope</code> <code>--in-mex</code> 10x Xenium <code>10x_xenium</code> <code>--in-csv</code> Stereo-seq <code>bgi_stereoseq</code> <code>--in-csv</code> CosMx SMI <code>cosmx_smi</code> <code>--in-csv</code> Vizgen MERSCOPE <code>vizgen_merscope</code> <code>--in-csv</code> Pixel-seq <code>pixel_seq</code> <code>--in-csv</code> Generic CSV/TSV input <sup>1</sup> <code>generic</code> <code>--in-csv</code> <p><sub><sup>1</sup>: For SGE from platforms not yet explicitly supported by <code>cartloader</code>, or from custom/preprocessed sources, <code>sge_convert</code> provides a <code>generic</code> option that accepts CSV/TSV files with basic required fields (e.g., gene, spatial coordinates, expression count) for standardization and processing."},{"location":"reference/sge_convert/#example-usages","title":"Example Usages","text":""},{"location":"reference/sge_convert/#input-sge-in-mex-format","title":"Input SGE in MEX Format","text":""},{"location":"reference/sge_convert/#seq-scope","title":"<code>Seq-Scope</code>","text":"<pre><code>cartloader sge_convert \\\n    --platform seqscope \\\n    --in-mex /path/to/input/dir/of/mex \\   \n    --units-per-um 1000 \\\n    --icols-mtx 1 \\\n    --out-dir /path/to/output/dir \\\n    --colnames-count count \\\n    --filter-by-density \\\n    --out-filtered-prefix filtered \\\n    --genomic-feature count \\\n    --sge-visual \\\n    --north-up \\\n    --spatula /path/to/spatul/binary \n</code></pre>"},{"location":"reference/sge_convert/#10x-visium-hd","title":"<code>10X Visium HD</code>","text":"<pre><code>cartloader sge_convert \\\n    --platform 10x_visium_hd \\\n    --in-mex /path/to/input/dir/of/mex \\   \n    --in-parquet /path/to/input/parquet/file \\\n    --scale-json /path/to/input/json/file \\\n    --exclude-feature-regex '^(BLANK.*$|NegCon.*$|NegPrb.*$)' \\\n    --out-dir /path/to/output/dir \\\n    --spatula /path/to/spatul/binary \\\n    --sge-visual \n</code></pre>"},{"location":"reference/sge_convert/#input-sge-in-tsvcsv-format","title":"Input SGE in TSV/CSV Format","text":"<p>This applies to input SGE in TSV/CSV format from platforms including 10X Xenium, StereoSeq, Cosmx SMI, MERSCOPE, Pixel-seq. To simplify preprocessing, <code>sge_convert</code> automatically applies platform-specific defaults for common CSV/TSV parameters.</p> <p>Below is an example converting SGE from StereoSeq.</p> <pre><code>cartloader sge_convert \\\n    --platform bgi_stereoseq \\\n    --in-csv /path/to/input/csv/file \\\n    --units-per-um 28.75 \\\n    --out-dir /path/to/output/dir \\\n    --colnames-count count \\\n    --exclude-feature-regex '^(BLANK.*$|NegCon.*$|NegPrb.*$)' \\\n    --filter-by-density \\\n    --out-filtered-prefix filtered \\\n    --genomic-feature count \\\n    --sge-visual \\\n    --north-up \\\n    --spatula /path/to/spatul/binary \n</code></pre> <p>Verify your input structure</p> <p>Always double-check the column names and metadata format of your input files. If they differ from the expected defaults, override them using <code>--csv-*</code> and <code>--min-phred-score</code> options.</p> Click to view platform-specific default settings <p>To streamline the process, <code>sge_convert</code> automatically applies platform-dependent defaults for CSV/TSV parsing based on known file formats and column conventions. Below summarizes the default values for key parameters per supported platform:</p> Platform <code>--csv-comment</code><sup>1</sup> <code>--csv-delim</code> <code>--csv-colname-x</code> <code>--csv-colname-y</code> <code>--csv-colnames-count</code> <code>--csv-colname-feature-name</code> 10X Xenium<sup>2</sup> <code>False</code> <code>,</code> <code>x_location</code> <code>y_location</code> - <code>feature_name</code> StereoSeq <code>False</code> <code>\\t</code> <code>x</code> <code>y</code> <code>MIDCounts</code> <code>geneID</code> CosMx SMI <code>False</code> <code>,</code> <code>x_local_px</code> <code>y_local_px</code> - <code>target</code> MERSCOPE <code>False</code> <code>,</code> <code>global_x</code> <code>global_y</code> - <code>gene</code> Pixel-seq <code>False</code> <code>\\t</code> <code>xcoord</code> <code>ycoord</code> - <code>geneName</code> <p><sub><sup>1</sup> <code>--csv-comment</code>: If <code>True</code>, the lines starts with <code>#</code> will be treated as comments and will be skipped. <p><sub><sup>2</sup> 10X Xenium: Besides the above default settings, for 10X Xenium data, <code>sge_convert</code> also applies <code>--csv-colname-phredscore qv</code> and <code>--min-phred-score 20</code>."},{"location":"reference/sge_convert/#actions","title":"Actions","text":""},{"location":"reference/sge_convert/#sge-conversion","title":"SGE Conversion","text":"<p>Converting SGE into a FICTURE-compatible TSV format. During conversion, SGE coordinates are rescaled to micrometer units based on the pixel resolution specified in the input. It's also available to apply feature (typically, genes) filtering.</p>"},{"location":"reference/sge_convert/#optional-density-based-filtering","title":"(Optional) Density-based Filtering","text":"<p>Automatically identify and retain high-quality tissue regions based on transcript density and spatial structure. This step takes the format-standardized SGE as input and generate a density-based filtered SGE.</p>"},{"location":"reference/sge_convert/#optional-sge-visualization","title":"(Optional) SGE Visualization","text":"<p>Draws an image of 2D points provided as an input. In this step, it is optional to enable the <code>--north-up</code> option to ensuring correct spatial orientation (i.e., Y-axis increases upward/north and X-axis increases to the right/east).</p>"},{"location":"reference/sge_convert/#parameters","title":"Parameters","text":"<p>The following outlines the minimum required parameters.</p> <p>For most auxiliary parameters, the default values are recommended and could be modified when they do not suit your use case. See more details in the collapsible sections below or by running: <pre><code>cartloader sge_convert --help\n</code></pre></p>"},{"location":"reference/sge_convert/#sge-conversion_1","title":"SGE Conversion","text":"<ul> <li><code>--platform</code> (str): Source platform to infer the input file format and default setting (options: \"<code>10x_visium_hd</code>\", \"<code>seqscope</code>\", \"<code>10x_xenium</code>\", \"<code>bgi_stereoseq</code>\", \"<code>cosmx_smi</code>\", \"<code>vizgen_merscope</code>\", \"<code>pixel_seq</code>\", \"<code>generic</code>\").</li> <li><code>--in-mex</code> (str): Path to the input SGE directory in MEX format. Required for MEX-formatted data (e.g., 10X Visium HD, SeqScope).</li> <li><code>--in-csv</code> (str): Path to the input SGE file in CSV or TSV format. Required for CSV/TSV-formatted data (e.g., 10X Xenium, StereoSeq, CosMX SMI, MERSCOPE, Pixel-seq).</li> <li><code>--in-parquet</code> (str) : Path to the input parquet file with spatial coordinates, if available. Typically named <code>tissue_positions.parquet</code> (10X Visium HD).</li> <li><code>--scale-json</code> (str): Path to the scale JSON file to compute <code>--units-per-um</code>, if available. Typically named <code>scalefactors_json.json</code> (10X Visium HD).</li> <li><code>--units-per-um</code> (float): Coordinate units per micrometer (default: 1.00). Skip if <code>--scale-json</code> is provided.</li> <li><code>--out-dir</code> (str) : Path to the output directory.</li> <li><code>--include-feature-regex</code> (regex): (Optional) A regex pattern of feature/gene names to be included.</li> <li><code>--exclude-feature-regex</code> (regex): (Optional) A regex pattern of feature/gene names to be excluded.</li> </ul> Auxiliary SGE Conversion Paramaters <p>Auxiliary Input MEX Parameters:</p> <ul> <li><code>--icols-mtx</code> (int or comma-spearated list): Comma-separated, 1-based indices of the target genomic features among the count columns in the input matrix file. (Default: 1)</li> <li><code>--colnames-count</code> (string or comma-spearated list): Comma-separated output column names for the specified genomic features. (Default: count). The number of names specified by <code>--colnames-count</code> must match the number of indices provided in <code>--icols-mtx</code>.</li> </ul> <p>Auxiliary Input CSV/TSV Parameters:</p> <ul> <li><code>--csv-comment</code> (flag): If enabled, lines starts with <code>#</code> will be skipped (default: <code>False</code> for 10X Xenium, StereoSeq, CosMx SMI, MERSCOPE, and Pixel-seq).</li> <li><code>--csv-delim</code> (str): Delimiter for the input file (default: <code>\",\"</code> for 10X Xenium, CosMx SMI, and MERSCOPE; <code>\"\\t\"</code> for StereoSeq, Pixel-seq).</li> <li><code>--csv-colname-x</code> (str): Column name for X coordinates (default: <code>x_location</code> for 10X Xenium; <code>x</code> for StereoSeq; <code>x_local_px</code> for CosMx SMI; <code>global_x</code> for MERSCOPE; <code>xcoord</code> for Pixel-seq).</li> <li><code>--csv-colname-y</code> (str): Column name for Y coordinates (default: <code>y_location</code> for 10X Xenium; <code>y</code> for StereoSeq; <code>y_local_px</code> for CosMx SMI; <code>global_y</code> for MERSCOPE; <code>ycoord</code> for Pixel-seq).</li> <li><code>--csv-colnames-count</code> (str): Comma-separated column names for expression count. If not provided, a count of 1 per transcript (default: <code>MIDCounts</code> for StereoSeq).</li> <li><code>--csv-colname-feature-name</code> (str): Column name for gene name (default: <code>feature_name</code> for 10X Xenium; <code>geneID</code> for StereoSeq; <code>target</code> for CosMx SMI; <code>gene</code> for MERSCOPE; <code>geneName</code> for Pixel-seq).</li> <li><code>--csv-colnames-others</code> (str): Columns names to keep.</li> <li><code>--csv-colname-phredscore</code> (str): Column name for Phred-scaled quality value estimating the probability of incorrect calls (default: <code>qv</code> for 10X Xenium).</li> <li><code>--min-phred-score</code> (int): Phred-scaled quality score cutoff (default: <code>20</code> for 10X Xenium).</li> </ul> <p>Auxiliary Output Parameters: </p> <ul> <li><code>--out-transcript</code> (str): File name for output compressed transcript-indexed SGE file in TSV format (default: <code>transcripts.unsorted.tsv.gz</code>).</li> <li><code>--out-minmax</code> (str): File name for coordinate min-max values in TSV format (default: <code>coordinate_minmax.tsv</code>).</li> <li><code>--out-feature</code> (str): File name for compressed UMI count per gene in TSV format (default: <code>feature.clean.tsv.gz</code>).</li> <li><code>--precision-um</code> (int): Decimal precision for transcript coordinates; set to <code>0</code> to round to integers (default: 2).</li> <li><code>--colname-x</code> (str): Column name for the X-coordinate in the output SGE (default: X).</li> <li><code>--colname-y</code> (str): Column name for the Y-coordinate in the output SGE (default: Y).</li> <li><code>--colnames-count</code> (str): Comma-separated column names for expression count in the output SGE (default: count).</li> <li><code>--colname-feature-name</code> (str): Column name for the gene name in the output SGE(default: gene).</li> </ul> <p>Auxiliary Environment Parameters If the binaries are already available in your system's <code>PATH</code>, you may omit these options.</p> <ul> <li><code>--gzip</code> (str): Path to <code>gzip</code> binary; consider <code>pigz -p 4</code> for faster processing. (Default: <code>gzip</code>)</li> <li><code>--spatula</code> (str): Path to <code>spatula</code> binary. (Default: <code>spatula</code>)</li> <li><code>--parquet-tools</code> (str): Required if <code>--in-parquet</code> is used; path to <code>parquet-tools</code> binary. (Default: <code>parquet-tools</code>)</li> </ul>"},{"location":"reference/sge_convert/#optional-density-based-filtering_1","title":"(Optional) Density-based Filtering","text":"<ul> <li><code>--filter-by-density</code> (flag): Enable filtering of SGE by density.</li> <li><code>--out-filtered-prefix</code> (str): Prefix for output filtered SGE files (default: filtered).</li> <li><code>--genomic-feature</code> (str): Genomic feature to be used for density-based filtering. Defaults to the value of <code>--colnames-count</code> if only one column name is provided.</li> </ul> Auxiliary Density-based Filtering Paramaters <ul> <li><code>--mu-scale</code> (float): Scale factor for the polygon area calculation (default: 1.0).</li> <li><code>--radius</code> (int): Radius for the polygon area calculation (default: 15).</li> <li><code>--quartile</code> (int): Quartile for the polygon area calculation (default: 2).</li> <li><code>--hex-n-move</code> (int): Sliding step (default: 1).</li> <li><code>--polygon-min-size</code> (int): The minimum polygon size (default: 500).</li> </ul>"},{"location":"reference/sge_convert/#optional-sge-visualization_1","title":"(Optional) SGE Visualization","text":"<ul> <li><code>sge-visual</code> (flag): Enable SGE visualization.</li> <li><code>--north-up</code> (flag): Enable the north-up orientation for the SGE visualization.</li> </ul> Auxiliary SGE Visualization Paramaters <ul> <li><code>--out-xy</code> (str): File name for output SGE visualization image (default: <code>xy.png</code>).</li> <li><code>--out-northup-tif</code> (str): File name for output north-up orientated image (default: <code>xy_northup.tif</code>).</li> <li><code>--srs</code> (str): If <code>--north-up</code>, define the spatial reference system (default: EPSG:3857).</li> <li><code>--resample</code> (str): If <code>--north-up</code>, Define the resampling method (default: cubic). Options: near, bilinear, cubic, etc.</li> <li><code>--gdal_translate</code> (str): Required if <code>--north-up</code>; path to <code>gdal_translate</code> binary. (Default: <code>gdal_translate</code>)</li> <li><code>--gdalwarp</code> (str): Required if <code>--north-up</code>; path to <code>gdalwarp</code> binary. (Default: <code>gdalwarp</code>)</li> </ul>"},{"location":"reference/sge_convert/#output","title":"Output","text":"<p><code>cartloader</code> generates the following harmonized outputs:</p>"},{"location":"reference/sge_convert/#unified-sge-matrix","title":"Unified SGE matrix","text":"<p>Both SGE conversion and density-based filtering generate a unified SGE matrix, consisting of:</p> <code>transcripts.unsorted.tsv.gz</code>: transcript-indexed SGE in TSV <pre><code>X        Y        gene     count\n295.29   1422.35  Myo3a    0\n1745.54  1110.72  Med14    1\n1745.54  1110.72  Ntpcr    1\n</code></pre> <ul> <li><code>X</code>: X coordinates in um</li> <li><code>Y</code>: Y coordinates in um</li> <li><code>gene</code>: gene symbols</li> <li><code>count</code>: expression count per pixel per gene</li> </ul> <code>feature.clean.tsv.gz</code>: UMI counts on a per-gene basis in TSV <p><pre><code>gene           gene_id             count\nGm29155        ENSMUSG00000100764  1\nPcmtd1         ENSMUSG00000051285  431\nGm26901        ENSMUSG00000097797  1\n</code></pre> * <code>gene</code>: gene symbols * <code>gene_id</code>: gene IDs * <code>count</code>: expression count per gene</p> <code>coordinate_minmax.tsv</code>: X Y min/max includemd_vigenettes_sgeformat.mdcoordinates <pre><code>xmin    0.14\nxmax    2359.90\nymin    0.23\nymax    1439.95\n</code></pre> <ul> <li><code>xmin</code> <code>xmax</code>: min and max X coordinates in um</li> <li><code>ymin</code> <code>ymax</code>: min and max Y coordinates in um</li> </ul>"},{"location":"reference/sge_convert/#sge-images","title":"SGE Images","text":"<ul> <li>When <code>--sge-visual</code> is enabled, a monochrome PNG image is generated to visualize the SGE data.</li> <li>When <code>--north-up</code> is enabled, a georeferenced TIFF image is produced with a north-up orientation.</li> </ul>"},{"location":"reference/upload_repository/","title":"Data Repository Upload","text":""},{"location":"reference/upload_repository/#overview","title":"Overview","text":"<p><code>cartloader</code> offers two modules (<code>upload_aws</code> and <code>upload_zenodo</code>) to upload all generated outputs \u2014- including rasterized SGE tiles, decoded spatial factor maps, and molecule-factor joins \u2014- to a target data repository for sharing or deployment. It supports both AWS and Zenodo as upload backends, allowing users to choose their preferred platform.</p>"},{"location":"reference/upload_repository/#requirements","title":"Requirements","text":"<ul> <li>A completed run of <code>run_cartload2</code>, which produces:<ul> <li>Rasterized SGE tiles</li> <li>Decoded spatial factor maps</li> <li>Joined molecule-factor outputs</li> <li>A catalog file (<code>catalog.yaml</code>) summarizing the output structure and metadata</li> </ul> </li> <li>For AWS uploads:<ul> <li>AWS CLI installed and configured (e.g., via <code>aws configure</code>)</li> </ul> </li> <li> <p>For Zenodo uploads:</p> <ul> <li>A personal access token saved in a file, required for authentication with the Zenodo API</li> <li>(Optional) A Zenodo deposition ID if the user prefers to upload files to an existing deposition.</li> </ul> What are the Zenodo token and deposition ID, why do you need them, and how do you get them? <p>Zenodo Token File</p> <p><code>cartloader</code> leverages the Zenodo API for uploading files, which provides a streamlined and efficient experience. To authenticate uploads via the API, Zenodo requires an access token for secure.</p> <p>To obtain a token for use with <code>cartloader</code>:</p> <ol> <li>Log in to Zenodo.</li> <li>Go to your applications page.</li> <li>Click \"New Token\" and select appropriate scopes (e.g., <code>deposit:write</code>, <code>deposit:actions</code>).</li> <li>Copy the generated token.</li> <li>Save the token in a plain text file, and pass the file path to the <code>--token-file</code> option when running <code>cartloader</code>.</li> </ol> <p>Zenodo Deposition ID</p> <p>A deposition ID is a unique numeric identifier assigned to a deposition (i.e., a dataset record) you create on Zenodo. This ID specifies where your uploaded files will be stored. If you\u2019ve already created a deposition, you can find its ID at the end of the URL. For example: <pre><code>https://zenodo.org/deposit/1234567\n                                \u2191\n                        This is the deposition ID\n</code></pre></p> </li> </ul>"},{"location":"reference/upload_repository/#aws-uploads","title":"AWS Uploads","text":"<p>We recommend to create create a directory within your AWS S3 bucket using a data id as directory name.</p> <pre><code>AWS_BUCKET=\"EXAMPLE_AWS_BUCKET\"         # replace EXAMPLE_AWS_BUCKET with your actual S3 bucket name\nDATA_ID=\"EXAMPLE_ID\"                    # change EXAMPLE_ID to reflect your dataset name\n\ncartloader upload_aws \\\n  --in-dir /path/to/run_cartload2/output/directory \\\n  --s3-dir \"s3://${AWS_BUCKET}/${DATA_ID}\" \\\n  --aws /path/to/your/aws/binary \\\n  --n-jobs 10\n</code></pre> <ul> <li><code>--in-dir</code> (str): Path to the input directory containing the cartloader compilation output</li> <li><code>--s3-dir</code> (str): Path to the target S3 directory for uploading.</li> <li><code>--aws</code> (str): Path to the AWS CLI binary</li> <li><code>--n-jobs</code> (str): Number of parallel jobs</li> <li><code>--catalog-yaml</code> (str): Path to the <code>catalog.yaml</code> file generated in <code>run_cartload2</code>. If absent, will use the <code>catalog.yaml</code> in the input directory specified by <code>--in-dir</code>.</li> </ul>"},{"location":"reference/upload_repository/#zenodo-uploads","title":"Zenodo Uploads","text":"<p>Define Zenodo deposition</p> <p>You must choose one of the following modes:</p> <ul> <li>Use an existing deposition via <code>--zenodo-deposition-id</code></li> <li>Create a new deposition via <code>--create-new-deposition</code></li> </ul> <p>(1) To upload files to an exist deposition ID: <pre><code>zenodo_depostion_ID=DEPOSTION_ID                # Replace DEPOSTION_ID with yours\n\ncartloader upload_zenodo \\\n    --in-dir /path/to/run_cartload2/output/directory \\\n    --upload-method catalog \\\n    --zenodo-token /path/to/zenodo_token.txt \\\n    --zenodo-deposition-id ${zenodo_depostion_ID}\n</code></pre></p> <p>(2) To upload files to a new deposition ID: <pre><code>cartloader upload_zenodo \\\n  --upload-method catalog \\\n  --in-dir /path/to/run_cartload2/output/directory \\\n  --zenodo-token /path/to/zenodo_token.txt \\\n  --create-new-deposition \\\n  --title  \"Title Info\" \\        \n  --creators \"Creator Name\" \\   \n  --description \"Description Info\"\n</code></pre></p>"},{"location":"reference/upload_repository/#input-parameters","title":"Input Parameters","text":"<ul> <li><code>--in-dir</code> (str):Path to the input directory containing the <code>run_cartload2</code> output files.</li> <li><code>--upload-method</code> (str, default: <code>all</code>):  Method to determine which files to upload. Options:  <ul> <li><code>all</code>: Upload all files in <code>--in-dir</code> </li> <li><code>catalog</code>: Upload files listed in a catalog YAML file  </li> <li><code>user_list</code>: Upload files explicitly listed via <code>--in-list</code></li> </ul> </li> <li><code>--in-list</code> (list of str): Required if if using <code>--upload-method user_list</code>. Allow multiple filenames.</li> <li><code>--catalog-yaml</code> (str): Required if <code>--upload-method catalog</code>. Path to the <code>catalog.yaml</code> file generated in <code>run_cartload2</code>. If absent, will use the <code>catalog.yaml</code> in the input directory specified by <code>--in-dir</code>.</li> </ul>"},{"location":"reference/upload_repository/#zenodo-configuration","title":"Zenodo Configuration","text":"<p>Must specify exactly one of <code>--zenodo-deposition-id</code> or <code>--create-new-deposition</code>.</p> <ul> <li><code>--zenodo-token</code> (str): Path to your Zenodo access token file.</li> <li><code>--zenodo-deposition-id</code> (str): A Zenodo deposition ID to upload files to. </li> <li><code>--create-new-deposition</code> (flag): If set, a new Zenodo deposition will be created.</li> <li><code>--create-new-version</code> (flag): If set, a new version will be created for the provided deposition ID. This is useful to update the files for a published deposition. When enabled, <code>--zenodo-deposition-id</code> must be applied.</li> </ul>"},{"location":"reference/upload_repository/#deposition-metadata","title":"Deposition Metadata","text":"<p>Required only if creating a new deposition.</p> <ul> <li><code>--title</code> (str): Title for the new Zenodo deposition.</li> <li><code>--upload-type</code> (str, default: dataset): Type of deposition. Options: dataset, software, publication, poster, presentation, image, video, lesson, other</li> <li><code>--creators</code> (list of str): List of creators in \"Lastname, Firstname\" format.</li> </ul>"},{"location":"reference/upload_repository/#behavior-flags","title":"Behavior Flags:","text":"<ul> <li><code>--overwrite</code> (flag): If set, overwrite existing files in the Zenodo deposition.</li> <li><code>--dry-run</code> (flag): If set, simulate the upload without modifying the Zenodo deposition.</li> </ul>"},{"location":"vignettes/intro/","title":"Vignettes","text":"<p>We offer a series of tutorials to help users master the <code>cartloader</code> toolkit across a range of scenarios \u2014 from simple getting-started examples to processing full-scale ST datasets. </p> <p>For a more detailed explanation of each step, refer to our References Page.</p>"},{"location":"vignettes/intro/#quick-start","title":"Quick Start","text":"<p>If you're new to <code>cartloader</code>, we recommend beginning with the Quick Start tutorial. </p> <p>This vignette provides a beginner-friendly walkthrough using a small mouse hippocampus dataset to walks through <code>cartloader</code> functions.</p> <ul> <li> <p> Quick Start Tutorial </p> <p>Read</p> </li> </ul>"},{"location":"vignettes/intro/#getting-started-per-platform","title":"Getting Started per Platform","text":"<p>These tutorials show how to run the <code>cartloader</code> pipeline on a variety of ST platforms, using small, representative datasets.</p> <p>For consistency, we curated hippocampus from the mouse brain for each platform, when possible. If hippocampal data is unavailable for a given platform, we selected another brain subregion to illustrate the process.</p> <p>Warning</p> <p>Each tutorial begins with data in the platform\u2019s native format.</p>"},{"location":"vignettes/intro/#sequencing-based-platforms","title":"Sequencing-based Platforms","text":"<ul> <li> <p> SeqScope Starter Guide </p> <p>Read</p> </li> <li> <p> 10X Visium HD Starter Guide </p> <p>Read</p> </li> <li> <p> StereoSeq Starter Guide </p> <p>Read</p> </li> <li> <p> Pixel-seq Starter Guide </p> <p>Read</p> </li> </ul>"},{"location":"vignettes/intro/#imaging-based-platforms","title":"Imaging-based Platforms","text":"<ul> <li> <p> 10X Xenium Starter Guide </p> <p>Read</p> </li> <li> <p> Vizgen MERSCOPE Starter Guide </p> <p>Read</p> </li> <li> <p> CosMX SMI Starter Guide </p> <p>Read</p> </li> </ul>"},{"location":"vignettes/intro/#real-world-use-cases","title":"Real-World Use Cases","text":"<p>These examples demonstrate how to process walk through real-world whole-sample ST datasets. Each example uses a whole mouse brain sample for consistency.</p> <p>Warning</p> <p>Tutorials will be updated.</p>"},{"location":"vignettes/intro/#multi-sample-batch-analysis","title":"Multi-Sample Batch Analysis","text":"<p>Warning</p> <p>This function is still under development</p> <p>This upcoming section will showcase how to process multiple samples in a single batch. It will include tutorials on cross-sample analysis.</p>"},{"location":"vignettes/quickstart/quickstart/","title":"A Quick Start","text":"<p>This page provides a quick-start example with a small dataset from mouse hippocampus to help users verify their installation and get familiar with <code>cartloader</code> and the <code>cartostore</code> workflow.</p> <p>The workflow consists of three major steps:</p> <ol> <li><code>FICTURE</code> Analysis \u2014 computes factor embeddings and visualizations via <code>punkst</code>.</li> <li><code>cartloader</code> Compilation \u2014 generates web-compatible tiles.</li> <li><code>AWS</code> Upload \u2014 places results into an AWS S3 bucket for sharing via <code>cartostore</code>.</li> </ol> <p>Requirement</p> <p>Before getting started, please ensure that cartloader and all prerequisites are installed (see Installation guide).</p>"},{"location":"vignettes/quickstart/quickstart/#input-data","title":"Input Data","text":"<p>This tutorial used an SGE representing the mouse hippocampus as input data. </p> <p>The input SGE file was already converted to a format compatible with <code>FICTURE</code> using <code>sge_convert</code> in <code>cartloader</code> .</p> <p>Prepare Input SGE for <code>FICTURE</code></p> <p><code>FICTURE</code> requires input in the form of a transcript-indexed SGE file in TSV format with at least: X and Y spatial coordinates, gene identifiers, and expression counts. </p> <p>Because ST platforms vary widely in their data formats and metadata structures, <code>cartloader</code> provides the <code>sge_convert</code> module to convert raw SGE data into the standardized format required by <code>FICTURE</code>.</p> <p>For detailed platform-specific instructions on preparing compatible SGE files, see the Vignettes.</p> <p>File Format</p> <p>The example SGE includes the following files:</p> <code>transcripts.unsorted.tsv.gz</code>: transcript-indexed SGE in TSV <pre><code>X        Y        gene     count\n295.29   1422.35  Myo3a    0\n1745.54  1110.72  Med14    1\n1745.54  1110.72  Ntpcr    1\n</code></pre> <ul> <li><code>X</code>: X coordinates in um</li> <li><code>Y</code>: Y coordinates in um</li> <li><code>gene</code>: gene symbols</li> <li><code>count</code>: expression count per pixel per gene</li> </ul> <code>feature.clean.tsv.gz</code>: UMI counts on a per-gene basis in TSV <p><pre><code>gene           gene_id             count\nGm29155        ENSMUSG00000100764  1\nPcmtd1         ENSMUSG00000051285  431\nGm26901        ENSMUSG00000097797  1\n</code></pre> * <code>gene</code>: gene symbols * <code>gene_id</code>: gene IDs * <code>count</code>: expression count per gene</p> <code>coordinate_minmax.tsv</code>: X Y min/max includemd_vigenettes_sgeformat.mdcoordinates <pre><code>xmin    0.14\nxmax    2359.90\nymin    0.23\nymax    1439.95\n</code></pre> <ul> <li><code>xmin</code> <code>xmax</code>: min and max X coordinates in um</li> <li><code>ymin</code> <code>ymax</code>: min and max Y coordinates in um</li> </ul> <p>Data Access</p> <p>The input example data is hosted on Zenedo DOI: 10.5281/zenodo.15701393.</p> <p>Follow the commands below to download the example data.</p> <pre><code>work_dir=/path/to/work/directory\ncd $work_dir\n\nwget https://zenodo.org/records/15786632/files/seqscope_starter.std.tar.gz\ntar -zxvf seqscope_starter.std.tar.gz\n</code></pre>"},{"location":"vignettes/quickstart/quickstart/#set-up-the-environment","title":"Set Up the Environment","text":"<p>Define paths to all required binaries and resources, and target AWS S3 bucket. Optionally, specify a fixed color map for consistent rendering.</p> <pre><code># ====\n# Replace each placeholder with the actual path on your system.  \n# ====\nwork_dir=/path/to/work/directory        # path to work directory that contains the downloaded input data\ncd $work_dir\n\n# Define paths to required binaries and resources\nspatula=/path/to/spatula/binary         # path to spatula executable\npunkst=/path/to/punkst/binary           # path to FICTURE2/punkst executable\ntippecanoe=/path/to/tippecanoe/binary   # path to tippecanoe executable\npmtiles=/path/to/pmtiles/binary         # path to pmtiles executable\naws=/path/to/aws/cli/binary             # path to AWS CLI binary\n\n# (Optional) Define path to color map. \ncmap=/path/to/color/map                 # Path to the fixed color map for rendering. cartloader provides a fixed color map at cartloader/assets/fixed_color_map_256.tsv.\n\n# AWS S3 target location for cartostore\nAWS_BUCKET=\"EXAMPLE_AWS_BUCKET\"         # replace EXAMPLE_AWS_BUCKET with your actual S3 bucket name\n\n# Activate the bioconda environment\nconda activate ENV_NAME              # replace BIOENV_NAME with your bioconda environment name\n</code></pre> <p>Define data ID and analysis parameters:</p> <pre><code>cd $work_dir\n\n# Unique identifier for your dataset\nDATA_ID=\"seqscope_hippo\"                # change this to reflect your dataset name\nPLATFORM=\"seqscope\"                     # platform information\n\n# LDA parameters\ntrain_width=18                           # define LDA training hexagon width (comma-separated if multiple widths are applied)\nn_factor=6,12                            # define number of factors in LDA training (comma-separated if multiple n-factor are applied)\n</code></pre>"},{"location":"vignettes/quickstart/quickstart/#ficture-analysis","title":"<code>FICTURE</code> analysis","text":"<p>Compute spatial factors using <code>punkst</code> (FICTURE2 mode). See more details in Reference page.</p> <pre><code>cartloader run_ficture2 \\\n  --makefn run_ficture2.mk \\\n  --main \\\n  --in-transcript ./sge/transcripts.unsorted.tsv.gz \\\n  --in-feature ./sge/feature.clean.tsv.gz \\\n  --in-minmax ./sge/coordinate_minmax.tsv \\\n  --cmap-file ${cmap} \\\n  --exclude-feature-regex '^(mt-.*$|Gm\\d+$)' \\\n  --out-dir ./ficture2 \\\n  --width ${train_width} \\\n  --n-factor ${n_factor} \\\n  --spatula ${spatula} \\\n  --ficture2 ${punkst} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--main</code> required <sup>1</sup> flag Enable <code>cartloader</code> to run all five steps <code>--in-transcript</code> required string Path to input transcript-level SGE file <code>--out-dir</code> required string Path to output directory <code>--width</code> required int or comma-separated list LDA training hexagon width(s) <code>--n-factor</code> required int or comma-separated list Number of LDA factors <code>--makefn</code> string File name for the generated Makefile (default: <code>run_ficture2.mk</code> ) <code>--in-feature</code> string Path to input feature file <code>--in-minmax</code> string Path to input coordinate min/max file <code>--cmap-file</code> string Path to color map file <code>--exclude-feature-regex</code> regex Pattern to exclude features <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--ficture2</code> string Path to the <code>punkst</code> directory (defaults to <code>punkst</code> repository within <code>submodules</code> directory of  <code>cartloader</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>) <p><sub><sup>1</sup>: <code>cartloader</code> requires the user to specify at least one action. Available actions includes: <code>--tile</code> to run tiling step; <code>--segment</code> to run segmentation step; <code>--init-lda</code> to run LDA training step; <code>--decode</code> to run decoding step; <code>--summary</code> to run summarization step; <code>--main</code> to run all above five actions.</sub></p>"},{"location":"vignettes/quickstart/quickstart/#cartloader-compilation","title":"<code>cartloader</code> Compilation","text":"<p>Generate pmtiles and web-compatible tile directories. See more details in Reference page.</p> <pre><code>cartloader run_cartload2 \\\n  --makefn run_cartload2.mk \\\n  --fic-dir ./ficture2 \\\n  --out-dir ./cartload2 \\\n  --id ${DATA_ID} \\\n  --spatula ${spatula} \\\n  --pmtiles ${pmtiles} \\\n  --tippecanoe ${tippecanoe} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--fic-dir</code> required string Path to the input directory containing FICTURE2 output <code>--out-dir</code> required string Path to the output directory for PMTiles and web tiles <code>--id</code> required string Dataset ID used for naming outputs and metadata <code>--makefn</code> string File name for the generated Makefile (default: <code>run_cartload2.mk</code>) <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--pmtiles</code> string Path to the <code>pmtiles</code> binary (default: <code>pmtiles</code>) <code>--tippecanoe</code> string Path to the <code>tippecanoe</code> binary (default: <code>tippecanoe</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>)"},{"location":"vignettes/quickstart/quickstart/#upload-to-data-repository","title":"Upload to Data Repository","text":"<p>Choose a data repository to host/share your output</p> <p><code>cartloader</code> supports two upload options (<code>AWS</code> and <code>Zenodo</code>) for storing PMTiles of SGE and spatial factors in a data repository.</p> <p>Choose the one that best suits your needs.</p>"},{"location":"vignettes/quickstart/quickstart/#aws-uploads","title":"AWS Uploads","text":"<p>Upload the generated cartloader outputs to your designated AWS S3 directory:</p> <pre><code>cartloader upload_aws \\\n  --in-dir ./cartload2 \\\n  --s3-dir \"s3://${AWS_BUCKET}/${DATA_ID}\" \\\n  --aws ${aws} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--s3-dir</code> required string Path to the target S3 directory for uploading <code>--aws</code> string Path to the AWS CLI binary <code>--n-jobs</code> int Number of parallel jobs"},{"location":"vignettes/quickstart/quickstart/#zenodo-uploads","title":"Zenodo Uploads","text":"<p>Upload the generated cartloader outputs to your designated Zenodo deposition or a new deposition.</p> <pre><code>cartloader upload_zenodo \\\n  --in-dir ./cartload2 \\\n  --upload-method catalog \\\n  --zenodo-token /path/to/zenodo/token/file \\\n  --create-new-deposition \\\n  --title  \"Yur Title\" \\\n  --creators \"Your Name\" \\\n  --description \"This is an example description\"\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--upload-method</code> required string Method to determine which files to upload. Options: <code>all</code> to upload all files in <code>--in-dir</code>; <code>catalog</code> to upload files listed in a catalog YAML file, <code>user_list</code> to upload files explicitly listed via <code>--in-list</code> <code>--catalog-yaml</code> string Required if <code>--upload-method catalog</code>.  Path to the catalog.yaml file generated in <code>run_cartload2</code>. If absent, will use the catalog.yaml in the input directory specified by <code>--in-dir</code>. <code>--zenodo-token</code> required string Path to your Zenodo access file <code>--create-new-deposition</code> flag a new Zenodo deposition will be created. <code>--title</code> required string Required if <code>--create-new-deposition</code>. Title for the new Zenodo deposition. <code>--creators</code> required list of str List of creators in \"Lastname, Firstname\" format."},{"location":"vignettes/quickstart/quickstart/#output-data","title":"Output Data","text":"<p>See more details of output at the Reference pages for run_ficture2 and run_cartload2.</p>"},{"location":"vignettes/quickstart/quickstart/#spatial-factor-inference-from-ficture","title":"Spatial Factor Inference from <code>FICTURE</code>","text":"<p>Below is an example of spatial factor inference results produced by <code>FICTURE</code> using a training width of 18, 12 factors, a fit width of 18, and an anchor resolution of 6.</p> <p> </p> Factor RGB Weight PostUMI TopGene_pval TopGene_fc TopGene_weight 0 255,101,101 0.57145 2577934 Snap25,Cck,Hpca,Syt1,Atp1b1,Selenow,Ywhah,Scg5,Cnih2,Atp1a3,Vsnl1,Gnas,Cpe,Prkcb,Stmn2,Atp2b1,Gng3,Prkcg,Snrpn,Norad Nr2c1,Calca,Wdr91,Ccbe1,Esyt1,Epha3,Slc9a4,Thap7,Mapk11,Klk8,Arhgef6,1110018N20Rik,Iba57,Klk10,Gjd2,Leng9,Zbtb46,Slc9a2,Akr1c18,Dlx6os1 Snap25,Tmsb4x,Atp1b1,Actb,Cpe,Ywhah,Nrgn,Ppp3ca,Selenow,Calm1,Atp1a3,Calm2,Fth1,Rtn1,Cox8a,Gnas,Camk2a,Norad,Aldoa_v1,Ndrg4 1 237,238,0 0.15458 697338 Ppp3ca,Nrgn,Ptk2b,Olfm1,Ppp3r1,Gria2,Ncdn,Nsf,Syne1,Snca,Chn1,Tmsb4x,Rasgrf1,Grin2a,Enc1,Kalrn,Wasf1,Camk2b,Calm2,Epha7 Vwa8,Zfp583,Sppl2b,Faap24,Recql5,A230051N06Rik,Ints6l,Rnaseh2b,Strada,Scnn1a,Snhg17,Prelid3a,Grhl1,Icam4,Slc44a5,Tyw1,Parp8,Asb11,Vipr1,Zfp668 Ppp3ca,Nrgn,Tmsb4x,Actb,Snap25,Atp1b1,Olfm1,Ywhah,Calm2,Ncdn,Rtn1,Ptk2b,Calm1,Ppp3r1,Actg1,Chn1,Fth1,Ndrg4,Fkbp1a,Cfl1 2 101,255,101 0.116 523314 Cst3,Glul,Slc1a2,Mt1,Apoe,Sparcl1,Aldoc,Clu,Atp1a2,Slc1a3,Camk2a,Ndrg2,Gfap,Mt2,Gpr37l1,Atp1b2,Fam107a,Prdx6,Bc1,Plpp3 Pdk4,Bgn,Unc93b1,Rfx4,Ccr5,Phkg1,Slc38a3,Pax6,Chil1,Gli3,Thbs4,Ppp1r18,Sh3pxd2b,Lyz2,Cpt1a,Aif1,Pdlim4,Cd33,Lcat,Arhgef19 Cst3,Glul,Slc1a2,Sparcl1,Camk2a,Cpe,Mt1,Apoe,Mbp,Fth1,Aldoc,Clu,Ttr,Camk2n1,Ckb,Ddn,Rps29,Atp1a2,Scd2,Mt3 3 101,254,255 0.09284 418815 Fam163b,Prox1,Adcy1,Stxbp6,C1ql2,Btbd3,Synpr,Sema5a,Dsp,Eef1a1,Ncdn,Jun,Lrrtm4,Rfx3,Olfm1,Dgkh,Marcksl1,Ncald,Pitpnm2,Nrgn Il20rb,Tdo2,Col22a1,C1ql2,St3gal1,Plk5,Dsp,Prox1os,Fam163b,Prox1,Rph3al,H2bc6,Lrrtm4,Mcm6,Khdrbs2,Vwa3b,Prdm5,Npnt,Dact1,Stxbp6 Nrgn,Eef1a1,Ncdn,Olfm1,Ppp3ca,Actb,Tmsb4x,Calm1,Camk2a,Sparcl1,Atp1b1,Adcy1,Fam163b,Tspan7,Ndrg4,Rplp1,Arf3,Camk2n1,Rpl17,Ptk2b 4 101,101,255 0.03885 175240 Plp1,Mbp,Gatm,Mobp,Cnp,Cldn11,Fth1,Car2,Ermn,Cryab,Qdpr,Tubb4a,Trf,Plekhb1,Qki,Tspan2,Mal,Bcas1,Tmem88b,Septin4 Insc,Creb5,Tmem125,Trim36,Hapln2,Pde1c,Gjc2,Prr5l,Gjc3,Sec14l5,Gatm,Nkx6-2,Tmem88b,Adamts4,Plekhh1,Ermn,Plp1,Trim59,Plekhg3,Enpp6 Mbp,Plp1,Fth1,Mobp,Ptgds,Actb,Gatm,Tubb4a,Cnp,Car2,Cldn11,Tpt1,Scd2,Glul,Qdpr,App,Qki,Ptma,Malat1,Lars2 5 255,101,254 0.02347 105862 Ttr,Ptgds,Enpp2,Tac2,Gng8,Sostdc1,Ecrg4,Zic1,Calb2,Nnat,Dcn,Tmem212,Adcyap1,Gpr151,2900040C04Rik,Necab2,Apod,Nhlh2,Pou4f1,Ace Tmem212,Kcne2,Cldn2,Dcn,Septin10,Col8a2,Pou4f1,Nhlh2,Gng8,Wif1,Chrna3,Adcyap1,Folr1,Col1a2,Clec3b,Gng14,Sostdc1,Foxc1,Ecrg4,Tac2 Ttr,Ptgds,Enpp2,Apoe,Cpe,Pcp4,Actb,Eef1a1,Nnat,Psap,Fth1,Tpt1,Cst3,Dbi,Atp1b1,Cox8a,Sparcl1,Clu,Rpl23,Cox7c 6 255,178,101 0.00163 7366 Nkx2-2,Abtb2,Myo1d,C030029H02Rik,Pogk,Dusp16,Smco3,Gjb1,Ldlrad3,Rhobtb3,Lrrc8c,Cdr2,Piga,Tjap1,Carns1,Gpt,Prim1,Sh3gl3,Plk3,Cerox1 Nkx2-2,Abtb2,C030029H02Rik,Myo1d,Dusp16,Smco3,Gjb1,Pogk,Prim1,Ldlrad3,Plk3,Vgll4,Carns1,Gpt,Letm2,Cdr2,Piga,Fign,Lmln,Tjap1 Mbp,Fth1,Pogk,Malat1,Qdpr,Plp1,Myo1d,Tubb4a,Abtb2,Rps27a,Rhobtb3,Glul,Gatm,Nkx2-2,Sh3gl3,Alkbh5,C030029H02Rik,Smco3,Tpt1,Gjb1 7 178,255,101 0.00073 3290 Sst,Crhbp,Npy,Cort,Reln,Uhrf1bp1,Rab3b,2310010J17Rik,Elfn1,Lypd6b,Lgals1,Rpp25,Gad2,Cdh13,Clic5,Cenpf,Dlx1,Bcam,Foxred2,Sec14l5 Sst,Uhrf1bp1,Crhbp,Cort,Reln,Lypd6b,2310010J17Rik,Elfn1,Rab3b,Npy,Clic5,Rpp25,Cenpf,Bcam,Lgals1,Sec14l5,Dlx1,Foxred2,Gpc3,Cdh13 Sst,Npy,Crhbp,Atp1b1,Reln,Cort,Zwint,Gad2,Rab3b,Syt1,2310010J17Rik,Snap25,Sparcl1,Atp1a3,Oxr1,Scg2,Mdh1,Atp6v0c,Atp6v1e1,Vgf 9 101,178,255 0.0004 1817 Hba-a2,Hbb-bs,Hba-a1,Hbb-bt,Tent5c,Polr2l,Aven,Tinagl1,Map2k3,Rgs6,Bst2,Zfp318,Stk40,Plekha8,Ube2l6,Rad50,Slc12a4,Kank2,Srgap1,Klf2 Hba-a1,Hbb-bs,Hbb-bt,Hba-a2,Tent5c,Polr2l,Aven,Tinagl1,Map2k3,Rgs6,Bst2,Slc12a4,Stk40,Ube2l6,Plekha8,Kank2,Rad50,Zfp318,Prtg,Srgap1 Hba-a2,Hbb-bs,Hba-a1,Hbb-bt,Polr2l,Atp1b1,Camk2a,Plekhb1,Tent5c,Rpl31,Praf2,Tpd52,Ptgds,Ddn,Fth1,Calm3,Rpl38,Mobp,Psme3,Mkrn1 8 0,223,95 5e-05 214 Sass6,Recql5,Jmjd4,A230072C01Rik,Zfp583,Eef1akmt2,Rnaseh2b,Orc6,Akap10,Mak16,Slc25a35,Dclre1b,C130074G19Rik,Fbxw4,Arhgap10,Il17ra,Zbtb2,Katnip,Hook2,Ints6l Sass6,Recql5,Jmjd4,A230072C01Rik,Zfp583,Rnaseh2b,Eef1akmt2,Akap10,Orc6,Slc25a35,Dclre1b,C130074G19Rik,Mak16,Arhgap10,Il17ra,Fbxw4,Katnip,Zbtb2,Hook2,Ints6l Sass6,Recql5,Jmjd4,Cst3,Mak16,A230072C01Rik,Orc6,Tmsb4x,Zfp583,Hexb,Eef1akmt2,Capzb,Gabarapl1,Mdh2,Odc1,Rpl6,Olfm1,Rps8,Golga1,Zfp106"},{"location":"vignettes/quickstart/quickstart/#packed-sge-and-spatial-factor-outputs-from-run_cartload2","title":"Packed SGE and Spatial Factor Outputs from <code>run_cartload2</code>","text":"<p>The packed SGE data and spatial factor inferences generated by <code>FICTURE</code> are available in PMTile format on Zenodo: DOI:10.5281/zenodo.15759403.</p> <p>These datasets can also be loaded directly using the following catalog YAML file: <code>https://zenodo.org/records/15802634/catalog.yaml</code></p>"},{"location":"vignettes/subregion_tutorials/cosmxsmi/","title":"CosMX SMI Starter Tutorial","text":""},{"location":"vignettes/subregion_tutorials/cosmxsmi/#input-data","title":"Input Data","text":"<p>The input data is from an adult mouse hippocampus, extracted by masking a coronal brain section. The original full-section </p> <p>File Format</p> <p>The CosMx SMI by NanoString generates high-resolution spatial transcriptomics data with single-molecule resolution with a comma-separated values (CSV) table.</p> <p>CSV File Format</p> <pre><code>\"fov\",\"cell_ID\",\"x_global_px\",\"y_global_px\",\"x_local_px\",\"y_local_px\",\"z\",\"target\",\"CellComp\"\n64,0,-473043,7954.533,4015.3,4246.2,1,\"Gfap\",\"None\"\n64,0,-473022.9,7902.723,4035.48,4194.39,1,\"Fth1\",\"None\"\n64,0,-473132,7836.476,3926.34,4128.143,1,\"Ptn\",\"None\"\n</code></pre> <ul> <li><code>fov</code>: The field of view (FOV) number.</li> <li><code>cell_ID</code>: Unique identifier for a single cell within a given FOV. 0 if background or unassigned molecules.</li> <li><code>x_global_px</code>, <code>y_global_px</code>: Global pixel coordinates relative to the tisse.</li> <li><code>x_local_px</code>, <code>y_local_px</code>: The x or y position (in pixels) relative to the given FOV.</li> <li><code>z</code>: Z-plane index representing the depth (optical section) where the transcript was detected.</li> <li><code>target</code>: Name of the target.</li> <li><code>CellComp</code>: Subcellular location of target.</li> </ul> <p>Data Access</p> <p>The example data is hosted on Zenedo ().</p> <p>Follow the commands below to download the example data.</p> <pre><code>work_dir=/path/to/work/directory\ncd $work_dir\nwget  https://zenodo.org/records/15786632/files/cosmxsmi_starter.raw.tar.gz\ntar --strip-components=1 -zxvf cosmxsmi_starter.raw.tar.gz\n</code></pre>"},{"location":"vignettes/subregion_tutorials/cosmxsmi/#set-up-the-environment","title":"Set Up the Environment","text":"<p>Define paths to all required binaries and resources, and target AWS S3 bucket. Optionally, specify a fixed color map for consistent rendering.</p> <pre><code># ====\n# Replace each placeholder with the actual path on your system.  \n# ====\nwork_dir=/path/to/work/directory        # path to work directory that contains the downloaded input data\ncd $work_dir\n\n# Define paths to required binaries and resources\nspatula=/path/to/spatula/binary         # path to spatula executable\npunkst=/path/to/punkst/binary           # path to FICTURE2/punkst executable\ntippecanoe=/path/to/tippecanoe/binary   # path to tippecanoe executable\npmtiles=/path/to/pmtiles/binary         # path to pmtiles executable\naws=/path/to/aws/cli/binary             # path to AWS CLI binary\n\n# (Optional) Define path to color map. \ncmap=/path/to/color/map                 # Path to the fixed color map for rendering. cartloader provides a fixed color map at cartloader/assets/fixed_color_map_256.tsv.\n\n# AWS S3 target location for cartostore\nAWS_BUCKET=\"EXAMPLE_AWS_BUCKET\"         # replace EXAMPLE_AWS_BUCKET with your actual S3 bucket name\n\n# Activate the bioconda environment\nconda activate ENV_NAME              # replace BIOENV_NAME with your bioconda environment name\n</code></pre> <p>Define data ID and analysis parameters:</p> <pre><code># Unique identifier for your dataset\nDATA_ID=\"cosmxsmi_hippo\"                # change this to reflect your dataset name\nPLATFORM=\"cosmx_smi\"                    # platform information\nSCALE=$(echo 1000/120|bc -l)              # scale from coordinate to micrometer\n\n# LDA parameters\ntrain_width=12                           # define LDA training hexagon width (comma-separated if multiple widths are applied)\nn_factor=6,12                            # define number of factors in LDA training (comma-separated if multiple n-factor are applied)\n</code></pre> <p>How to Define Scaling Factors for CosMX SMI?</p> <p>According to the README.html provided with the Pixel-seq dataset, each pixel has an edge length of 120\u202fnm. To calculate the number of pixels per micrometer, use the formula: scale = 1000 / 120.</p>"},{"location":"vignettes/subregion_tutorials/cosmxsmi/#sge-format-conversion","title":"SGE Format Conversion","text":"<p>Convert the raw input to the unified SGE format. See more details in Reference page.</p> <pre><code>cartloader sge_convert \\\n  --makefn sge_convert.mk \\\n  --platform ${PLATFORM} \\\n  --in-csv ./input.tsv.gz \\\n  --units-per-um ${SCALE} \\\n  --out-dir ./sge \\\n  --exclude-feature-regex '^(BLANK|NegCon|NegPrb)' \\\n  --sge-visual \\\n  --spatula ${spatula} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--platform</code> required string Platform (options: \"<code>10x_visium_hd</code>\", \"<code>seqscope</code>\", \"<code>10x_xenium</code>\", \"<code>bgi_stereoseq</code>\", \"<code>cosmx_smi</code>\", \"<code>vizgen_merscope</code>\", \"<code>pixel_seq</code>\", \"<code>generic</code>\") <code>--in-csv</code> required string Path to the input TSV/CSV file <code>--units-per-um</code> required float Scale to convert coordinates to microns (default: <code>1.0</code>) <code>--out-dir</code> required string Output directory for the converted SGE files <code>--makefn</code> string File name for the generated Makefile (default: <code>sge_convert.mk</code>) <code>--exclude-feature-regex</code> regex Pattern to exclude control features <code>--sge-visual</code> flag Enable SGE visualization step (generates diagnostic image) (default: <code>FALSE</code>) <code>--spatula</code> string Path to the spatula binary (default: <code>spatula</code>) <code>--n-jobs</code> int Number of parallel jobs for processing (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/cosmxsmi/#ficture-analysis","title":"<code>FICTURE</code> analysis","text":"<p>Compute spatial factors using <code>punkst</code> (FICTURE2 mode). See more details in Reference page.</p> <pre><code>cartloader run_ficture2 \\\n  --makefn run_ficture2.mk \\\n  --main \\\n  --in-transcript ./sge/transcripts.unsorted.tsv.gz \\\n  --in-feature ./sge/feature.clean.tsv.gz \\\n  --in-minmax ./sge/coordinate_minmax.tsv \\\n  --cmap-file ${cmap} \\\n  --exclude-feature-regex '^(mt-.*$|Gm\\d+$)' \\\n  --out-dir ./ficture2 \\\n  --width ${train_width} \\\n  --n-factor ${n_factor} \\\n  --spatula ${spatula} \\\n  --ficture2 ${punkst} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--main</code> required <sup>1</sup> flag Enable <code>cartloader</code> to run all five steps <code>--in-transcript</code> required string Path to input transcript-level SGE file <code>--out-dir</code> required string Path to output directory <code>--width</code> required int or comma-separated list LDA training hexagon width(s) <code>--n-factor</code> required int or comma-separated list Number of LDA factors <code>--makefn</code> string File name for the generated Makefile (default: <code>run_ficture2.mk</code> ) <code>--in-feature</code> string Path to input feature file <code>--in-minmax</code> string Path to input coordinate min/max file <code>--cmap-file</code> string Path to color map file <code>--exclude-feature-regex</code> regex Pattern to exclude features <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--ficture2</code> string Path to the <code>punkst</code> directory (defaults to <code>punkst</code> repository within <code>submodules</code> directory of  <code>cartloader</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>) <p><sub><sup>1</sup>: <code>cartloader</code> requires the user to specify at least one action. Available actions includes: <code>--tile</code> to run tiling step; <code>--segment</code> to run segmentation step; <code>--init-lda</code> to run LDA training step; <code>--decode</code> to run decoding step; <code>--summary</code> to run summarization step; <code>--main</code> to run all above five actions.</sub></p>"},{"location":"vignettes/subregion_tutorials/cosmxsmi/#cartloader-compilation","title":"<code>cartloader</code> Compilation","text":"<p>Generate pmtiles and web-compatible tile directories. See more details in Reference page.</p> <pre><code>cartloader run_cartload2 \\\n  --makefn run_cartload2.mk \\\n  --fic-dir ./ficture2 \\\n  --out-dir ./cartload2 \\\n  --id ${DATA_ID} \\\n  --spatula ${spatula} \\\n  --pmtiles ${pmtiles} \\\n  --tippecanoe ${tippecanoe} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--fic-dir</code> required string Path to the input directory containing FICTURE2 output <code>--out-dir</code> required string Path to the output directory for PMTiles and web tiles <code>--id</code> required string Dataset ID used for naming outputs and metadata <code>--makefn</code> string File name for the generated Makefile (default: <code>run_cartload2.mk</code>) <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--pmtiles</code> string Path to the <code>pmtiles</code> binary (default: <code>pmtiles</code>) <code>--tippecanoe</code> string Path to the <code>tippecanoe</code> binary (default: <code>tippecanoe</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/cosmxsmi/#upload-to-data-repository","title":"Upload to Data Repository","text":"<p>Choose a data repository to host/share your output</p> <p><code>cartloader</code> supports two upload options (<code>AWS</code> and <code>Zenodo</code>) for storing PMTiles of SGE and spatial factors in a data repository.</p> <p>Choose the one that best suits your needs.</p>"},{"location":"vignettes/subregion_tutorials/cosmxsmi/#aws-uploads","title":"AWS Uploads","text":"<p>Upload the generated cartloader outputs to your designated AWS S3 directory:</p> <pre><code>cartloader upload_aws \\\n  --in-dir ./cartload2 \\\n  --s3-dir \"s3://${AWS_BUCKET}/${DATA_ID}\" \\\n  --aws ${aws} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--s3-dir</code> required string Path to the target S3 directory for uploading <code>--aws</code> string Path to the AWS CLI binary <code>--n-jobs</code> int Number of parallel jobs"},{"location":"vignettes/subregion_tutorials/cosmxsmi/#zenodo-uploads","title":"Zenodo Uploads","text":"<p>Upload the generated cartloader outputs to your designated Zenodo deposition or a new deposition.</p> <pre><code>cartloader upload_zenodo \\\n  --in-dir ./cartload2 \\\n  --upload-method catalog \\\n  --zenodo-token /path/to/zenodo/token/file \\\n  --create-new-deposition \\\n  --title  \"Yur Title\" \\\n  --creators \"Your Name\" \\\n  --description \"This is an example description\"\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--upload-method</code> required string Method to determine which files to upload. Options: <code>all</code> to upload all files in <code>--in-dir</code>; <code>catalog</code> to upload files listed in a catalog YAML file, <code>user_list</code> to upload files explicitly listed via <code>--in-list</code> <code>--catalog-yaml</code> string Required if <code>--upload-method catalog</code>.  Path to the catalog.yaml file generated in <code>run_cartload2</code>. If absent, will use the catalog.yaml in the input directory specified by <code>--in-dir</code>. <code>--zenodo-token</code> required string Path to your Zenodo access file <code>--create-new-deposition</code> flag a new Zenodo deposition will be created. <code>--title</code> required string Required if <code>--create-new-deposition</code>. Title for the new Zenodo deposition. <code>--creators</code> required list of str List of creators in \"Lastname, Firstname\" format."},{"location":"vignettes/subregion_tutorials/cosmxsmi/#output-data","title":"Output Data","text":"<p>See more details of output at the Reference pages for run_ficture2 and run_cartload2.</p>"},{"location":"vignettes/subregion_tutorials/cosmxsmi/#spatial-factor-inference-from-ficture","title":"Spatial Factor Inference from <code>FICTURE</code>","text":"<p>Below is an example of spatial factor inference results produced by <code>FICTURE</code> using a training width of 12, 12 factors, a fit width of 12, and an anchor resolution of 6.</p> <p> </p> Factor RGB Weight PostUMI TopGene_pval TopGene_fc TopGene_weight 1 237,238,0 0.17207 548469625 Tmsb4x,Calm2,Snap25,Calm1,Ywhaz,Slc17a7,Cck,Dnm1,Ywhag,Aldoa,Hsp90ab1,Calm3,Atp2b1,Nell2,Rtn3,Snca,Gpm6a,Prkcb,Prkca,Cyfip2 Cck,Camk4,Prkca,Camk1d,Slc17a7,Ywhag,Epha6,Atp2b1,Calm2,Sv2b,Snca,Syn2,Prkcb,Lpl,Nell2,Snap25,Stmn2,Pde1a,Kcnq5,Cnksr2 Tmsb4x,Snap25,Calm2,Calm1,Ywhaz,Atp1b1,Aldoa,Hsp90ab1,Dnm1,Slc17a7,Rtn3,Calm3,Camk2a,Ywhag,Gpm6a,Cck,Ppp3ca,Rtn1,Nrgn,Cpe 0 255,101,101 0.16 510000383 Camk2b,Adcy1,Ppp3ca,Kalrn,Nrgn,Olfm1,Ppfia2,Ctxn1,Gria1,Gria2,Prkce,Ryr2,Camk2a,Grin2a,Gabrb3,Zbtb20,Wasf1,Tiam1,Ntrk3,Mapk1 Ppfia2,Adcy1,Sema5a,Camk2b,Kalrn,Plxna4,Calb1,Tiam1,Jun,Rasgrf2,Nedd4l,Dapk1,Grin2a,Npy1r,Itga8,Ryr2,Auts2,Ppp3ca,Dgkg,Grm7 Malat1,Camk2b,Camk2a,Calm1,Ppp3ca,Tmsb4x,Adcy1,Nrgn,Calm2,Olfm1,Atp1b1,Ndrg4,Gria2,Ywhaz,Kalrn,Gria1,Ctxn1,Prkce,Aldoa,Snap25 3 101,254,255 0.11601 369772892 Malat1,Hnrnpa2b1,Tardbp,Tnik,Grk3,Mid1,Ptprs,Nf1,Prkn,Vegfa,Kidins220,Tnrc6a,Dmd,Camk2g,Uggt2,Pou2f1,Meg3,Sema6d,Spag9,Ntsr2 Gal,Malat1,Avp,Cd109,Grk3,Lilra5,C2,Prkn,Crhr1,Ngfr,Gcgr,Dmd,Vegfa,C3,Dapk2,Pcsk6,Nrf1,Uggt2,P2rx4,Slc18a2 Malat1,Hnrnpa2b1,Hmgb1,Meg3,Gria2,Ptprs,Tardbp,Gnao1,Tnik,Apoe,Kidins220,Slc1a2,Ahcyl1,Nf1,Bcan,Mid1,Spag9,Camk2g,Fus,Tuba1a/b/c 5 255,101,254 0.09996 318610467 Nap1l5,Atp1b1,Gad1,Ndrg4,Meg3,Cnr1,Sncb,Gad2,Sst,Snap25,Syt1,Zwint,Tmsb10,Snrpn,Gnas,Npy,Sv2a,Cacnb4,Ldhb,Mdh1 Sst,Gad2,Npy,Cnr1,Nap1l5,Gad1,Pvalb,Slc32a1,Vip,Gap43,Adgrl2,Cntn4,Sncb,Atp2b4,Cckbr,Grik1,Grm8,Rims2,Cacnb4,Tmsb10 Atp1b1,Malat1,Snap25,Ndrg4,Meg3,Nap1l5,Ckb,Rtn3,Snrpn,Gnas,Calm1,Syt1,Zwint,Mdh1,Dnm1,Calm2,Aldoa,Sncb,Gad1,Dynll2 2 101,255,101 0.09064 288906127 Plp1,Ptgds,Scd2,Apod,Mag,Cryab,Ndrg1,Mog,Ugt8a,Bin1,Gpr37,Aspa,Mobp,Fa2h,Gsn,Mbp,Abca2,Cntn2,Slc44a1,Jam3 Plp1,Mag,Mog,Ugt8a,Aspa,Ptgds,Cryab,Apod,Fa2h,Myrf,Ndrg1,Gpr37,Gjb1,Pde8a,Cntn2,Gsn,Fgfr2,Scd2,Jam3,Abca2 Plp1,Malat1,Ptgds,Scd2,Mbp,Fth1,Glul,Apod,Mobp,Mag,Cryab,Bin1,Ndrg1,Gpm6b,Mog,Ywhaq,Cd81,Gpr37,Tmsb4x,Hmgb1 4 101,101,255 0.08492 270686250 Apoe,Clu,Slc1a2,Glul,Aldoc,Atp1a2,Slc1a3,Cst3,Gja1,Plpp3,Ckb,Ndrg2,Sparcl1,Gpr37l1,Gfap,Gstm1,Aqp4,Mt1,Mt3,Mfge8 Gja1,Slc1a3,Aldoc,Apoe,Atp1a2,Clu,Gpr37l1,Aqp4,Plpp3,Slc1a2,Gfap,Mt1,Mfge8,Gstm1,Slc6a11,Ndrg2,Glul,Ednrb,Ntsr2,Agt Apoe,Clu,Glul,Slc1a2,Cst3,Aldoc,Malat1,Ckb,Atp1a2,Sparcl1,Slc1a3,Mt3,Cpe,Ndrg2,Plpp3,Scd2,Tspan7,Gja1,Ntrk2,Dbi 6 255,178,101 0.08061 256947664 Pcp4,Itm2c,Calb2,Nnat,Pcsk1n,Rtn1,Map1b,Cacna1e,Thy1,Clstn1,Cbln2,Gabbr2,Tcf7l2,Bex1/2,Rit2,Kcnd2,Slc2a13,Apba1,Tac1,Nsg1 Calb2,Cbln2,Tac1,Nnat,Oprm1,Tcf7l2,Pcp4,Apba1,Slc5a7,Rit2,Slc2a13,Sstr2,Rgs6,Itm2c,Cartpt,Synpr,Gabbr2,Pcsk1n,Gria4,Fgf1 Itm2c,Rtn1,Pcp4,Malat1,Map1b,Pcsk1n,Cpe,Atp1b1,Aldoa,Tuba1a/b/c,Hsp90ab1,Thy1,Psap,Rtn3,Eif4a2,Clstn1,Gnao1,Meg3,Cacna1e,Slc25a4 7 178,255,101 0.04347 138561767 Bsg,Slc2a1,Cldn5,Flt1,Itm2a,Rgs5,Pltp,Igfbp7,Serinc3,Esam,Vim,Slc7a5,Acta2,Igf1r,Id1,Fn1,Sptbn1,Srgn,Pecam1,St3gal6 Flt1,Cldn5,Itm2a,Rgs5,Pltp,Acta2,Fn1,Pecam1,Esam,Slc2a1,Igfbp7,Myl9,Lsr,Emcn,Slc7a5,Kdr,Tagln,Srgn,St3gal6,Vim Bsg,Malat1,Slc2a1,Tmsb4x,Serinc3,Cldn5,Sptbn1,H3f3b,Flt1,Myl6,Aplp2,Itm2a,Gnb1,Pltp,Rgs5,Cpe,Itm2b,Hmgb1,Calm1,Igfbp7 11 255,153,204 0.0429 136738469 Ptprz1,Cspg5,Pdgfra,Olig1,Gpr17,Epn2,Tnr,Pllp,Vcan,Fyn,Serpine2,Cd9,Tuba1a/b/c,Olig2,Pcdh15,S100a16,S100b,Sulf2,Serinc5,Cntn1 Vcan,Pdgfra,Gpr17,Pcdh15,Olig2,Tnr,S100b,Olig1,Ptprz1,Cspg5,Fyn,Epn2,Itpr2,Serpine2,Cd9,S100a16,Sox6,Megf11,Pllp,Sulf2 Malat1,Tuba1a/b/c,Ptprz1,Cspg5,Olig1,Epn2,Pllp,Camk2a,Cd9,Serpine2,Calm1,Ncam1,Fyn,Bcan,Ckb,Tnr,Pdgfra,Cntn1,Hnrnpa2b1,Hmgb1 10 178,101,255 0.03812 121510243 Ttr,Psap,Cab39l,Chchd10,Lamp2,Cox8a,Htr2c,Slc12a2,Ppp1r1b,Timp2,Ctsd,Mdh1,Gpi1,Bsg,Ndufa4,Itpr1,Ftl1,App,Sem1,Itgb8 Ttr,Htr2c,Cab39l,Ppp1r1b,Lepr,Slc12a2,Col4a5,Foxj1,Lamp2,Msr1,Dlk1,Timp2,Ctnna1,Chchd10,Maob,Sil1,Itpr1,Tspo,Cd55,Dcn Ttr,Psap,Malat1,Atp1b1,Cox8a,Mdh1,Bsg,Gpi1,Ctsd,Cab39l,Chchd10,App,Ndufa4,Clu,Ckb,Hspa8,Lamp2,Ptgds,Cst3,Slc12a2 9 101,178,255 0.03663 116755577 Cst3,Camk2a,C1qc,Hexb,Ctsd,C1qa,C1qb,Ctss,Csf1r,Vtn,P2ry12,Sparc,Selplg,Cx3cr1,Hmgb1,Tyrobp,Itm2b,Rps9,Tmem119,Tgfbr1 C1qc,Csf1r,Ctss,C1qb,C1qa,Hexb,Selplg,P2ry12,Tmem119,Cx3cr1,Tyrobp,Vtn,Trem2,Ptprc,Csf3r,Tgfbr1,Lyz1/2,Cd84,Higd1b,Epb41l2 Cst3,Camk2a,Tmsb4x,Hmgb1,Ctsd,Itm2b,Malat1,Rps9,Sparc,Hexb,Glul,C1qc,C1qa,Fau,C1qb,Ctsb,Ctss,Csf1r,Vtn,Fth1 8 0,223,95 0.03466 110484904 Mbp,Fth1,Mobp,Cpe,Bcas1,Hipk2,Kif5c,Pink1,Dync1li2,Gfap,Rims1,Cd6,Frs2,Lpar1,Ptpn11,Gpm6b,Map4k4,Ndrg1,S100b,Drd1 Mbp,Mobp,Bcas1,Fth1,Hipk2,Pink1,Cd6,Cpe,Dync1li2,Kif5c,Gfap,Rims1,Frs2,Lpar1,Ptpn11,S100b,Map4k4,Drd1,Gpm6b,Ndrg1 Mbp,Fth1,Mobp,Cpe,Malat1,Kif5c,Clu,Apoe,Glul,Plp1,Bcas1,Tmsb4x,Dync1li2,Hipk2,Pink1,Gfap,Hsp90ab1,Slc1a2,Gpm6b,Calm1"},{"location":"vignettes/subregion_tutorials/cosmxsmi/#packed-sge-and-spatial-factor-outputs-from-run_cartload2","title":"Packed SGE and Spatial Factor Outputs from <code>run_cartload2</code>","text":"<p>The packed SGE data and spatial factor inferences generated by <code>FICTURE</code> are available in PMTile format on Zenodo: DOI:10.5281/zenodo.15824926.</p> <p>These datasets can also be loaded directly using the following catalog YAML file: <code>https://zenodo.org/records/15824927/catalog.yaml</code></p>"},{"location":"vignettes/subregion_tutorials/merscope/","title":"Vizgen MERSCOPE Starter Tutorial","text":""},{"location":"vignettes/subregion_tutorials/merscope/#input-data","title":"Input Data","text":"<p>The input is a spatial gene expression (SGE) dataset from the adult mouse hippocampus, extracted by masking a coronal brain section (Slice Number: 2\uff1bReplicate Number: 1; file: <code>detected_transcripts.csv</code>) from Vizgen MERSCOPE Neuroscience Showcase.</p> <p>File Format</p> <p>The MERSCOPE input SGE includes one comma delimited text file with the following format:</p> <p>CSV file format</p> <pre><code>,barcode_id,global_x,global_y,global_z,x,y,fov,gene\n0,22,56.930107,3851.851,5.0,147.80061,1711.9067,0,Adgre1\n1,22,183.60107,3874.0085,5.0,1320.6799,1917.0692,0,Adgre1\n2,22,59.750736,3666.5576,5.0,132.66754,1844.2372,1,Adgre1\n</code></pre> <ul> <li>Column 1: Unique numeric index for each transcript within a field of view (non-consecutive, ascending).  </li> <li><code>barcode_id</code>: Zero-based index of the transcript barcode in the codebook; forms a composite key with <code>fov</code>.</li> <li><code>global_x</code>: Transcript x coordinates (\u00b5m) in the experimental region; may be negative due to alignment.  </li> <li><code>global_y</code>: Transcript y coordinates (\u00b5m) in the experimental region; may be negative due to alignment.  </li> <li><code>global_z</code>: The index of the z-position. The position is a zero-indexed integer.</li> <li><code>x</code>: The x-coordinate of the transcript (\u00b5m), within the coordinate space of the field of view.</li> <li><code>y</code>: The y-coordinate of the transcript (\u00b5m), within the coordinate space of the field of view.</li> <li><code>fov</code>: Zero-based field of view index; forms a composite key with <code>barcode_id</code>.  </li> <li><code>gene</code>: Gene name associated with the transcript.</li> </ul> <p>Data Access</p> <p>The example data is hosted on Zenedo ().</p> <p>Follow the commands below to download the example data.</p> <pre><code>work_dir=/path/to/work/directory\ncd $work_dir\nwget  https://zenodo.org/records/15786632/files/merscope_starter.raw.tar.gz\ntar --strip-components=1 -zxvf merscope_starter.raw.tar.gz\n</code></pre>"},{"location":"vignettes/subregion_tutorials/merscope/#set-up-the-environment","title":"Set Up the Environment","text":"<p>Define paths to all required binaries and resources, and target AWS S3 bucket. Optionally, specify a fixed color map for consistent rendering.</p> <pre><code># ====\n# Replace each placeholder with the actual path on your system.  \n# ====\nwork_dir=/path/to/work/directory        # path to work directory that contains the downloaded input data\ncd $work_dir\n\n# Define paths to required binaries and resources\nspatula=/path/to/spatula/binary         # path to spatula executable\npunkst=/path/to/punkst/binary           # path to FICTURE2/punkst executable\ntippecanoe=/path/to/tippecanoe/binary   # path to tippecanoe executable\npmtiles=/path/to/pmtiles/binary         # path to pmtiles executable\naws=/path/to/aws/cli/binary             # path to AWS CLI binary\n\n# (Optional) Define path to color map. \ncmap=/path/to/color/map                 # Path to the fixed color map for rendering. cartloader provides a fixed color map at cartloader/assets/fixed_color_map_256.tsv.\n\n# AWS S3 target location for cartostore\nAWS_BUCKET=\"EXAMPLE_AWS_BUCKET\"         # replace EXAMPLE_AWS_BUCKET with your actual S3 bucket name\n\n# Activate the bioconda environment\nconda activate ENV_NAME              # replace BIOENV_NAME with your bioconda environment name\n</code></pre> <p>Define data ID and analysis parameters:</p> <pre><code># Unique identifier for your dataset\nDATA_ID=\"merscope_hippo\"                # change this to reflect your dataset name\nPLATFORM=\"vizgen_merscope\"              # platform information\nSCALE=1                                 # scale from coordinate to micrometer\n\n# LDA parameters\ntrain_width=12                           # define LDA training hexagon width (comma-separated if multiple widths are applied)\nn_factor=6,12                            # define number of factors in LDA training (comma-separated if multiple n-factor are applied)\n</code></pre> <p>How to Define Scaling Factors for MERSCOPE?</p> <p>The MERSCOPE example data currently used here provides SGE in micrometer units. Use define scaling factor from coordinate to micrometer as 1.</p>"},{"location":"vignettes/subregion_tutorials/merscope/#sge-format-conversion","title":"SGE Format Conversion","text":"<p>Convert the raw input to the unified SGE format. See more details in Reference page.</p> <pre><code>cartloader sge_convert \\\n  --makefn sge_convert.mk \\\n  --platform ${PLATFORM} \\\n  --in-csv ./input.tsv.gz \\\n  --units-per-um ${SCALE} \\\n  --out-dir ./sge \\\n  --exclude-feature-regex '^(BLANK|NegCon|NegPrb)' \\\n  --sge-visual \\\n  --spatula ${spatula} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--platform</code> required string Platform (options: \"<code>10x_visium_hd</code>\", \"<code>seqscope</code>\", \"<code>10x_xenium</code>\", \"<code>bgi_stereoseq</code>\", \"<code>cosmx_smi</code>\", \"<code>vizgen_merscope</code>\", \"<code>pixel_seq</code>\", \"<code>generic</code>\") <code>--in-csv</code> required string Path to the input TSV/CSV file <code>--units-per-um</code> required float Scale to convert coordinates to microns (default: <code>1.0</code>) <code>--out-dir</code> required string Output directory for the converted SGE files <code>--makefn</code> string File name for the generated Makefile (default: <code>sge_convert.mk</code>) <code>--exclude-feature-regex</code> regex Pattern to exclude control features <code>--sge-visual</code> flag Enable SGE visualization step (generates diagnostic image) (default: <code>FALSE</code>) <code>--spatula</code> string Path to the spatula binary (default: <code>spatula</code>) <code>--n-jobs</code> int Number of parallel jobs for processing (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/merscope/#ficture-analysis","title":"<code>FICTURE</code> analysis","text":"<p>Compute spatial factors using <code>punkst</code> (FICTURE2 mode). See more details in Reference page.</p> <pre><code>cartloader run_ficture2 \\\n  --makefn run_ficture2.mk \\\n  --main \\\n  --in-transcript ./sge/transcripts.unsorted.tsv.gz \\\n  --in-feature ./sge/feature.clean.tsv.gz \\\n  --in-minmax ./sge/coordinate_minmax.tsv \\\n  --cmap-file ${cmap} \\\n  --exclude-feature-regex '^(mt-.*$|Gm\\d+$)' \\\n  --out-dir ./ficture2 \\\n  --width ${train_width} \\\n  --n-factor ${n_factor} \\\n  --spatula ${spatula} \\\n  --ficture2 ${punkst} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--main</code> required <sup>1</sup> flag Enable <code>cartloader</code> to run all five steps <code>--in-transcript</code> required string Path to input transcript-level SGE file <code>--out-dir</code> required string Path to output directory <code>--width</code> required int or comma-separated list LDA training hexagon width(s) <code>--n-factor</code> required int or comma-separated list Number of LDA factors <code>--makefn</code> string File name for the generated Makefile (default: <code>run_ficture2.mk</code> ) <code>--in-feature</code> string Path to input feature file <code>--in-minmax</code> string Path to input coordinate min/max file <code>--cmap-file</code> string Path to color map file <code>--exclude-feature-regex</code> regex Pattern to exclude features <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--ficture2</code> string Path to the <code>punkst</code> directory (defaults to <code>punkst</code> repository within <code>submodules</code> directory of  <code>cartloader</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>) <p><sub><sup>1</sup>: <code>cartloader</code> requires the user to specify at least one action. Available actions includes: <code>--tile</code> to run tiling step; <code>--segment</code> to run segmentation step; <code>--init-lda</code> to run LDA training step; <code>--decode</code> to run decoding step; <code>--summary</code> to run summarization step; <code>--main</code> to run all above five actions.</sub></p>"},{"location":"vignettes/subregion_tutorials/merscope/#cartloader-compilation","title":"<code>cartloader</code> Compilation","text":"<p>Generate pmtiles and web-compatible tile directories. See more details in Reference page.</p> <pre><code>cartloader run_cartload2 \\\n  --makefn run_cartload2.mk \\\n  --fic-dir ./ficture2 \\\n  --out-dir ./cartload2 \\\n  --id ${DATA_ID} \\\n  --spatula ${spatula} \\\n  --pmtiles ${pmtiles} \\\n  --tippecanoe ${tippecanoe} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--fic-dir</code> required string Path to the input directory containing FICTURE2 output <code>--out-dir</code> required string Path to the output directory for PMTiles and web tiles <code>--id</code> required string Dataset ID used for naming outputs and metadata <code>--makefn</code> string File name for the generated Makefile (default: <code>run_cartload2.mk</code>) <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--pmtiles</code> string Path to the <code>pmtiles</code> binary (default: <code>pmtiles</code>) <code>--tippecanoe</code> string Path to the <code>tippecanoe</code> binary (default: <code>tippecanoe</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/merscope/#upload-to-data-repository","title":"Upload to Data Repository","text":"<p>Choose a data repository to host/share your output</p> <p><code>cartloader</code> supports two upload options (<code>AWS</code> and <code>Zenodo</code>) for storing PMTiles of SGE and spatial factors in a data repository.</p> <p>Choose the one that best suits your needs.</p>"},{"location":"vignettes/subregion_tutorials/merscope/#aws-uploads","title":"AWS Uploads","text":"<p>Upload the generated cartloader outputs to your designated AWS S3 directory:</p> <pre><code>cartloader upload_aws \\\n  --in-dir ./cartload2 \\\n  --s3-dir \"s3://${AWS_BUCKET}/${DATA_ID}\" \\\n  --aws ${aws} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--s3-dir</code> required string Path to the target S3 directory for uploading <code>--aws</code> string Path to the AWS CLI binary <code>--n-jobs</code> int Number of parallel jobs"},{"location":"vignettes/subregion_tutorials/merscope/#zenodo-uploads","title":"Zenodo Uploads","text":"<p>Upload the generated cartloader outputs to your designated Zenodo deposition or a new deposition.</p> <pre><code>cartloader upload_zenodo \\\n  --in-dir ./cartload2 \\\n  --upload-method catalog \\\n  --zenodo-token /path/to/zenodo/token/file \\\n  --create-new-deposition \\\n  --title  \"Yur Title\" \\\n  --creators \"Your Name\" \\\n  --description \"This is an example description\"\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--upload-method</code> required string Method to determine which files to upload. Options: <code>all</code> to upload all files in <code>--in-dir</code>; <code>catalog</code> to upload files listed in a catalog YAML file, <code>user_list</code> to upload files explicitly listed via <code>--in-list</code> <code>--catalog-yaml</code> string Required if <code>--upload-method catalog</code>.  Path to the catalog.yaml file generated in <code>run_cartload2</code>. If absent, will use the catalog.yaml in the input directory specified by <code>--in-dir</code>. <code>--zenodo-token</code> required string Path to your Zenodo access file <code>--create-new-deposition</code> flag a new Zenodo deposition will be created. <code>--title</code> required string Required if <code>--create-new-deposition</code>. Title for the new Zenodo deposition. <code>--creators</code> required list of str List of creators in \"Lastname, Firstname\" format."},{"location":"vignettes/subregion_tutorials/merscope/#output-data","title":"Output Data","text":"<p>See more details of output at the Reference pages for run_ficture2 and run_cartload2.</p>"},{"location":"vignettes/subregion_tutorials/merscope/#spatial-factor-inference-from-ficture","title":"Spatial Factor Inference from <code>FICTURE</code>","text":"<p>Below is an example of spatial factor inference results produced by <code>FICTURE</code> using a training width of 12, 12 factors, a fit width of 12, and an anchor resolution of 6.</p> <p> </p> Factor RGB Weight PostUMI TopGene_pval TopGene_fc TopGene_weight 0 255,101,101 0.30225 799546 Slc17a7,Epha4,Amigo2,Kit,Syt4,Epha6,Anxa11,Npy2r,Nrp1,Adora1,Chrm3,Gpr26,Ackr1,Gpr158,Celsr2,Gabbr2,Gpr22,Chrm1,Adra1d,Epha5 Avpr1b,Blank-85,Kit,Amigo2,Blank-158,Hcrtr2,Npy6r,Blank-49,Oxtr,Npy2r,Gpr26,Hcrtr1,Blank-146,Cckbr,Adgrg7,Mrgprb1,Blank-28,Adgrf4,Blank-32,Blank-151 Slc17a7,Epha4,Cx3cl1,Epha6,Gabbr1,Gabbr2,Adora1,Baiap2,Celsr2,Grin2b,Chrm1,Syt4,Anxa11,Grm5,Epha7,Ntrk3,Adgrl1,Nrp1,Chrm3,Lmtk2 1 237,238,0 0.14118 373464 Grm2,Ntrk3,Baiap2,Epha7,Tmem108,Cxcl12,Adcyap1r1,Chrm1,Htr4,Mas1,Npy1r,Grm7,Anxa11,Grm1,Drd1,Epha4,Sstr2,Grin2b,Gprc5b,Grm5 Grm2,Ghsr,Drd1,Npy1r,Glp2r,Sstr2,Htr4,Igfbpl1,Gpr139,Mc4r,Rho,Sstr1,Lgr6,P2ry4,Tmem108,Mas1,Cxcl12,Blank-31,Epha1,Peg10 Slc17a7,Epha4,Ntrk3,Baiap2,Gabbr1,Epha7,Cx3cl1,Grin2b,Chrm1,Gabbr2,Grm5,Grm2,Gprc5b,Anxa11,Adgrl1,Celsr2,Grm7,Adcyap1r1,Epha6,Gad1 2 101,255,101 0.12849 339911 Sstr4,Gpr161,Cx3cl1,Chrm3,Grin2b,Epha6,Htr1a,Epha7,Man1a,Htr1b,Chrm5,Baiap2,Tyro3,Adgrb3,Gpr63,Grm5,Gabbr1,Htr5b,Ror1,Chrm1 Chrm5,Htr5b,Gpr161,Htr1b,Gpr101,Ackr2,Htr1a,Sstr4,Ror1,Ntsr1,Man1a,Gpr151,Ephb3,Gpr63,Chrm4,Gpr6,Htr1f,Tyro3,Chrm3,Crhr1 Slc17a7,Cx3cl1,Gabbr1,Epha6,Epha4,Grin2b,Epha7,Baiap2,Sstr4,Chrm3,Chrm1,Grm5,Celsr2,Ntrk3,Gabbr2,Adgrb3,Adgrl1,Adgrb1,Lmtk2,Gpr161 3 101,254,255 0.09486 250947 Gpr37l1,Ntsr2,Fgfr3,S1pr1,Aqp4,Cspg5,Ntrk2,Aldh1l1,Sox9,Slc25a18,Mertk,Ednrb,Mlc1,Timp4,Gfap,Fzd2,Axl,Gramd3,Gprc5b,Adgrg1 Gpr37l1,Fgfr3,Aqp4,Sctr,Fzd2,Celsr1,S1pr1,Ppp1r3g,Ntsr2,Hrh1,Ednrb,Blank-133,Egfr,Gpr156,Adora2b,Aldh1l1,Mertk,Blank-45,Sox9,Slc25a18 Gpr37l1,Ntsr2,Cspg5,Gfap,Ntrk2,Fgfr3,S1pr1,Aqp4,Gprc5b,Sox9,Slc25a18,Aldh1l1,Gabbr1,Mertk,Slc17a7,Mlc1,Adcyap1r1,Timp4,Axl,Adgrl1 4 101,101,255 0.08956 236909 Gfap,Adgrl1,Gpr27,Slc17a7,Ntrk2,Adora1,Mlc1,Timp4,Aldh1l1,Slc25a18,Axl,Sox9,Cspg5,Gpr162,Fgfrl1,Adra2c,Gpr26,Gprc5b,Kiss1r,Slc32a1 Adra2c,Gpr82,Vmn1r54,Blank-65,Cxcr2,Gpr27,Gpr143,Blank-20,Vmn1r42,Gfap,Blank-128,Blank-51,Mlc1,Blank-121,Kiss1r,F2rl2,Timp4,Cxcr6,Th,Prokr1 Slc17a7,Gfap,Adgrl1,Gabbr1,Adora1,Ntrk2,Cspg5,Gabbr2,Gpr27,Gprc5b,Gpr162,Olig1,Ntsr2,Mlc1,Chrm1,Epha6,Slc25a18,Epha7,Sox9,Celsr2 5 255,101,254 0.05543 146630 Grm4,Slc17a6,Adgra1,Gabbr1,Hrh3,Drd2,Gabbr2,Opn3,Adra1b,Epha8,Fzd10,Gpr153,Ptger3,Prokr2,Grm1,Adgrl2,Cx3cl1,Htr7,Adrb1,Hrh2 Slc17a6,Opn3,Drd2,Epha8,Adra1b,Grm4,Agtr1b,Ptger3,Adgra1,Fzd10,Hrh3,Adgrd1,Blank-157,Prokr2,Adra2b,Dgkk,Gpr153,Blank-93,Gpr139,Blank-43 Gabbr1,Gabbr2,Slc17a7,Cx3cl1,Grm4,Adgra1,Epha4,Slc17a6,Adgrl1,Grin2b,Hrh3,Cspg5,Celsr2,Gpr162,Grm1,Syt4,Igf1r,Lmtk2,Ntrk2,Adgrb1 6 255,178,101 0.05248 138815 Gad1,Cnr1,Erbb4,Slc32a1,Slc17a8,Alk,Oprd1,Rxfp3,Chrm2,Nmbr,Grpr,Oprm1,Adra1a,Qrfpr,Hrh3,Hrh2,Gabbr1,Gpr176,Gpr83,Oprk1 Slc17a8,Rxfp3,Chrm2,Qrfpr,Grpr,Oprm1,Slc32a1,Gad1,Nmbr,Oprk1,Alk,Erbb4,Oprd1,Tacr1,Rxfp1,Cnr1,Gpr149,Blank-83,Htr2b,Ptger2 Gad1,Cnr1,Gabbr1,Erbb4,Gabbr2,Cx3cl1,Epha6,Slc32a1,Slc17a7,Cspg5,Ntrk3,Grm5,Adgrl1,Syt4,Grin2b,Epha4,Celsr2,Adgrb1,Gpr162,Epha7 8 0,223,95 0.03778 99949 C1qb,C1qa,Cx3cr1,Selplg,Gfap,Csf1r,P2ry12,P2yr13,Adgre1,Slc15a3,Cmklr1,Mertk,P2ry6,Gpr183,Gpr34,Cd300c2,Adrb2,C3ar1,Gpr84,Ptafr Selplg,Cx3cr1,Gpr84,Adora3,P2yr13,Gpr183,C3ar1,C1qa,C1qb,Csf1r,Slc15a3,P2ry12,Ptafr,Cmklr1,Adgre1,Cd300c2,Gpr34,Cxcr6,P2ry6,Adrb2 Gfap,C1qb,C1qa,Cx3cr1,Selplg,Csf1r,Slc17a7,P2ry12,Ntrk2,Cspg5,Mertk,Gprc5b,Gabbr1,Ntsr2,Aqp4,Gpr37l1,Sox9,Adgrl1,Adgre1,Slc25a18 7 178,255,101 0.03655 96700 Flt1,Cldn5,Fn1,Adgrf5,Adgrl4,Kdr,Cxcl12,Tek,Slco1a4,Abcc9,Atp13a5,Tie1,Igf1r,Emcn,Arhgap29,Pdgfrb,Kcnj8,Flt4,Gpr4,Fzd6 Cldn5,Flt1,Fn1,Adgrf5,Flt4,Abcc9,Adgrl4,Tek,Gper1,Tie1,Slco1a4,Kdr,Ccrl2,Vmn1r46,Atp13a5,Emcn,Gpr39,Gpr4,Tbxa2r,Blank-82 Flt1,Cldn5,Fn1,Adgrf5,Igf1r,Cxcl12,Adgrl4,Kdr,Gfap,S1pr1,Arhgap29,Slc17a7,Slco1a4,Pdgfrb,Tek,Gabbr1,Atp13a5,Abcc9,Tie1,Nrp1 9 101,178,255 0.03245 85847 Gjc3,Olig1,Lpar1,S1pr5,Erbb3,Gpr62,Sox8,Gprc5b,Plxnb3,Fgfr2,Sema4d,Ddr1,Tyro3,Grm3,Tjap1,Ephb1,Gipr,Gramd3,Peg10,Erbb4 S1pr5,Erbb3,Gjc3,Plxnb3,Lpar1,Gpr62,Gipr,Adgrg2,Fgfr2,Olig1,Sox8,Sema4d,Grm3,Ddr1,Fzd5,Tyro3,Blank-41,Tjap1,Blank-36,Gprc5b Gjc3,Olig1,Gprc5b,Sox8,Ddr1,Lpar1,Sema4d,Tyro3,Gabbr1,Gfap,Fgfr2,Grm3,S1pr5,Gpr62,Erbb3,Plxnb3,Ephb1,Tjap1,Igf1r,Adora1 10 178,101,255 0.01681 44462 Gpr17,Olig1,Pdgfra,Cspg5,Pcdh15,Traf4,Sox8,Mki67,Gjc3,Top2a,Gpr37l1,Ascl1,Plxnb3,Ednrb,Fzd9,Erbb3,Sstr1,Mc5r,S1pr2,Calcrl Gpr17,Mki67,Pdgfra,Top2a,Pcdh15,Traf4,Blank-109,Ascl1,Olig1,Mc5r,Fzd9,S1pr2,Sox8,Sstr1,Prlhr,Prokr1,Blank-116,Plxnb3,Blank-72,Cspg5 Olig1,Cspg5,Gpr17,Pdgfra,Gpr37l1,Gjc3,Sox8,Traf4,Pcdh15,Ntrk2,Gfap,Ntrk3,Adcyap1r1,Adgrb1,Gabbr1,Ednrb,Adora1,Erbb4,Slc17a7,Adgrl1 11 255,153,204 0.01216 32170 Htr2c,Gpr182,Efemp1,Cxcl12,Myh11,Crhr2,Igfbpl1,Lmod1,Cxcr4,Fzd4,Gprc5c,Ptgdr,Ddr2,Arhgap29,Hcar1,Ror2,Dlk1,Sox9,Ddr1,Fzd2 Gpr55,Gpr182,Ptgdr,Lpar3,Hcar1,Htr2c,Cxcr3,Ror2,Mc3r,Crhr2,Lmod1,Musk,Slc47a1,Gpr20,Gpr88,Gpr132,Mrgprf,Efemp1,Igfbpl1,Dlk1 Cxcl12,Sox9,Ddr1,Ntrk2,Htr2c,Anxa11,Gprc5b,Igf1r,Arhgap29,Gfap,Gpr182,Efemp1,Myh11,Fgfr2,Smo,Pdgfra,Tmem108,Fzd4,Axl,Man1a"},{"location":"vignettes/subregion_tutorials/merscope/#packed-sge-and-spatial-factor-outputs-from-run_cartload2","title":"Packed SGE and Spatial Factor Outputs from <code>run_cartload2</code>","text":"<p>The packed SGE data and spatial factor inferences generated by <code>FICTURE</code> are available in PMTile format on Zenodo: DOI:10.5281/zenodo.15824932.</p> <p>These datasets can also be loaded directly using the following catalog YAML file: <code>https://zenodo.org/records/15824933/catalog.yaml</code></p>"},{"location":"vignettes/subregion_tutorials/pixelseq/","title":"Pixel-Seq Starter Tutorial","text":""},{"location":"vignettes/subregion_tutorials/pixelseq/#input-data","title":"Input Data","text":"<p>Since the Pixel-Seq publication provides SGE data only from the mouse olfactory bulb and parabrachial nucleus \u2014 neither of which includes the hippocampus \u2014 we extract a subregion from the olfactory bulb as the input for this tutorial.</p> <p>File Format</p> <p>The Pixel-Seq SGE includes one tab-delimited text file, where each row represents a unique RNA molecule detected within a defined field of view (FOV), with associated genomic and spatial metadata.</p> <p>TSV file format</p> <pre><code>FOVx  FOVy  xcoord     ycoord     UMIs     SpatialBarcode            MapStrand  Chrom  Start      STARmapping        Counts  geneID              geneName  bioType                 intronRatio\n017   005   26691.5    5786.5     TAACGAA  AAGGTTCATACCTACGACTGTTAA  16         1      24613729   150M               1       ENSMUSG00000101111  Gm28437   unprocessed_pseudogene  0.00\n016   007   27590.25   4639.0815  TAATATA  AATGGCGCATTTTGCTGTTTAGGC  16         2      39001628   138M2341N12M       1       ENSMUSG00000062997  Rpl35     protein_coding          0.00\n018   006   25099.945  5621.8335  AGTTGTA  CTGCATATGTGTCACCTAGGTAGC  16         1      24615767   150M               1       ENSMUSG00000101249  Gm29216   unprocessed_pseudogene  0.00\n</code></pre> <ul> <li><code>FOVx</code>, <code>FOVy</code>: Field-of-view indices indicating the imaging tile coordinates in the x and y directions.</li> <li><code>xcoord</code>, <code>ycoord</code>: Spatial coordinates (in microns or pixels).</li> <li><code>UMIs</code>: Unique molecular identifier (UMI) sequence.</li> <li><code>SpatialBarcode</code>: Spatial barcode capturing the location and identity.</li> <li><code>MapStrand</code>: Indicates the strand orientation of the mapped read.</li> <li><code>Chrom</code>, <code>Start</code>: Chromosome number and start position of the mapped read on the genome.</li> <li><code>STARmapping</code>: Alignment pattern (CIGAR string) from the STAR aligner indicating how the transcript maps to the genome.</li> <li><code>Counts</code>: Number of times the UMI/gene combination was observed.</li> <li><code>geneID</code>, <code>geneName</code>: Ensembl gene ID and gene symbol.</li> <li><code>bioType</code>: Gene biotype.</li> <li><code>intronRatio</code>: Fraction of UMI counts assigned to intronic regions.</li> </ul> <p>Data Access</p> <p>The example data is hosted on Zenedo ().</p> <p>Follow the commands below to download the example data.</p> <pre><code>work_dir=/path/to/work/directory\ncd $work_dir\nwget  https://zenodo.org/records/15786632/files/pixelseq_starter.raw.tar.gz \ntar --strip-components=1 -zxvf pixelseq_starter.raw.tar.gz \n</code></pre>"},{"location":"vignettes/subregion_tutorials/pixelseq/#set-up-the-environment","title":"Set Up the Environment","text":"<p>Define paths to all required binaries and resources, and target AWS S3 bucket. Optionally, specify a fixed color map for consistent rendering.</p> <pre><code># ====\n# Replace each placeholder with the actual path on your system.  \n# ====\nwork_dir=/path/to/work/directory        # path to work directory that contains the downloaded input data\ncd $work_dir\n\n# Define paths to required binaries and resources\nspatula=/path/to/spatula/binary         # path to spatula executable\npunkst=/path/to/punkst/binary           # path to FICTURE2/punkst executable\ntippecanoe=/path/to/tippecanoe/binary   # path to tippecanoe executable\npmtiles=/path/to/pmtiles/binary         # path to pmtiles executable\naws=/path/to/aws/cli/binary             # path to AWS CLI binary\n\n# (Optional) Define path to color map. \ncmap=/path/to/color/map                 # Path to the fixed color map for rendering. cartloader provides a fixed color map at cartloader/assets/fixed_color_map_256.tsv.\n\n# AWS S3 target location for cartostore\nAWS_BUCKET=\"EXAMPLE_AWS_BUCKET\"         # replace EXAMPLE_AWS_BUCKET with your actual S3 bucket name\n\n# Activate the bioconda environment\nconda activate ENV_NAME              # replace BIOENV_NAME with your bioconda environment name\n</code></pre> <p>Define data ID and analysis parameters:</p> <pre><code># Unique identifier for your dataset\nDATA_ID=\"pixelseq_hippo\"                # change this to reflect your dataset name\nPLATFORM=\"pixel_seq\"                    # platform information\nSCALE=3.076923                        # scale from coordinate to micrometer\n\n# LDA parameters\ntrain_width=18                           # define LDA training hexagon width (comma-separated if multiple widths are applied)\nn_factor=6,12                            # define number of factors in LDA training (comma-separated if multiple n-factor are applied)\n</code></pre> <p>How to Define Scaling Factors for Pixel-Seq?</p> <p>In Pixel-Seq publication:</p> <p>\"Because polonies have varied sizes and shapes, to maximize the feature resolution we developed a base-calling pipeline to determine the major barcode species in each pixel (0.325 * 0.325 mm2) of gel images to construct a spatial barcode map\".</p> <p>Accordingly, we defined scale as 1/0.325 = 3.076923</p>"},{"location":"vignettes/subregion_tutorials/pixelseq/#sge-format-conversion","title":"SGE Format Conversion","text":"<p>Convert the raw input to the unified SGE format. See more details in Reference page.</p> <pre><code>cartloader sge_convert \\\n  --makefn sge_convert.mk \\\n  --platform ${PLATFORM} \\\n  --in-csv ./input.tsv.gz \\\n  --units-per-um ${SCALE} \\\n  --out-dir ./sge \\\n  --exclude-feature-regex '^(BLANK|NegCon|NegPrb)' \\\n  --sge-visual \\\n  --spatula ${spatula} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--platform</code> required string Platform (options: \"<code>10x_visium_hd</code>\", \"<code>seqscope</code>\", \"<code>10x_xenium</code>\", \"<code>bgi_stereoseq</code>\", \"<code>cosmx_smi</code>\", \"<code>vizgen_merscope</code>\", \"<code>pixel_seq</code>\", \"<code>generic</code>\") <code>--in-csv</code> required string Path to the input TSV/CSV file <code>--units-per-um</code> required float Scale to convert coordinates to microns (default: <code>1.0</code>) <code>--out-dir</code> required string Output directory for the converted SGE files <code>--makefn</code> string File name for the generated Makefile (default: <code>sge_convert.mk</code>) <code>--exclude-feature-regex</code> regex Pattern to exclude control features <code>--sge-visual</code> flag Enable SGE visualization step (generates diagnostic image) (default: <code>FALSE</code>) <code>--spatula</code> string Path to the spatula binary (default: <code>spatula</code>) <code>--n-jobs</code> int Number of parallel jobs for processing (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/pixelseq/#ficture-analysis","title":"<code>FICTURE</code> analysis","text":"<p>Compute spatial factors using <code>punkst</code> (FICTURE2 mode). See more details in Reference page.</p> <pre><code>cartloader run_ficture2 \\\n  --makefn run_ficture2.mk \\\n  --main \\\n  --in-transcript ./sge/transcripts.unsorted.tsv.gz \\\n  --in-feature ./sge/feature.clean.tsv.gz \\\n  --in-minmax ./sge/coordinate_minmax.tsv \\\n  --cmap-file ${cmap} \\\n  --exclude-feature-regex '^(mt-.*$|Gm\\d+$)' \\\n  --out-dir ./ficture2 \\\n  --width ${train_width} \\\n  --n-factor ${n_factor} \\\n  --spatula ${spatula} \\\n  --ficture2 ${punkst} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--main</code> required <sup>1</sup> flag Enable <code>cartloader</code> to run all five steps <code>--in-transcript</code> required string Path to input transcript-level SGE file <code>--out-dir</code> required string Path to output directory <code>--width</code> required int or comma-separated list LDA training hexagon width(s) <code>--n-factor</code> required int or comma-separated list Number of LDA factors <code>--makefn</code> string File name for the generated Makefile (default: <code>run_ficture2.mk</code> ) <code>--in-feature</code> string Path to input feature file <code>--in-minmax</code> string Path to input coordinate min/max file <code>--cmap-file</code> string Path to color map file <code>--exclude-feature-regex</code> regex Pattern to exclude features <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--ficture2</code> string Path to the <code>punkst</code> directory (defaults to <code>punkst</code> repository within <code>submodules</code> directory of  <code>cartloader</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>) <p><sub><sup>1</sup>: <code>cartloader</code> requires the user to specify at least one action. Available actions includes: <code>--tile</code> to run tiling step; <code>--segment</code> to run segmentation step; <code>--init-lda</code> to run LDA training step; <code>--decode</code> to run decoding step; <code>--summary</code> to run summarization step; <code>--main</code> to run all above five actions.</sub></p>"},{"location":"vignettes/subregion_tutorials/pixelseq/#cartloader-compilation","title":"<code>cartloader</code> Compilation","text":"<p>Generate pmtiles and web-compatible tile directories. See more details in Reference page.</p> <pre><code>cartloader run_cartload2 \\\n  --makefn run_cartload2.mk \\\n  --fic-dir ./ficture2 \\\n  --out-dir ./cartload2 \\\n  --id ${DATA_ID} \\\n  --spatula ${spatula} \\\n  --pmtiles ${pmtiles} \\\n  --tippecanoe ${tippecanoe} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--fic-dir</code> required string Path to the input directory containing FICTURE2 output <code>--out-dir</code> required string Path to the output directory for PMTiles and web tiles <code>--id</code> required string Dataset ID used for naming outputs and metadata <code>--makefn</code> string File name for the generated Makefile (default: <code>run_cartload2.mk</code>) <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--pmtiles</code> string Path to the <code>pmtiles</code> binary (default: <code>pmtiles</code>) <code>--tippecanoe</code> string Path to the <code>tippecanoe</code> binary (default: <code>tippecanoe</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/pixelseq/#upload-to-data-repository","title":"Upload to Data Repository","text":"<p>Choose a data repository to host/share your output</p> <p><code>cartloader</code> supports two upload options (<code>AWS</code> and <code>Zenodo</code>) for storing PMTiles of SGE and spatial factors in a data repository.</p> <p>Choose the one that best suits your needs.</p>"},{"location":"vignettes/subregion_tutorials/pixelseq/#aws-uploads","title":"AWS Uploads","text":"<p>Upload the generated cartloader outputs to your designated AWS S3 directory:</p> <pre><code>cartloader upload_aws \\\n  --in-dir ./cartload2 \\\n  --s3-dir \"s3://${AWS_BUCKET}/${DATA_ID}\" \\\n  --aws ${aws} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--s3-dir</code> required string Path to the target S3 directory for uploading <code>--aws</code> string Path to the AWS CLI binary <code>--n-jobs</code> int Number of parallel jobs"},{"location":"vignettes/subregion_tutorials/pixelseq/#zenodo-uploads","title":"Zenodo Uploads","text":"<p>Upload the generated cartloader outputs to your designated Zenodo deposition or a new deposition.</p> <pre><code>cartloader upload_zenodo \\\n  --in-dir ./cartload2 \\\n  --upload-method catalog \\\n  --zenodo-token /path/to/zenodo/token/file \\\n  --create-new-deposition \\\n  --title  \"Yur Title\" \\\n  --creators \"Your Name\" \\\n  --description \"This is an example description\"\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--upload-method</code> required string Method to determine which files to upload. Options: <code>all</code> to upload all files in <code>--in-dir</code>; <code>catalog</code> to upload files listed in a catalog YAML file, <code>user_list</code> to upload files explicitly listed via <code>--in-list</code> <code>--catalog-yaml</code> string Required if <code>--upload-method catalog</code>.  Path to the catalog.yaml file generated in <code>run_cartload2</code>. If absent, will use the catalog.yaml in the input directory specified by <code>--in-dir</code>. <code>--zenodo-token</code> required string Path to your Zenodo access file <code>--create-new-deposition</code> flag a new Zenodo deposition will be created. <code>--title</code> required string Required if <code>--create-new-deposition</code>. Title for the new Zenodo deposition. <code>--creators</code> required list of str List of creators in \"Lastname, Firstname\" format."},{"location":"vignettes/subregion_tutorials/pixelseq/#output-data","title":"Output Data","text":"<p>See more details of output at the Reference pages for run_ficture2 and run_cartload2.</p>"},{"location":"vignettes/subregion_tutorials/pixelseq/#spatial-factor-inference-from-ficture","title":"Spatial Factor Inference from <code>FICTURE</code>","text":"<p>Below is an example of spatial factor inference results produced by <code>FICTURE</code> using a training width of 18, 12 factors, a fit width of 18, and an anchor resolution of 6.</p> <p> </p> Factor RGB Weight PostUMI TopGene_pval TopGene_fc TopGene_weight 0 255,101,101 0.25229 2026474 Dbi,Cox6c,Cst3,Cox4i1,Rpl37,Rps23,Rps13,Rps19,Vps8,Rpl32,Uqcrb,Rps23-ps1,Rpl41,Atp5md,Rps27a,Rpl39,Mt3,Rpl13,Fth1,Rpl35 C230013L11Rik,Asb5,Arhgap27os1,Pdgfrb,Kcp,Ccl4,Xylt1,Cmpk2,9430091E24Rik,Zfx,Afap1l1,Cobll1,1110046J04Rik,Nde1,Mob1a,Ccl12,Slc14a1,Atp13a4,Armt1,Zfp78 Dbi,Atp5md,Cox6c,Cst3,Tmsb4x,Ndufa4,Cox4i1,Rpl41,Uqcrb,Vps8,Rpl37,Mt3,Atp5mpl,Rps23,Rpl32,Fth1,Rps23-ps1,Cox7a2,CT010467.1,Rps27a 1 237,238,0 0.1761 1414501 Pcp4,Calm2,Itm2b,Snap25,Ddx5,Ss18l2,Gad1,Slc25a3,Hnrnph1,Mdh1,Psma1,Sf3b1,Gpsm1,Aldoa,Grin2a,Ptpro,Focad,Ckb,Hnrnpm,Srsf5 Myo19,Adamts15,Exoc8,Esm1,Snora31,Pcdhb7,Osgin2,Tmem28,Hmgxb4,Pcdhb11,Bod1l,Zfp951,Ppp1r21,Rbm19,Ovgp1,Tmco6,Mroh8,Atp10a,Zbtb6,Fgf16 Pcp4,Calm2,Tmsb4x,Atp5md,Ubb,Ndufa4,Cox7a2,Atp5o,Ckb,Cox4i1,Cox6c,Calm1,Dynll1,Mdh1,Atp5mpl,Itm2b,Ndufb4,Eif1,Snap25,Rpl41 2 101,255,101 0.12776 1026174 Rps25,Pcp4,Rps27,Rps15a,Rpl34,Dynll1,Gas5,Rps24,Rps27rt,Uqcrh,Rps7,Rps14,Rpl36a,Rpl7,Timm8b,Rpl30,Sec61g,Krt10,Atp5l,Ndrg3 Pkp2,Arrdc4,Xlr,Ccdc116,Mchr1,AV039307,A830031A19Rik,Fam183b,Myl2,R3hcc1l,Ikzf2,Birc5,Dok2,Cdc42ep5,Smad4,Frmd8os,Zfp85os,A830073O21Rik,Ccdc177,Rbm43 Pcp4,Rps25,Rps15a,Rps27,Atp5md,Dynll1,Rps24,Rps14,Gas5,Rpl34,Uqcrh,Atp5l,Tmsb4x,Rpl41,Rps23,Rpl37,Rpl36,Rpl37a,Rpl32,Ndufa4 4 101,101,255 0.10851 871555 Cpe,Cck,Ly86,Nmb,Stmn2,Stmn3,Doc2g,Sparcl1,Spp1,Pfn2,Gabra1,Hsp90aa1,Mgst3,Id2,Ptprd,A2ml1,Rab3b,Chgb,Cdhr1,Atp6ap1l Fam111a,1700101I11Rik,Susd5,Olfr110,C230034O21Rik,Glra2,Col9a1,Myom1,Lrrc75b,Hsf4,Dpys,Cd207,Plcl1,Adam19,Sema3d,Kng1,Hs3st4,Samsn1,Pou3f1,1700086P04Rik Ndufa4,Atp5md,Stmn3,CT010467.1,Atp5g1,Cst3,Mgst3,Cox7a2,Ubb,Cpe,Cox4i1,Tmsb4x,Mdh1,Calm1,Cck,Vps8,Mt3,Cox6c,Ly86,Uqcrh 3 101,254,255 0.1012 812851 Ptgds,Hbb-bs,Hba-a2,Hba-a1,S100a5,Gng13,Hbb-bt,Fabp7,Apod,Npy,Tmsb4x,Prdx1,Crip1,Apoe,Mt1,S100a8,Mgp,Atox1,Ptn,Acbd7 Lsp1,Olfr1463,Galnt4,Lsr,Hacd4,Thbs2,Gjb2,Sntb1,Ogn,Car13,Dapl1,S100a8,A930037H05Rik,Slc22a6,Grap,Tagln,Ninj2,Igf2,Mfap5,Zc3hav1l Ptgds,Hbb-bs,Hba-a2,S100a5,Hba-a1,Tmsb4x,Gng13,Fabp7,Dbi,Hbb-bt,Mt1,Rpl41,Cst3,Apoe,Fth1,Prdx1,Mt3,Atp5md,Vps8,Calm1 5 255,101,254 0.09759 783886 Atp5mpl,Uqcrb,Cox7b,Fkbp3,Calb2,Atp5j,Ctsl,Bmerb1,Oaz1,Polr2k,Canx,Ly6g6e,Trh,Ldhb,Vip,Vsnl1,Ndfip1,Nrsn1,Dynlrb1,Gpx4-ps2 2410080I02Rik,Slc24a5,Rapgef3os2,Sycp2,Zfp984,Gpr176,Zfp455,A430018G15Rik,4933412E12Rik,1700047F07Rik,Sowahc,Carns1,Larp1b,Rom1,Slc30a3,Zfp959,Ddx10,Gpr22,Zfp217,Pgm3 Atp5mpl,Uqcrb,Atp5md,Ndufa4,Cst3,S100a5,CT010467.1,Cox7b,Atp5j,Ubb,Cox6c,Rpl41,Uqcr11,Uqcr10,Mt3,Tmsb4x,Atp5o,Ldhb,Cox4i1,Cox7a2 6 255,178,101 0.08203 658867 Igf2bp3,Ogt,Ints6l,Trim9,Mrgbp,Meg3,Tmem29,Pfkp,Clk1,Snhg11,Clk4,Pcp4l1,R3hdm1,Malat1,Atxn7l2,Ckb,Arsb,Matk,Uqcrq,Nptn Thg1l,Lrrc19,BC024063,Pcdhb8,Utp14b,3110053B16Rik,Bloc1s6os,Ccdc142os,Zbtb26,Nfe2l3,Rgs16,Papolg,Zfp747,Wnt10b,C130073E24Rik,Il20ra,Zfp960,Cenpq,Ascc3,Hcfc2 Ndufa4,Uqcrq,Ckb,Atp5md,Cox6c,Meg3,Cox4i1,Atp5mpl,Ubb,Pcp4,Tmsb4x,Snhg11,Calm2,Uqcr10,Mt3,Uqcrb,CT010467.1,Mt1,Uqcrh,Cox7a2 7 178,255,101 0.02197 176451 Psma4,Smim26,Manf,Ankhd1,Gng11,Skp1a,Ndufa12,Arpc5l,Prdx4,Celrr,Snhg1,Nol7,Eif4a2,Dcun1d1,Mrpl57,Zswim6,Utp15,Med19,Psd3,Pot1b Cryba4,Wipf1,Tes3-ps,Pot1b,Rnf225,Celrr,D730044K07Rik,4933424L21Rik,Pigw,Pih1d2,Ccdc190,Sec24d,Pcdhb17,Utp15,Mis12,Asb16,Smad2,Dcun1d1,Cst12,6330549D23Rik Atp5md,Ndufa12,Cox7a2,Rpl31,Ndufb1-ps,Ndufb4,Dynlrb1,Cst3,Cox7c,Fau,Tmsb4x,CT010467.1,Cox7b,Skp1a,Rpl26,Cox6c,Rpl41,Rps24,Slirp,Smim26 8 0,223,95 0.02035 163444 Calm2,Pcp4,Rbbp8,Pcmtd2,Rpl35a,Ak6,Dlx6os1,Immp1l,Top2b,Zfp281,S100a10,Rasa2,Vamp4,Tiam1,Rpn2,Ndufa8,Pak1ip1,Ik,Sft2d3,Psma3 Kirrel2,Slc46a2,Ripk4,Gpr50,9430083B18Rik,Kcnj8,Cdh9,Zfp992,Rbbp8,9230112E08Rik,Znf41-ps,Socs4,Asic3,Plxna4os1,Pdp2,Stat5a,Zfp281,Tfap4,Spdya,Fpgt Pcp4,Calm2,Rpl35a,Tmsb4x,Atp5mpl,S100a10,Ndufa4,Cox6c,Rps8,Rpl41,Ndufa8,Atp5md,Uqcr11,Immp1l,Rpl37a,Cox7a2,Ckb,Ndufs4,Abcb10,Uqcrq 9 101,178,255 0.00875 70293 Brcc3,Tmsb15l,Rbis,Vps13c,Eid1,Tmsb15b2,Dnajb4,Arpp21,Tent2,Rab10os,Mrpl33,Efr3b,Krt12,Uba3,Arhgap5,Magee1,Cdv3,Steap2,Arsg,Polr3d Olfm5,Samd11,Vps13c,Zkscan4,Gabrg1,2310034G01Rik,Efcab11,Qrfpr,A230065N10Rik,Prss35,Arsg,Fam199x,Prim2,Fam163a,Npy5r,Acsl5,Klhl28,Tent2,A330041J22Rik,Sertm1 Rbis,Atp5h,Mrpl33,Tmsb15l,Brcc3,Ndufa11,Ubb,Arpp21,Fth1,Atp5md,Tmsb4x,2610001J05Rik,Ndufa4,Dnaja1,Krt12,Ubl5,Polr2j,Cox6c,Slc25a5,Fcf1 10 178,101,255 0.00327 26268 4930522L14Rik,Ano4,Ccdc82,Ctxn2,Trdn,Pdzd8,Dtnbos,Arhgef26,Ephx2,Itgav,Mgat5,Casp1,Zfp950,Crh,Tm2d1,Zfp637,Trim2,Tmem167,Capza2,Gpr135 5430403G16Rik,Dtnbos,4930522L14Rik,Arhgef26,Usp27x,Trdn,Tbc1d10c,Ccdc82,Zfp51,Pdzd8,Gpr135,Wfdc1,Ephx2,4921504A21Rik,Crh,Pou3f4,Ttll3,1700102H20Rik,P2ry14,Gas1 Ndufs5,Tmem167,Cox5b,Ndufs5-ps,Ndufab1,Tm2d1,Cox6c,Itgav,Zbtb20,Ctxn2,Capza2,Cycs,Trim2,Ano4,Cops5,Selenow,Atp5md,Zfp637,Uqcrb,Zcchc18 11 255,153,204 0.00018 1416 1700019G24Rik,Slc26a7,Tmem132cos,Ggh,Pdgfd,Peli2,Reln,Ddit4l,Ifitm1,Lrrfip1,Gin1,Polr2m,Arsk,Map7,Secisbp2l,Lrrcc1,Neu1,Prdm16,Zfp292,Ubxn7 Tmem132cos,1700019G24Rik,Slc26a7,Pdgfd,Ddit4l,Arsk,Ifitm1,Lrrcc1,Peli2,Ggh,Prdm16,Lrrfip1,Map7,Secisbp2l,Polr2m,Gin1,Zfp292,Ubxn7,Neu1,Reln Reln,Gin1,Ggh,Polr2m,Peli2,Lrrfip1,Slc26a7,1700019G24Rik,Secisbp2l,Gad1,Ifitm1,Map7,Neu1,Selenow,Tmem132cos,Ubl5,Pdgfd,Ddit4l,Penk,Elob"},{"location":"vignettes/subregion_tutorials/pixelseq/#packed-sge-and-spatial-factor-outputs-from-run_cartload2","title":"Packed SGE and Spatial Factor Outputs from <code>run_cartload2</code>","text":"<p>The packed SGE data and spatial factor inferences generated by <code>FICTURE</code> are available in PMTile format on Zenodo: DOI:10.5281/zenodo.15824938.</p> <p>These datasets can also be loaded directly using the following catalog YAML file: <code>https://zenodo.org/records/15824939/catalog.yaml</code></p>"},{"location":"vignettes/subregion_tutorials/seqscope/","title":"Seq-Scope Starter Tutorial","text":""},{"location":"vignettes/subregion_tutorials/seqscope/#input-data","title":"Input Data","text":"<p>This tutorial uses an example SGE from mouse hippocampus, extracted via spatial masking from a Seq-Scope coronal brain slice.</p> <p>File Format</p> <p>Actual input formats are platform-dependent. Please refer to the Vignettes for detailed input specifications by each platform.</p> <p>SeqScope provides SGE with three files:</p> <code>barcodes.tsv.gz</code> \u2013 spatial barcode metadata <pre><code>AAAACAAAAACCTTCTTCGGACACTGGTCT  1   20  1   1   295288  1422349 0,1,0,0,0\nAAAACAAAAATCCTGTTATACATGCCATGG  2   45  1   1   1745544 1110720 2,2,1,0,1\nAAAACAAAACACGGGAAAAAACTATAGGTG  3   58  1   1   887244  250820  7,7,5,0,1\n</code></pre> <ul> <li>Column 1: Sorted spatial barcodes</li> <li>Column 2: 1-based integer index of spatial barcodes, used in <code>matrix.mtx.gz</code></li> <li>Column 3: 1-based integer index from the full barcode that is in the STARsolo output</li> <li>Column 4: Lane ID (fixed as <code>1</code>)  </li> <li>Column 5: Tile ID (fixed as <code>1</code>)  </li> <li>Column 6: X-coordinates</li> <li>Column 7: Y-coordinates</li> <li>Column 8: Five comma-separated numbers denote the count per spatial barcode for \"Gene\", \"GeneFull\", \"Spliced\", \"Unspliced\", and \"Ambiguous\".</li> </ul> <code>features.tsv.gz</code> \u2013 feature metadata  <pre><code>ENSMUSG00000100764  Gm29155 1   1,1,1,0,0\nENSMUSG00000100635  Gm29157 2   0,0,0,0,0\nENSMUSG00000100480  Gm29156 3   0,0,0,0,0\n</code></pre> <ul> <li>Column 1: Feature ID</li> <li>Column 2: Feature symbol</li> <li>Column 3: 1-based integer index of genes, used in <code>matrix.mtx.gz</code></li> <li>Column 4: Five comma-separated numbers denote the count per gene \"Gene\", \"GeneFull\", \"Spliced\", \"Unspliced\", and \"Ambiguous\".</li> </ul> <code>matrix.mtx.gz</code> \u2013 expression count matrix  <pre><code>%%MatrixMarket matrix coordinate integer general\n%\n33989 2928173 5404336\n2487 1 0 1 0 0 0\n5104 2 1 1 0 0 1\n</code></pre> <ul> <li><code>Header</code>: Initial lines form the header, declaring the matrix's adherence to the Market Matrix (MTX) format, outlining its traits. This may include comments (lines beginning with <code>%</code>) for extra metadata, all marked by a \u201c%\u201d.</li> <li><code>Dimensions</code>: Following the header, the first line details the matrix dimensions: the count of rows (features), columns (barcodes), and non-zero entries.</li> <li><code>Data Entries</code>: Post-dimensions, subsequent lines enumerate non-zero entries in seven columns: row index (feature index), column index (barcode index), and five values (expression levels) corresponds to \"Gene\", \"GeneFull\", \"Spliced\", \"Unspliced\", and \"Ambiguous\".       <ul> <li>\"Gene\": represents unique, confidently mapped transcript count (\"gene name\"-based);</li> <li>\"GeneFull\": denotes total transcript count assigned to gene (includes ambiguities).</li> </ul> </li> </ul> <p>Data Access</p> <p>The example data is hosted on Zenedo (10.5281/zenodo.15786632).</p> <p>Follow the commands below to download the example data.</p> <pre><code>work_dir=/path/to/work/directory\ncd $work_dir\nwget  https://zenodo.org/records/15786632/files/seqscope_starter.raw.tar.gz \ntar -zxvf seqscope_starter.raw.tar.gz \n</code></pre>"},{"location":"vignettes/subregion_tutorials/seqscope/#set-up-the-environment","title":"Set Up the Environment","text":"<p>Define paths to all required binaries and resources, and target AWS S3 bucket. Optionally, specify a fixed color map for consistent rendering.</p> <pre><code># ====\n# Replace each placeholder with the actual path on your system.  \n# ====\nwork_dir=/path/to/work/directory        # path to work directory that contains the downloaded input data\ncd $work_dir\n\n# Define paths to required binaries and resources\nspatula=/path/to/spatula/binary         # path to spatula executable\npunkst=/path/to/punkst/binary           # path to FICTURE2/punkst executable\ntippecanoe=/path/to/tippecanoe/binary   # path to tippecanoe executable\npmtiles=/path/to/pmtiles/binary         # path to pmtiles executable\naws=/path/to/aws/cli/binary             # path to AWS CLI binary\n\n# (Optional) Define path to color map. \ncmap=/path/to/color/map                 # Path to the fixed color map for rendering. cartloader provides a fixed color map at cartloader/assets/fixed_color_map_256.tsv.\n\n# AWS S3 target location for cartostore\nAWS_BUCKET=\"EXAMPLE_AWS_BUCKET\"         # replace EXAMPLE_AWS_BUCKET with your actual S3 bucket name\n\n# Activate the bioconda environment\nconda activate ENV_NAME              # replace BIOENV_NAME with your bioconda environment name\n</code></pre> <p>Define data ID and analysis parameters:</p> <pre><code># Unique identifier for your dataset\nDATA_ID=\"seqscope_hippo\"                # change this to reflect your dataset name\nPLATFORM=\"seqscope\"                     # platform information\nSCALE=1000                            # scale from coordinate to micrometer\n\n# LDA parameters\ntrain_width=18                           # define LDA training hexagon width (comma-separated if multiple widths are applied)\nn_factor=6,12                            # define number of factors in LDA training (comma-separated if multiple n-factor are applied)\n</code></pre> <p>How to Define Scaling Factors for Seq-Scope</p> <p>The latest SeqScope with an Illumina NovaSeq 6000 uses <code>NovaScope</code> pipeline to process sequencing data. <code>NovaScope</code> defaults to generate SGE at nanometer (nm) resolution, meaning each pixel corresponds to 1\u202fnm.</p> <p>Thus, use 1000 as scaling factor from coordinate to micrometer since 1000 nm = 1 \u00b5m.</p>"},{"location":"vignettes/subregion_tutorials/seqscope/#sge-format-conversion","title":"SGE Format Conversion","text":"<p>Convert the raw input to the unified SGE format. See more details in SGE Format Conversion.</p> <pre><code>cartloader sge_convert \\\n  --makefn sge_convert.mk \\\n  --platform ${PLATFORM} \\\n  --in-mex ./raw \\\n  --units-per-um ${SCALE} \\\n  --out-dir ./sge \\\n  --exclude-feature-regex '^(BLANK|NegCon|NegPrb)' \\\n  --sge-visual \\\n  --spatula ${spatula} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--platform</code> required string Platform (options: \"<code>10x_visium_hd</code>\", \"<code>seqscope</code>\", \"<code>10x_xenium</code>\", \"<code>bgi_stereoseq</code>\", \"<code>cosmx_smi</code>\", \"<code>vizgen_merscope</code>\", \"<code>pixel_seq</code>\", \"<code>generic</code>\") <code>--in-mex</code> required string Path to the input MEX directory containing gene \u00d7 barcode matrix <code>--units-per-um</code> required float Scale to convert coordinates to microns (default: <code>1.0</code>) <code>--out-dir</code> required string Output directory for the converted SGE files <code>--makefn</code> string File name for the generated Makefile (default: <code>sge_convert.mk</code>) <code>--exclude-feature-regex</code> regex Pattern to exclude control features <code>--sge-visual</code> flag Enable SGE visualization step (generates diagnostic image) (default: <code>FALSE</code>) <code>--spatula</code> string Path to the spatula binary (default: <code>spatula</code>) <code>--n-jobs</code> int Number of parallel jobs for processing (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/seqscope/#ficture-analysis","title":"<code>FICTURE</code> analysis","text":"<p>Compute spatial factors using <code>punkst</code> (FICTURE2 mode). See more details in Reference page.</p> <pre><code>cartloader run_ficture2 \\\n  --makefn run_ficture2.mk \\\n  --main \\\n  --in-transcript ./sge/transcripts.unsorted.tsv.gz \\\n  --in-feature ./sge/feature.clean.tsv.gz \\\n  --in-minmax ./sge/coordinate_minmax.tsv \\\n  --cmap-file ${cmap} \\\n  --exclude-feature-regex '^(mt-.*$|Gm\\d+$)' \\\n  --out-dir ./ficture2 \\\n  --width ${train_width} \\\n  --n-factor ${n_factor} \\\n  --spatula ${spatula} \\\n  --ficture2 ${punkst} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--main</code> required <sup>1</sup> flag Enable <code>cartloader</code> to run all five steps <code>--in-transcript</code> required string Path to input transcript-level SGE file <code>--out-dir</code> required string Path to output directory <code>--width</code> required int or comma-separated list LDA training hexagon width(s) <code>--n-factor</code> required int or comma-separated list Number of LDA factors <code>--makefn</code> string File name for the generated Makefile (default: <code>run_ficture2.mk</code> ) <code>--in-feature</code> string Path to input feature file <code>--in-minmax</code> string Path to input coordinate min/max file <code>--cmap-file</code> string Path to color map file <code>--exclude-feature-regex</code> regex Pattern to exclude features <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--ficture2</code> string Path to the <code>punkst</code> directory (defaults to <code>punkst</code> repository within <code>submodules</code> directory of  <code>cartloader</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>) <p><sub><sup>1</sup>: <code>cartloader</code> requires the user to specify at least one action. Available actions includes: <code>--tile</code> to run tiling step; <code>--segment</code> to run segmentation step; <code>--init-lda</code> to run LDA training step; <code>--decode</code> to run decoding step; <code>--summary</code> to run summarization step; <code>--main</code> to run all above five actions.</sub></p>"},{"location":"vignettes/subregion_tutorials/seqscope/#cartloader-compilation","title":"<code>cartloader</code> Compilation","text":"<p>Generate pmtiles and web-compatible tile directories. See more details in Reference page.</p> <pre><code>cartloader run_cartload2 \\\n  --makefn run_cartload2.mk \\\n  --fic-dir ./ficture2 \\\n  --out-dir ./cartload2 \\\n  --id ${DATA_ID} \\\n  --spatula ${spatula} \\\n  --pmtiles ${pmtiles} \\\n  --tippecanoe ${tippecanoe} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--fic-dir</code> required string Path to the input directory containing FICTURE2 output <code>--out-dir</code> required string Path to the output directory for PMTiles and web tiles <code>--id</code> required string Dataset ID used for naming outputs and metadata <code>--makefn</code> string File name for the generated Makefile (default: <code>run_cartload2.mk</code>) <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--pmtiles</code> string Path to the <code>pmtiles</code> binary (default: <code>pmtiles</code>) <code>--tippecanoe</code> string Path to the <code>tippecanoe</code> binary (default: <code>tippecanoe</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/seqscope/#upload-to-data-repository","title":"Upload to Data Repository","text":"<p>Choose a data repository to host/share your output</p> <p><code>cartloader</code> supports two upload options (<code>AWS</code> and <code>Zenodo</code>) for storing PMTiles of SGE and spatial factors in a data repository.</p> <p>Choose the one that best suits your needs.</p>"},{"location":"vignettes/subregion_tutorials/seqscope/#aws-uploads","title":"AWS Uploads","text":"<p>Upload the generated cartloader outputs to your designated AWS S3 directory:</p> <pre><code>cartloader upload_aws \\\n  --in-dir ./cartload2 \\\n  --s3-dir \"s3://${AWS_BUCKET}/${DATA_ID}\" \\\n  --aws ${aws} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--s3-dir</code> required string Path to the target S3 directory for uploading <code>--aws</code> string Path to the AWS CLI binary <code>--n-jobs</code> int Number of parallel jobs"},{"location":"vignettes/subregion_tutorials/seqscope/#zenodo-uploads","title":"Zenodo Uploads","text":"<p>Upload the generated cartloader outputs to your designated Zenodo deposition or a new deposition.</p> <pre><code>cartloader upload_zenodo \\\n  --in-dir ./cartload2 \\\n  --upload-method catalog \\\n  --zenodo-token /path/to/zenodo/token/file \\\n  --create-new-deposition \\\n  --title  \"Yur Title\" \\\n  --creators \"Your Name\" \\\n  --description \"This is an example description\"\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--upload-method</code> required string Method to determine which files to upload. Options: <code>all</code> to upload all files in <code>--in-dir</code>; <code>catalog</code> to upload files listed in a catalog YAML file, <code>user_list</code> to upload files explicitly listed via <code>--in-list</code> <code>--catalog-yaml</code> string Required if <code>--upload-method catalog</code>.  Path to the catalog.yaml file generated in <code>run_cartload2</code>. If absent, will use the catalog.yaml in the input directory specified by <code>--in-dir</code>. <code>--zenodo-token</code> required string Path to your Zenodo access file <code>--create-new-deposition</code> flag a new Zenodo deposition will be created. <code>--title</code> required string Required if <code>--create-new-deposition</code>. Title for the new Zenodo deposition. <code>--creators</code> required list of str List of creators in \"Lastname, Firstname\" format."},{"location":"vignettes/subregion_tutorials/seqscope/#output-data","title":"Output Data","text":"<p>See more details of output at the Reference pages for run_ficture2 and run_cartload2.</p>"},{"location":"vignettes/subregion_tutorials/seqscope/#spatial-factor-inference-from-ficture","title":"Spatial Factor Inference from <code>FICTURE</code>","text":"<p>Below is an example of spatial factor inference results produced by <code>FICTURE</code> using a training width of 18, 12 factors, a fit width of 18, and an anchor resolution of 6.</p> <p> </p> Factor RGB Weight PostUMI TopGene_pval TopGene_fc TopGene_weight 0 255,101,101 0.57145 2577934 Snap25,Cck,Hpca,Syt1,Atp1b1,Selenow,Ywhah,Scg5,Cnih2,Atp1a3,Vsnl1,Gnas,Cpe,Prkcb,Stmn2,Atp2b1,Gng3,Prkcg,Snrpn,Norad Nr2c1,Calca,Wdr91,Ccbe1,Esyt1,Epha3,Slc9a4,Thap7,Mapk11,Klk8,Arhgef6,1110018N20Rik,Iba57,Klk10,Gjd2,Leng9,Zbtb46,Slc9a2,Akr1c18,Dlx6os1 Snap25,Tmsb4x,Atp1b1,Actb,Cpe,Ywhah,Nrgn,Ppp3ca,Selenow,Calm1,Atp1a3,Calm2,Fth1,Rtn1,Cox8a,Gnas,Camk2a,Norad,Aldoa_v1,Ndrg4 1 237,238,0 0.15458 697338 Ppp3ca,Nrgn,Ptk2b,Olfm1,Ppp3r1,Gria2,Ncdn,Nsf,Syne1,Snca,Chn1,Tmsb4x,Rasgrf1,Grin2a,Enc1,Kalrn,Wasf1,Camk2b,Calm2,Epha7 Vwa8,Zfp583,Sppl2b,Faap24,Recql5,A230051N06Rik,Ints6l,Rnaseh2b,Strada,Scnn1a,Snhg17,Prelid3a,Grhl1,Icam4,Slc44a5,Tyw1,Parp8,Asb11,Vipr1,Zfp668 Ppp3ca,Nrgn,Tmsb4x,Actb,Snap25,Atp1b1,Olfm1,Ywhah,Calm2,Ncdn,Rtn1,Ptk2b,Calm1,Ppp3r1,Actg1,Chn1,Fth1,Ndrg4,Fkbp1a,Cfl1 2 101,255,101 0.116 523314 Cst3,Glul,Slc1a2,Mt1,Apoe,Sparcl1,Aldoc,Clu,Atp1a2,Slc1a3,Camk2a,Ndrg2,Gfap,Mt2,Gpr37l1,Atp1b2,Fam107a,Prdx6,Bc1,Plpp3 Pdk4,Bgn,Unc93b1,Rfx4,Ccr5,Phkg1,Slc38a3,Pax6,Chil1,Gli3,Thbs4,Ppp1r18,Sh3pxd2b,Lyz2,Cpt1a,Aif1,Pdlim4,Cd33,Lcat,Arhgef19 Cst3,Glul,Slc1a2,Sparcl1,Camk2a,Cpe,Mt1,Apoe,Mbp,Fth1,Aldoc,Clu,Ttr,Camk2n1,Ckb,Ddn,Rps29,Atp1a2,Scd2,Mt3 3 101,254,255 0.09284 418815 Fam163b,Prox1,Adcy1,Stxbp6,C1ql2,Btbd3,Synpr,Sema5a,Dsp,Eef1a1,Ncdn,Jun,Lrrtm4,Rfx3,Olfm1,Dgkh,Marcksl1,Ncald,Pitpnm2,Nrgn Il20rb,Tdo2,Col22a1,C1ql2,St3gal1,Plk5,Dsp,Prox1os,Fam163b,Prox1,Rph3al,H2bc6,Lrrtm4,Mcm6,Khdrbs2,Vwa3b,Prdm5,Npnt,Dact1,Stxbp6 Nrgn,Eef1a1,Ncdn,Olfm1,Ppp3ca,Actb,Tmsb4x,Calm1,Camk2a,Sparcl1,Atp1b1,Adcy1,Fam163b,Tspan7,Ndrg4,Rplp1,Arf3,Camk2n1,Rpl17,Ptk2b 4 101,101,255 0.03885 175240 Plp1,Mbp,Gatm,Mobp,Cnp,Cldn11,Fth1,Car2,Ermn,Cryab,Qdpr,Tubb4a,Trf,Plekhb1,Qki,Tspan2,Mal,Bcas1,Tmem88b,Septin4 Insc,Creb5,Tmem125,Trim36,Hapln2,Pde1c,Gjc2,Prr5l,Gjc3,Sec14l5,Gatm,Nkx6-2,Tmem88b,Adamts4,Plekhh1,Ermn,Plp1,Trim59,Plekhg3,Enpp6 Mbp,Plp1,Fth1,Mobp,Ptgds,Actb,Gatm,Tubb4a,Cnp,Car2,Cldn11,Tpt1,Scd2,Glul,Qdpr,App,Qki,Ptma,Malat1,Lars2 5 255,101,254 0.02347 105862 Ttr,Ptgds,Enpp2,Tac2,Gng8,Sostdc1,Ecrg4,Zic1,Calb2,Nnat,Dcn,Tmem212,Adcyap1,Gpr151,2900040C04Rik,Necab2,Apod,Nhlh2,Pou4f1,Ace Tmem212,Kcne2,Cldn2,Dcn,Septin10,Col8a2,Pou4f1,Nhlh2,Gng8,Wif1,Chrna3,Adcyap1,Folr1,Col1a2,Clec3b,Gng14,Sostdc1,Foxc1,Ecrg4,Tac2 Ttr,Ptgds,Enpp2,Apoe,Cpe,Pcp4,Actb,Eef1a1,Nnat,Psap,Fth1,Tpt1,Cst3,Dbi,Atp1b1,Cox8a,Sparcl1,Clu,Rpl23,Cox7c 6 255,178,101 0.00163 7366 Nkx2-2,Abtb2,Myo1d,C030029H02Rik,Pogk,Dusp16,Smco3,Gjb1,Ldlrad3,Rhobtb3,Lrrc8c,Cdr2,Piga,Tjap1,Carns1,Gpt,Prim1,Sh3gl3,Plk3,Cerox1 Nkx2-2,Abtb2,C030029H02Rik,Myo1d,Dusp16,Smco3,Gjb1,Pogk,Prim1,Ldlrad3,Plk3,Vgll4,Carns1,Gpt,Letm2,Cdr2,Piga,Fign,Lmln,Tjap1 Mbp,Fth1,Pogk,Malat1,Qdpr,Plp1,Myo1d,Tubb4a,Abtb2,Rps27a,Rhobtb3,Glul,Gatm,Nkx2-2,Sh3gl3,Alkbh5,C030029H02Rik,Smco3,Tpt1,Gjb1 7 178,255,101 0.00073 3290 Sst,Crhbp,Npy,Cort,Reln,Uhrf1bp1,Rab3b,2310010J17Rik,Elfn1,Lypd6b,Lgals1,Rpp25,Gad2,Cdh13,Clic5,Cenpf,Dlx1,Bcam,Foxred2,Sec14l5 Sst,Uhrf1bp1,Crhbp,Cort,Reln,Lypd6b,2310010J17Rik,Elfn1,Rab3b,Npy,Clic5,Rpp25,Cenpf,Bcam,Lgals1,Sec14l5,Dlx1,Foxred2,Gpc3,Cdh13 Sst,Npy,Crhbp,Atp1b1,Reln,Cort,Zwint,Gad2,Rab3b,Syt1,2310010J17Rik,Snap25,Sparcl1,Atp1a3,Oxr1,Scg2,Mdh1,Atp6v0c,Atp6v1e1,Vgf 9 101,178,255 0.0004 1817 Hba-a2,Hbb-bs,Hba-a1,Hbb-bt,Tent5c,Polr2l,Aven,Tinagl1,Map2k3,Rgs6,Bst2,Zfp318,Stk40,Plekha8,Ube2l6,Rad50,Slc12a4,Kank2,Srgap1,Klf2 Hba-a1,Hbb-bs,Hbb-bt,Hba-a2,Tent5c,Polr2l,Aven,Tinagl1,Map2k3,Rgs6,Bst2,Slc12a4,Stk40,Ube2l6,Plekha8,Kank2,Rad50,Zfp318,Prtg,Srgap1 Hba-a2,Hbb-bs,Hba-a1,Hbb-bt,Polr2l,Atp1b1,Camk2a,Plekhb1,Tent5c,Rpl31,Praf2,Tpd52,Ptgds,Ddn,Fth1,Calm3,Rpl38,Mobp,Psme3,Mkrn1 8 0,223,95 5e-05 214 Sass6,Recql5,Jmjd4,A230072C01Rik,Zfp583,Eef1akmt2,Rnaseh2b,Orc6,Akap10,Mak16,Slc25a35,Dclre1b,C130074G19Rik,Fbxw4,Arhgap10,Il17ra,Zbtb2,Katnip,Hook2,Ints6l Sass6,Recql5,Jmjd4,A230072C01Rik,Zfp583,Rnaseh2b,Eef1akmt2,Akap10,Orc6,Slc25a35,Dclre1b,C130074G19Rik,Mak16,Arhgap10,Il17ra,Fbxw4,Katnip,Zbtb2,Hook2,Ints6l Sass6,Recql5,Jmjd4,Cst3,Mak16,A230072C01Rik,Orc6,Tmsb4x,Zfp583,Hexb,Eef1akmt2,Capzb,Gabarapl1,Mdh2,Odc1,Rpl6,Olfm1,Rps8,Golga1,Zfp106"},{"location":"vignettes/subregion_tutorials/seqscope/#packed-sge-and-spatial-factor-outputs-from-run_cartload2","title":"Packed SGE and Spatial Factor Outputs from <code>run_cartload2</code>","text":"<p>The packed SGE data and spatial factor inferences generated by <code>FICTURE</code> are available in PMTile format on Zenodo: DOI:10.5281/zenodo.15759403.</p> <p>These datasets can also be loaded directly using the following catalog YAML file: <code>https://zenodo.org/records/15802634/catalog.yaml</code></p>"},{"location":"vignettes/subregion_tutorials/stereoseq/","title":"StereoSeq Starter Tutorial","text":""},{"location":"vignettes/subregion_tutorials/stereoseq/#input-data","title":"Input Data","text":"<p>The input data represents mouse hippocampus. For demonstration purposes, we selected the adult mouse brain coronal section from the official release and extracted only the hippocampus region. The full-section data sourced from the Stereo-seq platform, as part of the MOSTA project.</p> <p>File Format</p> <p>The StereoSeq SGE includes one tab-delimited \u201cBin1\u201d gene expression matrix file:</p> <p>TSV File Format</p> <pre><code>geneID          x       y       MIDCounts\n0610005C13Rik   6632    9074    1\n0610005C13Rik   8651    8935    1\n0610005C13Rik   7228    12814   2\n</code></pre> <ul> <li>\"<code>geneID</code>\": gene symbols</li> <li>\"<code>x</code>\": x coordinates of each DNB on the captured chip</li> <li>\"<code>y</code>\": y coordinates of each DNB on the captured chip</li> <li>\"<code>MIDCounts</code>\": the number of UMI for each gene at each DNB</li> </ul> <p>Data Access</p> <p>The example data is hosted on Zenedo ().</p> <p>Follow the commands below to download the example data.</p> <pre><code>work_dir=/path/to/work/directory\ncd $work_dir\nwget  https://zenodo.org/records/15786632/files/stereoseq_starter.raw.tar.gz \ntar --strip-components=1 -zxvf stereoseq_starter.raw.tar.gz  \n</code></pre>"},{"location":"vignettes/subregion_tutorials/stereoseq/#set-up-the-environment","title":"Set Up the Environment","text":"<p>Define paths to all required binaries and resources, and target AWS S3 bucket. Optionally, specify a fixed color map for consistent rendering.</p> <pre><code># ====\n# Replace each placeholder with the actual path on your system.  \n# ====\nwork_dir=/path/to/work/directory        # path to work directory that contains the downloaded input data\ncd $work_dir\n\n# Define paths to required binaries and resources\nspatula=/path/to/spatula/binary         # path to spatula executable\npunkst=/path/to/punkst/binary           # path to FICTURE2/punkst executable\ntippecanoe=/path/to/tippecanoe/binary   # path to tippecanoe executable\npmtiles=/path/to/pmtiles/binary         # path to pmtiles executable\naws=/path/to/aws/cli/binary             # path to AWS CLI binary\n\n# (Optional) Define path to color map. \ncmap=/path/to/color/map                 # Path to the fixed color map for rendering. cartloader provides a fixed color map at cartloader/assets/fixed_color_map_256.tsv.\n\n# AWS S3 target location for cartostore\nAWS_BUCKET=\"EXAMPLE_AWS_BUCKET\"         # replace EXAMPLE_AWS_BUCKET with your actual S3 bucket name\n\n# Activate the bioconda environment\nconda activate ENV_NAME              # replace BIOENV_NAME with your bioconda environment name\n</code></pre> <p>Define data ID and analysis parameters:</p> <pre><code># Unique identifier for your dataset\nDATA_ID=\"stereoseq_hippo\"                # change this to reflect your dataset name\nPLATFORM=\"bgi_stereoseq\"                 # platform information\nSCALE=2                                  # scale from coordinate to micrometer\n\n# LDA parameters\ntrain_width=18                           # define LDA training hexagon width (comma-separated if multiple widths are applied)\nn_factor=6,12                            # define number of factors in LDA training (comma-separated if multiple n-factor are applied)\n</code></pre> <p>How to Define Scaling Factors for StereoSeq?</p> <p>According to the StereoSeq paper, the technology features spot sizes of approximately 220 nanometers in diameter with center-to-center distances of about 500 nanometers. Thus, each pixel corresponds to approximately 0.5 micrometers. The scaling factor from coordinate to um is defined as 2.</p>"},{"location":"vignettes/subregion_tutorials/stereoseq/#sge-format-conversion","title":"SGE Format Conversion","text":"<p>Convert the raw input to the unified SGE format. See more details in Reference page.</p> <pre><code>cartloader sge_convert \\\n  --makefn sge_convert.mk \\\n  --platform ${PLATFORM} \\\n  --in-csv ./input.tsv.gz \\\n  --units-per-um ${SCALE} \\\n  --out-dir ./sge \\\n  --exclude-feature-regex '^(BLANK|NegCon|NegPrb)' \\\n  --sge-visual \\\n  --spatula ${spatula} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--platform</code> required string Platform (options: \"<code>10x_visium_hd</code>\", \"<code>seqscope</code>\", \"<code>10x_xenium</code>\", \"<code>bgi_stereoseq</code>\", \"<code>cosmx_smi</code>\", \"<code>vizgen_merscope</code>\", \"<code>pixel_seq</code>\", \"<code>generic</code>\") <code>--in-csv</code> required string Path to the input TSV/CSV file <code>--units-per-um</code> required float Scale to convert coordinates to microns (default: <code>1.0</code>) <code>--out-dir</code> required string Output directory for the converted SGE files <code>--makefn</code> string File name for the generated Makefile (default: <code>sge_convert.mk</code>) <code>--exclude-feature-regex</code> regex Pattern to exclude control features <code>--sge-visual</code> flag Enable SGE visualization step (generates diagnostic image) (default: <code>FALSE</code>) <code>--spatula</code> string Path to the spatula binary (default: <code>spatula</code>) <code>--n-jobs</code> int Number of parallel jobs for processing (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/stereoseq/#ficture-analysis","title":"<code>FICTURE</code> analysis","text":"<p>Compute spatial factors using <code>punkst</code> (FICTURE2 mode). See more details in Reference page.</p> <pre><code>cartloader run_ficture2 \\\n  --makefn run_ficture2.mk \\\n  --main \\\n  --in-transcript ./sge/transcripts.unsorted.tsv.gz \\\n  --in-feature ./sge/feature.clean.tsv.gz \\\n  --in-minmax ./sge/coordinate_minmax.tsv \\\n  --cmap-file ${cmap} \\\n  --exclude-feature-regex '^(mt-.*$|Gm\\d+$)' \\\n  --out-dir ./ficture2 \\\n  --width ${train_width} \\\n  --n-factor ${n_factor} \\\n  --spatula ${spatula} \\\n  --ficture2 ${punkst} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--main</code> required <sup>1</sup> flag Enable <code>cartloader</code> to run all five steps <code>--in-transcript</code> required string Path to input transcript-level SGE file <code>--out-dir</code> required string Path to output directory <code>--width</code> required int or comma-separated list LDA training hexagon width(s) <code>--n-factor</code> required int or comma-separated list Number of LDA factors <code>--makefn</code> string File name for the generated Makefile (default: <code>run_ficture2.mk</code> ) <code>--in-feature</code> string Path to input feature file <code>--in-minmax</code> string Path to input coordinate min/max file <code>--cmap-file</code> string Path to color map file <code>--exclude-feature-regex</code> regex Pattern to exclude features <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--ficture2</code> string Path to the <code>punkst</code> directory (defaults to <code>punkst</code> repository within <code>submodules</code> directory of  <code>cartloader</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>) <p><sub><sup>1</sup>: <code>cartloader</code> requires the user to specify at least one action. Available actions includes: <code>--tile</code> to run tiling step; <code>--segment</code> to run segmentation step; <code>--init-lda</code> to run LDA training step; <code>--decode</code> to run decoding step; <code>--summary</code> to run summarization step; <code>--main</code> to run all above five actions.</sub></p>"},{"location":"vignettes/subregion_tutorials/stereoseq/#cartloader-compilation","title":"<code>cartloader</code> Compilation","text":"<p>Generate pmtiles and web-compatible tile directories. See more details in Reference page.</p> <pre><code>cartloader run_cartload2 \\\n  --makefn run_cartload2.mk \\\n  --fic-dir ./ficture2 \\\n  --out-dir ./cartload2 \\\n  --id ${DATA_ID} \\\n  --spatula ${spatula} \\\n  --pmtiles ${pmtiles} \\\n  --tippecanoe ${tippecanoe} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--fic-dir</code> required string Path to the input directory containing FICTURE2 output <code>--out-dir</code> required string Path to the output directory for PMTiles and web tiles <code>--id</code> required string Dataset ID used for naming outputs and metadata <code>--makefn</code> string File name for the generated Makefile (default: <code>run_cartload2.mk</code>) <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--pmtiles</code> string Path to the <code>pmtiles</code> binary (default: <code>pmtiles</code>) <code>--tippecanoe</code> string Path to the <code>tippecanoe</code> binary (default: <code>tippecanoe</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/stereoseq/#upload-to-data-repository","title":"Upload to Data Repository","text":"<p>Choose a data repository to host/share your output</p> <p><code>cartloader</code> supports two upload options (<code>AWS</code> and <code>Zenodo</code>) for storing PMTiles of SGE and spatial factors in a data repository.</p> <p>Choose the one that best suits your needs.</p>"},{"location":"vignettes/subregion_tutorials/stereoseq/#aws-uploads","title":"AWS Uploads","text":"<p>Upload the generated cartloader outputs to your designated AWS S3 directory:</p> <pre><code>cartloader upload_aws \\\n  --in-dir ./cartload2 \\\n  --s3-dir \"s3://${AWS_BUCKET}/${DATA_ID}\" \\\n  --aws ${aws} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--s3-dir</code> required string Path to the target S3 directory for uploading <code>--aws</code> string Path to the AWS CLI binary <code>--n-jobs</code> int Number of parallel jobs"},{"location":"vignettes/subregion_tutorials/stereoseq/#zenodo-uploads","title":"Zenodo Uploads","text":"<p>Upload the generated cartloader outputs to your designated Zenodo deposition or a new deposition.</p> <pre><code>cartloader upload_zenodo \\\n  --in-dir ./cartload2 \\\n  --upload-method catalog \\\n  --zenodo-token /path/to/zenodo/token/file \\\n  --create-new-deposition \\\n  --title  \"Yur Title\" \\\n  --creators \"Your Name\" \\\n  --description \"This is an example description\"\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--upload-method</code> required string Method to determine which files to upload. Options: <code>all</code> to upload all files in <code>--in-dir</code>; <code>catalog</code> to upload files listed in a catalog YAML file, <code>user_list</code> to upload files explicitly listed via <code>--in-list</code> <code>--catalog-yaml</code> string Required if <code>--upload-method catalog</code>.  Path to the catalog.yaml file generated in <code>run_cartload2</code>. If absent, will use the catalog.yaml in the input directory specified by <code>--in-dir</code>. <code>--zenodo-token</code> required string Path to your Zenodo access file <code>--create-new-deposition</code> flag a new Zenodo deposition will be created. <code>--title</code> required string Required if <code>--create-new-deposition</code>. Title for the new Zenodo deposition. <code>--creators</code> required list of str List of creators in \"Lastname, Firstname\" format."},{"location":"vignettes/subregion_tutorials/stereoseq/#output-data","title":"Output Data","text":"<p>See more details of output at the Reference pages for run_ficture2 and run_cartload2.</p>"},{"location":"vignettes/subregion_tutorials/stereoseq/#spatial-factor-inference-from-ficture","title":"Spatial Factor Inference from <code>FICTURE</code>","text":"<p>Below is an example of spatial factor inference results produced by <code>FICTURE</code> using a training width of 18, 12 factors, a fit width of 18, and an anchor resolution of 6.</p> <p> </p> Factor RGB Weight PostUMI TopGene_pval TopGene_fc TopGene_weight 0 255,101,101 0.17583 6349542 Apoe,Cst3,Clu,Slc1a2,Shank1,Tubb2a,Sst,Gnb1,Mfge8,Slc1a3,Fam107a,Aldoc,Cspg5,Ptn,Mt2,Prkar1b,Mt1,Scg3,Ptms,Pkm Naip2,Fam167b,Ifi47,Pyroxd2,Pctp,Rrad,Itpripl1,Chst14,Arhgef5,Mhrt,Rbpjl,Gsdmd,Zc3h12a,2310040G24Rik,Cd101,Gchfr,Wdfy4,Rtp1,Fmo2,Krt73 Apoe,Cst3,Slc1a2,Mt1,Actb,Clu,Rpl41,Tubb2a,Tmsb4x,Shank1,Cox8a,Ptms,Snap25,Sparcl1,Cdk8,Rplp1,Aldoc,Pkm,Ppm1e,Itm2c 3 101,254,255 0.13679 4939649 Olfm1,Enc1,Cox5b,Timm8b,Cox6c,Rps21,Cox7a2,Nsg2,Hras,Rps15,Rps17,Cox4i1,Cox8a,Pfn2,Rps15a,Serinc1,Rpl32,Caly,Sub1,Selenow Plet1os,AC113587.1,CT025678.1,C4bp,Myh1,AC161607.1,Fut2,1110006O24Rik,Drd4,Adamts14,Acp7,Prss57,Il17re,Fam229a,Mutyh,Fstl3,Retn,Itga10,0610038B21Rik,Tbc1d10c Tmsb4x,Olfm1,Calm1,Cox6c,Rpl41,Cox4i1,Cox8a,Ubb,Rplp1,Nrgn,Nme7,Fth1,Cox5b,Rtn1,Cox7a2,Rps21,Ndufa4,Calm2,Serinc1,Ptms 1 237,238,0 0.13387 4834133 Nrgn,Tmsb4x,Hpca,Calm2,Cck,Snca,Crym,Ywhab,Ywhah,Nptxr,Cpne6,Dynll1,Selenow,Neurod6,Pde1a,Rtn1,Calm1,Rab6a,Chgb,Lmo4 Lrrn4,Lipg,Zscan2,Krt5,Zfp296,Tymp,Rbm46,Tnfrsf8,Tmem54,5330429C05Rik,Sfrp4,Rln1,A330070K13Rik,Vgll3,Maats1,2410080I02Rik,Slc9a4,Slc23a3,Tbata,Neurod6 Tmsb4x,Nrgn,Calm2,Calm1,Cdk8,Hpca,Snap25,Fth1,Cck,Actb,Rtn1,Ppp3ca,Cpe,Ywhab,Olfm1,Selenow,Snca,Stmn3,Rpl41,Cox6c 4 101,101,255 0.13059 4715949 Lars2,Cdk8,Gphn,Zc3h7a,Cd44,Jarid2,Camk1d,Cmss1,Map1b,Calb2,Hsp90aa1,Nefm,Nap1l5,D130009I18Rik,Ttc3,Rab3c,Tmtc2,Hspa8,Il31ra,Impact Cnga4,Hist1h4c,Ahnak2,2310068J16Rik,B930036N10Rik,Adrb3,Chodl,Actc1,C330018A13Rik,Slc35d3,Zfp114,Hmga2,Fam72a,6430573P05Rik,Atp8b3,Cfap57,Dmrtb1,Crb3,Hist1h4d,Alox8 Cdk8,Lars2,Gphn,Camk1d,Zc3h7a,Jarid2,Cmss1,Cd44,Il31ra,Calm1,Hspa8,Nme7,Snap25,Calm2,Map1b,Hsp90ab1,Stmn3,Ubb,Atp1a3,Gnas 2 101,255,101 0.10222 3691317 Ppp3ca,Ncdn,Pcp4,Olfm1,Dgkh,Adcy1,Rfx3,Synpr,Camk2b,C1ql2,2010300C02Rik,Prox1,Ppp1r1a,Ppfia2,Fam163b,Ahcyl2,Wipf3,Sema5a,C1ql3,Tmsb4x AC118542.1,Nhlh1,Card14,Pla2g2f,Unc13d,Neurog2,Ccdc33,Eomes,Hist1h1d,Hbq1a,Dsp,4930529K09Rik,Lct,AI463170,Rtl3,Rcvrn,Fam160a1,Kif2c,Avp,E130111B04Rik Tmsb4x,Cdk8,Olfm1,Ppp3ca,Fth1,Ncdn,Pcp4,Calm1,Malat1,Actb,Eef1a1,Nrgn,Rpl41,Calm2,Lars2,Ubb,Gphn,Bex2,Camk2b,Rplp1 5 255,101,254 0.08664 3128701 Plp1,Mbp,Mobp,Fth1,Mal,Ptgds,Mag,Cldn11,Cdk8,Pvalb,Trf,Cnp,Qdpr,S100b,Sept4,Mog,Scd2,Sparc,Tspan2,Enpp2 Sox14,5033421B08Rik,Klk6,Asb4,Slc45a3,Hotairm1,Tfap2b,Ctxn3,Rapgef3os2,BC039966,Tex52,C1ql4,Tnfrsf11b,Mab21l2,Lpo,Six3,Il17rb,Tnni1,Emilin2,Serpinb1a Plp1,Cdk8,Fth1,Mbp,Mobp,Ptgds,Lars2,Gphn,Cox4i1,Zc3h7a,Camk1d,Mt1,Sparcl1,Rpl41,Scd2,Ckb,Mal,Tmsb4x,Rpl13a,Mag 7 178,255,101 0.0697 2516994 Mt1,Apoe,Mt2,Cst3,Dbi,Ptgds,Fth1,Aldoc,Ndrg2,Atp1a2,Apod,Cpe,Rps27,Prdx6,Mgp,Agt,S100a13,Cd81,Clu,Rps16 Foxf1,Fgfbp1,Vwa7,Nfatc4,Tnni2,Rassf9,Foxd1,Chrnb3,Irf7,Nid1,Actg2,Inmt,Cav3,Pm20d1,Apoc3,Dennd1c,Tbx1,Mrc1,Siglece,Cyp1b1 Mt1,Apoe,Fth1,Cst3,Cdk8,Cpe,Ptgds,Tmsb4x,Mt2,Actb,Rpl41,Aldoc,Rps27,Plp1,Mbp,Rplp1,Sparcl1,Dbi,Clu,Atp1a2 6 255,178,101 0.06447 2328254 Malat1,Rbfox1,Meg3,Kcnip4,Dlg2,Csmd1,Nrg3,Tenm2,Lrrtm4,Opcml,Fam155a,Lsamp,Fgf14,Nlgn1,Ube3a,Nrxn3,Il1rapl1,Lingo2,Lrp1b,Celf2 Vmn2r86,4930532I03Rik,Pcdhga11,Sorbs2os,Speer4b,Plxna4os2,Olfr1564,Macrod2os2,A730009L09Rik,Pkhd1l1,Zfp955a,Gpr171,Nrg3os,Gdap10,1700026F02Rik,Angptl3,9530059O14Rik,Zfp551,5031415H12Rik,Far1os Malat1,Meg3,Cdk8,Kcnip4,Rbfox1,Lsamp,Dlg2,Nrg3,Csmd1,Tenm2,Celf2,Lrrtm4,Opcml,Cadm2,Nlgn1,Nrxn3,Fam155a,Lrp1b,Ptprd,Nrxn1 8 0,223,95 0.04764 1720217 Camk1d,Il31ra,Lars2,Gphn,Cd44,Prkcd,Ntng1,Pcdh9,Pcp4,Rora,Cmss1,Kcnc2,Plekhg1,Zc3h7a,Jarid2,Synpo2,Fgfr2,Zic1,Ptpn4,Tnnt1 Abhd12b,Vipr2,Ly6g6d,Mctp2,Gpat2,Gckr,Nod2,Smpx,Synpo2,Lpar3,Tnnt1,Rassf6,Atp2a1,Prkcd,Gtf2a1l,6330576A10Rik,Slain1os,Tmcc3os,Slitrk6,Mrvi1 Camk1d,Lars2,Gphn,Il31ra,Cdk8,Cd44,Cmss1,Zc3h7a,Malat1,Jarid2,Pcp4,Pcdh9,Kcnip4,Plp1,Meg3,Fgfr2,Rora,Syt1,Nrxn1,Tmtc2 9 101,178,255 0.03287 1187102 Malat1,Lsamp,Gpc5,Npas3,Ntm,Nrxn1,Slc1a2,Msi2,Rora,Trpm3,Mdga2,Neat1,Mertk,Wdr17,Macf1,Gabrb1,Slc4a4,Ctnnd2,Pitpnc1,Nfia Sfn,AB124611,Mettl11b,Ribc2,Atp13a4,Ttll8,Gpc5,C030018K13Rik,Gli2,Map3k19,4930401C15Rik,Aox1,0610005C13Rik,Rnf17,Sox6,Npas3,Fignl2,9430041J12Rik,Gli3,Gsap Malat1,Lsamp,Cdk8,Slc1a2,Gpc5,Nrxn1,Ntm,Apoe,Rora,Npas3,Pcdh9,Cst3,Zbtb20,Slc1a3,Mdga2,Trpm3,Atp1a2,Macf1,Qk,Mt1 11 255,153,204 0.01217 439414 Sst,Zcchc12,Npy,Nxph1,Tmem91,Dlk1,Cbln2,Gpx3,Slc6a3,Gad2,Ngb,Calca,Ddc,Cort,Pth2,Nap1l5,Slc18a2,Exosc5,Sncg,Tmsb10 Styxl1,4933402D24Rik,Fam167a,Slc12a1,A930024N18Rik,Fam71f2,1700086P04Rik,4632428C04Rik,B430218F22Rik,Ghrh,4930558K02Rik,H2-M3,1500015L24Rik,A230020J21Rik,Cabcoco1,Gpr183,Srpx,C1s1,Calca,Rac2 Sst,Bex2,Npy,Nap1l5,Zwint,Tubb2a,Uchl1,Cdk8,6330403K07Rik,Stmn1,Rps5,Zcchc12,Tmsb10,Lrba,Gad1,Nxph1,Gad2,Ndufa4,Rtn1,Gap43 10 178,101,255 0.0072 260001 Hbb-bs,Hba-a1,Hba-a2,Hbb-bt,Ptgds,Myoc,Gfap,Igkc,Apex2,Igha,Alas2,Igf2,Fam46c,A2m,Apod,Ube2l6,Fmod,Ifitm3,Aspg,Pf4 Hba-a1,Hba-a2,Hbb-bt,Hbb-bs,Chad,Igkc,Alas2,Lyve1,Igha,Fam46c,Myoc,Slc6a12,Aspg,Isg20,Timp1,Slfn2,Lcn2,Fmod,Pf4,A2m Hbb-bs,Hba-a1,Hba-a2,Ptgds,Hbb-bt,Cdk8,Fth1,Mt1,Tmsb4x,Gfap,Apod,Apoe,Camk1d,Mbp,Rpl41,Rplp1,Lars2,Plp1,Mt2,Actb"},{"location":"vignettes/subregion_tutorials/stereoseq/#packed-sge-and-spatial-factor-outputs-from-run_cartload2","title":"Packed SGE and Spatial Factor Outputs from <code>run_cartload2</code>","text":"<p>The packed SGE data and spatial factor inferences generated by <code>FICTURE</code> are available in PMTile format on Zenodo: DOI:10.5281/zenodo.15824948.</p> <p>These datasets can also be loaded directly using the following catalog YAML file: <code>https://zenodo.org/records/15824949/catalog.yaml</code></p>"},{"location":"vignettes/subregion_tutorials/visiumhd/","title":"10X VisiumHD Starter Tutorial","text":""},{"location":"vignettes/subregion_tutorials/visiumhd/#input-data","title":"Input Data","text":"<p>The input data originates from the mouse hippocampus and is extracted from an official release of mouse brain spatial gene expression (SGE) data.</p> <p>File Format</p> <p>Visium HD slides use a 2\u00d72\u202f\u00b5m grid of barcoded squares (<code>square_002um</code>) for high-resolution spatial gene mapping. The SGE file format comprises several key files as below: </p> <code>barcodes.tsv.gz</code> \u2013 spatial barcode for tissue locations  <pre><code>s_002um_00639_00600-1\ns_002um_00923_01639-1\ns_002um_01050_01530-1\n</code></pre> <ul> <li>Column 1: spatial barcodes corresponding to specific locations on the tissue section. </li> </ul> <code>features.tsv.gz</code> \u2013 feature metadata  <pre><code>ENSMUSG00000051951  Xkr4    Gene Expression\nENSMUSG00000025900  Rp1     Gene Expression\nENSMUSG00000025902  Sox17   Gene Expression\n</code></pre> <ul> <li>Column 1: Feature ID</li> <li>Column 2: Feature symbol</li> <li>Column 3: Features types</li> </ul> <code>matrix.mtx.gz</code> \u2013 expression count matrix  <pre><code>%%MatrixMarket matrix coordinate integer general\n%\n19059 869411 11376563\n3606 1 1\n8957 1 1\n9733 1 1\n</code></pre> <ul> <li><code>Header</code>: Initial lines form the header, declaring the matrix's adherence to the Market Matrix (MTX) format, outlining its traits. This may include comments (lines beginning with <code>%</code>) for extra metadata, all marked by a \u201c%\u201d.</li> <li><code>Dimensions</code>: Following the header, the first line details the matrix dimensions: the count of rows (features), columns (barcodes), and non-zero entries.</li> <li><code>Data Entries</code>: Post-dimensions, subsequent lines enumerate non-zero entries in seven columns: row index (feature index), column index (barcode index), and one value presenting the expression count per barcode per feature.</li> </ul> <code>tissue_positions.parquet</code> \u2013 spatial barcode metadata  <pre><code>barcode                 in_tissue   array_row   array_col   pxl_row_in_fullres  pxl_col_in_fullres\ns_002um_00434_01637-1   1           434         1637        3396.371014         9125.919898\n</code></pre> <ul> <li><code>barcode</code>: Unique spatial barcode associated with each capture spot.</li> <li><code>in_tissue</code>: Binary flag (1 = in tissue, 0 = background) indicating whether the spot falls within the tissue boundary.</li> <li><code>array_row</code>, <code>array_col</code>: Integer indices representing the position of the spot on the capture array grid.</li> <li><code>pxl_row_in_fullres</code>, <code>pxl_col_in_fullres</code>: Floating point coordinates locating the spot in full-resolution tissue image pixels.</li> </ul> <code>scalefactors_json.json</code> \u2013 pixel-to-micrometer scaling factors  <pre><code>{\n    \"spot_diameter_fullres\": 7.303953797779634,\n    \"bin_size_um\": 2.0,\n    \"microns_per_pixel\": 0.2738242950835738,\n    \"regist_target_img_scalef\": 0.2505533,\n    \"tissue_lowres_scalef\": 0.02505533,\n    \"fiducial_diameter_fullres\": 1205.1523766336395,\n    \"tissue_hires_scalef\": 0.2505533\n}\n</code></pre> <ul> <li><code>spot_diameter_fullres</code>: Estimated diameter of a barcoded spot in full-resolution pixels.</li> <li><code>bin_size_um</code>: Physical size (in micrometers) of the smallest bin, typically 2.0\u202f\u00b5m for Visium HD.</li> <li><code>microns_per_pixel</code>: Resolution of the full-res image, used to convert pixel distances to micrometers.</li> <li><code>regist_target_img_scalef</code>: Scaling factor applied during image registration to the target image.</li> <li><code>tissue_lowres_scalef</code>: Downscaling factor from full-res to low-resolution tissue image.</li> <li><code>fiducial_diameter_fullres</code>: Diameter of fiducial markers in full-resolution pixels, useful for alignment.</li> <li><code>tissue_hires_scalef</code>: Downscaling factor from full-res to high-resolution tissue image.</li> </ul> <p>Data Access</p> <p>The example data is hosted on Zenedo ().</p> <p>Follow the commands below to download the example data.</p> <pre><code>work_dir=/path/to/work/directory\ncd $work_dir\nwget  https://zenodo.org/records/15786632/files/visiumhd_starter.raw.tar.gz \ntar -zxvf visiumhd_starter.raw.tar.gz  \n</code></pre>"},{"location":"vignettes/subregion_tutorials/visiumhd/#set-up-the-environment","title":"Set Up the Environment","text":"<p>Define paths to all required binaries and resources, and target AWS S3 bucket. Optionally, specify a fixed color map for consistent rendering.</p> <pre><code># ====\n# Replace each placeholder with the actual path on your system.  \n# ====\nwork_dir=/path/to/work/directory        # path to work directory that contains the downloaded input data\ncd $work_dir\n\n# Define paths to required binaries and resources\nspatula=/path/to/spatula/binary         # path to spatula executable\npunkst=/path/to/punkst/binary           # path to FICTURE2/punkst executable\ntippecanoe=/path/to/tippecanoe/binary   # path to tippecanoe executable\npmtiles=/path/to/pmtiles/binary         # path to pmtiles executable\naws=/path/to/aws/cli/binary             # path to AWS CLI binary\n\n# (Optional) Define path to color map. \ncmap=/path/to/color/map                 # Path to the fixed color map for rendering. cartloader provides a fixed color map at cartloader/assets/fixed_color_map_256.tsv.\n\n# AWS S3 target location for cartostore\nAWS_BUCKET=\"EXAMPLE_AWS_BUCKET\"         # replace EXAMPLE_AWS_BUCKET with your actual S3 bucket name\n\n# Activate the bioconda environment\nconda activate ENV_NAME              # replace BIOENV_NAME with your bioconda environment name\n</code></pre> <p>Define data ID and analysis parameters:</p> <pre><code># Unique identifier for your dataset\nDATA_ID=\"visiumhd_hippo\"                 # change this to reflect your dataset name\nPLATFORM=\"10x_visium_hd\"                 # platform information\n\n# LDA parameters\ntrain_width=18                           # define LDA training hexagon width (comma-separated if multiple widths are applied)\nn_factor=6,12                            # define number of factors in LDA training (comma-separated if multiple n-factor are applied)\n</code></pre> <p>How to Define Scaling Factors for Visium HD</p> <p>10x Visium HD includes a <code>scalefactors_json.json</code> file that provides pixel-to-micrometer scaling information. <code>cartloader</code> can directly accept this file via the <code>--scale-json</code> option and will automatically compute the appropriate scaling factor, omitting manually calculate and specify <code>--units-per-um</code>. </p> <p>Alternatively, users may bypass the JSON file by directly providing a value through the <code>--units-per-um</code> option.</p>"},{"location":"vignettes/subregion_tutorials/visiumhd/#sge-format-conversion","title":"SGE Format Conversion","text":"<p>Convert the raw input to the unified SGE format. See more details in Reference page.</p> <pre><code>cartloader sge_convert \\\n  --makefn sge_convert.mk \\\n  --platform ${PLATFORM} \\\n  --in-mex ./raw \\\n  --in-parquet ./raw/tissue_positions.parquet \\\n  --scale-json ./raw/scalefactors_json.json \\\n  --out-dir ./sge \\\n  --exclude-feature-regex '^(BLANK|NegCon|NegPrb)' \\\n  --sge-visual \\\n  --spatula ${spatula} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--platform</code> required string Platform (options: \"<code>10x_visium_hd</code>\", \"<code>seqscope</code>\", \"<code>10x_xenium</code>\", \"<code>bgi_stereoseq</code>\", \"<code>cosmx_smi</code>\", \"<code>vizgen_merscope</code>\", \"<code>pixel_seq</code>\", \"<code>generic</code>\") <code>--in-mex</code> required string Path to the input MEX directory containing gene \u00d7 barcode matrix <code>--in-parquet</code> required string Path to the <code>tissue_positions.parquet</code> file with spatial barcode metadata <code>--scale-json</code> required <sup>1</sup> string Path to the <code>scalefactors_json.json</code> file for coordinate scaling (or use <code>--units-per-um</code> to specify directly) <code>--out-dir</code> required string Output directory for the converted SGE files <code>--makefn</code> string File name for the generated Makefile (default: <code>sge_convert.mk</code>) <code>--exclude-feature-regex</code> regex Pattern to exclude control features <code>--sge-visual</code> flag Enable SGE visualization step (generates diagnostic image) (default: <code>FALSE</code>) <code>--spatula</code> string Path to the spatula binary (default: <code>spatula</code>) <code>--n-jobs</code> int Number of parallel jobs for processing (default: <code>1</code>) <p><sub><sup>1</sup>: To define the scaling factor, <code>cartloader</code> requires either a JSON file (via <code>--scale-json</code>) or a direct scale value using <code>--units-per-um</code>. When using <code>--scale-json</code>, make sure the JSON file has <code>microns_per_pixel</code> information.</sub></p>"},{"location":"vignettes/subregion_tutorials/visiumhd/#ficture-analysis","title":"<code>FICTURE</code> analysis","text":"Parameter Required Type Description <code>--main</code> required <sup>1</sup> flag Enable <code>cartloader</code> to run all five steps <code>--in-transcript</code> required string Path to input transcript-level SGE file <code>--out-dir</code> required string Path to output directory <code>--width</code> required int or comma-separated list LDA training hexagon width(s) <code>--n-factor</code> required int or comma-separated list Number of LDA factors <code>--makefn</code> string File name for the generated Makefile (default: <code>run_ficture2.mk</code> ) <code>--in-feature</code> string Path to input feature file <code>--in-minmax</code> string Path to input coordinate min/max file <code>--cmap-file</code> string Path to color map file <code>--exclude-feature-regex</code> regex Pattern to exclude features <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--ficture2</code> string Path to the <code>punkst</code> directory (defaults to <code>punkst</code> repository within <code>submodules</code> directory of  <code>cartloader</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>) <p><sub><sup>1</sup>: <code>cartloader</code> requires the user to specify at least one action. Available actions includes: <code>--tile</code> to run tiling step; <code>--segment</code> to run segmentation step; <code>--init-lda</code> to run LDA training step; <code>--decode</code> to run decoding step; <code>--summary</code> to run summarization step; <code>--main</code> to run all above five actions.</sub></p>"},{"location":"vignettes/subregion_tutorials/visiumhd/#cartloader-compilation","title":"<code>cartloader</code> Compilation","text":"<p>Generate pmtiles and web-compatible tile directories. See more details in Reference page.</p> <pre><code>cartloader run_cartload2 \\\n  --makefn run_cartload2.mk \\\n  --fic-dir ./ficture2 \\\n  --out-dir ./cartload2 \\\n  --id ${DATA_ID} \\\n  --spatula ${spatula} \\\n  --pmtiles ${pmtiles} \\\n  --tippecanoe ${tippecanoe} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--fic-dir</code> required string Path to the input directory containing FICTURE2 output <code>--out-dir</code> required string Path to the output directory for PMTiles and web tiles <code>--id</code> required string Dataset ID used for naming outputs and metadata <code>--makefn</code> string File name for the generated Makefile (default: <code>run_cartload2.mk</code>) <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--pmtiles</code> string Path to the <code>pmtiles</code> binary (default: <code>pmtiles</code>) <code>--tippecanoe</code> string Path to the <code>tippecanoe</code> binary (default: <code>tippecanoe</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/visiumhd/#upload-to-data-repository","title":"Upload to Data Repository","text":"<p>Choose a data repository to host/share your output</p> <p><code>cartloader</code> supports two upload options (<code>AWS</code> and <code>Zenodo</code>) for storing PMTiles of SGE and spatial factors in a data repository.</p> <p>Choose the one that best suits your needs.</p>"},{"location":"vignettes/subregion_tutorials/visiumhd/#aws-uploads","title":"AWS Uploads","text":"<p>Upload the generated cartloader outputs to your designated AWS S3 directory:</p> <pre><code>cartloader upload_aws \\\n  --in-dir ./cartload2 \\\n  --s3-dir \"s3://${AWS_BUCKET}/${DATA_ID}\" \\\n  --aws ${aws} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--s3-dir</code> required string Path to the target S3 directory for uploading <code>--aws</code> string Path to the AWS CLI binary <code>--n-jobs</code> int Number of parallel jobs"},{"location":"vignettes/subregion_tutorials/visiumhd/#zenodo-uploads","title":"Zenodo Uploads","text":"<p>Upload the generated cartloader outputs to your designated Zenodo deposition or a new deposition.</p> <pre><code>cartloader upload_zenodo \\\n  --in-dir ./cartload2 \\\n  --upload-method catalog \\\n  --zenodo-token /path/to/zenodo/token/file \\\n  --create-new-deposition \\\n  --title  \"Yur Title\" \\\n  --creators \"Your Name\" \\\n  --description \"This is an example description\"\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--upload-method</code> required string Method to determine which files to upload. Options: <code>all</code> to upload all files in <code>--in-dir</code>; <code>catalog</code> to upload files listed in a catalog YAML file, <code>user_list</code> to upload files explicitly listed via <code>--in-list</code> <code>--catalog-yaml</code> string Required if <code>--upload-method catalog</code>.  Path to the catalog.yaml file generated in <code>run_cartload2</code>. If absent, will use the catalog.yaml in the input directory specified by <code>--in-dir</code>. <code>--zenodo-token</code> required string Path to your Zenodo access file <code>--create-new-deposition</code> flag a new Zenodo deposition will be created. <code>--title</code> required string Required if <code>--create-new-deposition</code>. Title for the new Zenodo deposition. <code>--creators</code> required list of str List of creators in \"Lastname, Firstname\" format."},{"location":"vignettes/subregion_tutorials/visiumhd/#output-data","title":"Output Data","text":"<p>See more details of output at the Reference pages for run_ficture2 and run_cartload2.</p>"},{"location":"vignettes/subregion_tutorials/visiumhd/#spatial-factor-inference-from-ficture","title":"Spatial Factor Inference from <code>FICTURE</code>","text":"<p>Below is an example of spatial factor inference results produced by <code>FICTURE</code> using a training width of 18, 12 factors, a fit width of 18, and an anchor resolution of 6.</p> <p> </p> Factor RGB Weight PostUMI TopGene_pval TopGene_fc TopGene_weight 0 255,101,101 0.20931 2920184 Atp2b1,Tmsb4x,Hpca,Wfs1,Cck,Plk2,Ptk2b,Rasgrp1,Scn3b,Cacng8,Ppp3r1,Kcnab1,Man1a,Epha6,Ppp3ca,Khdrbs3,Fibcd1,Prkcg,Rasd1,Itpka Lefty1,Stac,Grem1,Wnt11,Spink8,Wfs1,Fibcd1,Gpr101,Wnt2,Htr5b,Chrm5,Egfl6,Gpr161,B4galnt3,Myo1h,Col11a1,Htr1a,Ankrd63,Has3,Sult5a1 Tmsb4x,Ncdn,Calm3,App,Selenow,Ptk2b,Hpca,Atp2b1,Nrgn,Atp1b1,Itm2b,Cck,Olfm1,Ppp3ca,Rasgrp1,Atp2a2,Gpm6a,Camk2a,Calm2,Ppp3r1 1 237,238,0 0.1423 1985225 Ncdn,Olfm1,Prox1,C1ql2,Stxbp6,Ptk2b,Fam163b,Sema5a,Dsp,Rfx3,Calb1,C1ql3,Tiam1,Ccdc85a,Synpr,Bhlhe22,Rogdi,Rasgrf2,Dgkh,Ppfia2 Dsp,Il27ra,Arr3,Rtl3,Krt2,Wnt16,Pdyn,Ppl,Pla2g2f,Tdo2,C1ql2,Arsj,Plk5,Ntf3,Mylk3,Slc26a10,Olfr539,Gmnc,Cdh15,Htra4 Ncdn,Olfm1,Tmsb4x,Ptk2b,Calm3,Nrgn,Camk2n1,Camk2a,Selenow,Ppp3ca,Atp1b1,Snap25,Map1b,Gpm6a,Arf3,App,Chn1,Ywhah,Ptms,Gria2 2 101,255,101 0.13453 1876906 Sst,Npy,Gad2,Rab3b,Cnr1,Gad1,Pvalb,Nap1l5,Slc6a1,Serpini1,Slc32a1,Sncb,Cplx1,Snhg11,Kcnab3,Atp1b1,Zfp385a,Mdh1,Tshz2,Coro6 Rxfp3,Vax1,Lrrc38,Prph,Mybpc1,Dmrt2,Dlx5,Sst,Igf1,Cntnap3,Cox6a2,Slc17a8,Nhs,Crh,Pnoc,Ecel1,Slc32a1,Npy,Htr3a,Npas1 App,Snap25,Atp1b1,Calm3,Camk2n1,Atp2a2,Selenow,Uchl1,Snrpn,Snhg11,Eef1a2,Ncdn,Ndfip1,Tmsb4x,Sncb,Dnm1,Atp1a3,Atp6v1b2,Stxbp1,Scn1b 4 101,101,255 0.1124 1568195 Camk2a,Slc1a2,Aldoc,Ppp1r9b,Apoe,Cst3,Ddn,Mt1,Glul,Map2,Selenow,Atp1a2,Mt2,Psd,Nsmf,Agap2,Ndrg2,Clu,Fam107a,Ncs1 Mettl11b,Calr4,Car5b,Mlph,Aqp9,Sox21,Ppp1r3c,Cyp4f14,Mctp2,Olfr287,Ikzf1,Umodl1,Dmp1,Ttpa,Acot11,Gli2,Apoc1,Gldc,Papss2,Dio2 Camk2a,Apoe,Selenow,Slc1a2,Aldoc,Camk2n1,Ppp1r9b,Cst3,Fth1,Ddn,Mt1,Cpe,Calm3,Mt3,Ncdn,Map2,Tmsb4x,Olfm1,Tspan7,Arf3 3 101,254,255 0.10862 1515463 Nptxr,Chgb,Snap25,Uchl1,Ywhah,Hpca,Slc17a7,Dnm1,Cadm3,Olfm1,Syn2,Bok,Stmn2,Ak5,Ywhag,Rasgrp1,Neurod6,Nectin3,Ak4,Cpne4 Iyd,Olfr550,Tmem114,Cldn22,Ttn,Syna,Cyp26b1,Slc9a4,Cd109,Prss35,Itgbl1,Rerg,Adamts8,Nkd2,Bok,Tmem215,Cpne4,Ccbe1,Socs2,Mcub Snap25,Selenow,Olfm1,Calm3,Ncdn,App,Uchl1,Ywhah,Hpca,Ptk2b,Tmsb4x,Atp1b1,Dnm1,Chgb,Ywhag,Nptxr,Camk2n1,Slc17a7,Cpe,Nrgn 5 255,101,254 0.10013 1396880 Snap25,Vxn,Camk2n1,Pcp4,Ncald,Vsnl1,Stmn1,Ttc9b,Atp2b4,Myl4,Stxbp1,Basp1,Tbr1,Slc17a7,Cacnb4,Ngef,Stx1a,Efhd2,Egr1,Cabp1 Ntsr1,Krt80,Myl4,Neu2,Lipg,Trbc2,Gpr150,Palm3,Hs3st2,Rasgef1c,Arhgap25,Ovol2,Igfn1,Foxp2,Pou6f2,Ipcef1,Grp,Col5a1,Tpbg,Pdzph1 Snap25,Camk2n1,Olfm1,Calm3,Selenow,App,Nrgn,Tmsb4x,Uchl1,Atp2a2,Snrpn,Gpm6a,Dnm1,Eef1a2,Scn1b,Slc1a2,Ywhag,Slc17a7,Camk2a,Stxbp1 6 255,178,101 0.08468 1181439 Mbp,Plp1,Mobp,Mal,Cldn11,Trf,Fth1,Mag,Ugt8a,Cnp,Car2,Cryab,Apod,Tspan2,Sgk1,Gatm,Qdpr,Sept4,Plekhb1,Ptgds Cyp3a13,Cyp2j12,Atp10b,Tmem125,Nipal4,Fa2h,Mboat1,Galnt6,Sec14l5,Mag,Mal,Cldn11,Nkx6-2,Tmem88b,S1pr5,Ugt8a,Dapk2,Ada,Gjc2,Aspa Mbp,Plp1,Fth1,Mobp,Camk2n1,Apoe,App,Mal,Trf,Cldn11,Selenow,Tmsb4x,Car2,Qk,Apod,Sgk1,Ptgds,Aplp1,Cnp,Cryab 7 178,255,101 0.05769 804793 Apoe,Ptgds,Vim,Pltp,Tm4sf1,Acta2,Apod,Clu,Igf2,Igfbp7,Rarres2,Ahnak,Mt1,Mgp,Vtn,Cldn5,Atp1a2,Cst3,Fn1,Ptprb Ttc21a,Crocc2,Cfap73,Mapk15,Smim5,Syt15,Col4a6,Iqca,Cfap206,Crygn,Cfap65,Pln,Dnaaf1,Col3a1,Ccdc153,Serpina3g,Tmem212,Lrrc23,Dnah1,Slc22a6 Apoe,Aldoc,Cst3,Mt1,Clu,Slc1a2,Itm2b,Ptgds,Atp1a2,Tmsb4x,Mt3,Apod,Sparcl1,Cpe,Mt2,App,Fth1,Itm2c,Selenow,Atp1b2 8 0,223,95 0.05026 701127 Tmem181a,Lrp1b,Fam163b,Kalrn,Mef2c,Khdrbs2,Syne1,Ptk2,Grm2,Rnf112,Epb41,Stxbp2,Ryr2,Leng8,Atp2b4,Atp1a1,Rsrp1,Cacna1d,Lyst,Adcy1 Efhc2,Zfp853,Col22a1,Igsf9,Clec18a,Podn,Xkr7,Cyp2r1,Gucy2g,Rnf207,Dsg2,Ccdc155,Kcnh4,Psg16,Cbx2,Ddx11,Myadml2,Igfbpl1,Mtbp,Eid3 Ncdn,Olfm1,Nrgn,Snap25,Camk2n1,Ptk2b,Calm3,Tmsb4x,App,Camk2a,Gpm6a,Selenow,Eef1a2,Atp1b1,Kalrn,Ptms,Ppp3ca,Gria2,Snhg11,Map1b 10 178,101,255 8e-05 1124 Hbb-bs,Hba-a2,S100a9,S100a8,Hbb-bt,Anxa1,Atg9b,Paqr5,Rbl1,Tent5c,Lcn2,Ikzf1,Ifit3b,Cdh5,Tcf19,Klf5,Lrrc32,Rrm2,Mob3c,Ifi30 Hbb-bs,Hba-a2,S100a8,S100a9,Hbb-bt,Anxa1,Atg9b,Rbl1,Tent5c,Paqr5,Lcn2,Ifit3b,Tcf19,Klf5,Lrrc32,Mob3c,Rrm2,Ifi30,Cdh5,Rassf9 Hbb-bs,Hba-a2,S100a9,S100a8,Hbb-bt,Mbp,Ppp1r9b,Sparcl1,Fth1,Mt3,Atp1a2,Rgs5,Tmsb4x,Cpe,Atp1b1,Selenow,Ly6e,Calm1,Apoe,Atp6v0d1 9 101,178,255 0 10 Mcm3,Bche,Hmgcs2,Cped1,Vwc2l,Spata6,Sh3tc2,Sh2b2,Slc26a2,Hhip,Cd83,Mdk,Zfp524,Unc13c,Nfil3,Bmp6,Dkkl1,Gmppb,Rhbdd1,Fam189a2 Mcm3,Bche,Selenop,Kcnab2,Sptbn2,Rnf168,Fa2h,Sacs,Hid1,Cd83,Rhob,Nmral1,Hmgcs2,Fam163b,Gna12,Gfap,Akirin2,Cand1,Phactr1,Sema7a Mcm3,Sptbn2,Selenop,Kcnab2,Rhob,Gnao1,Aldoa_v1,Atp1b1,Gpm6a,Sept7,Calm1,Uqcrc1,Slc17a7,Vxn,Chchd2,Fam163b,Akirin2,Phactr1,Gfap,Cand1"},{"location":"vignettes/subregion_tutorials/visiumhd/#packed-sge-and-spatial-factor-outputs-from-run_cartload2","title":"Packed SGE and Spatial Factor Outputs from <code>run_cartload2</code>","text":"<p>The packed SGE data and spatial factor inferences generated by <code>FICTURE</code> are available in PMTile format on Zenodo: DOI:10.5281/zenodo.15824955.</p> <p>These datasets can also be loaded directly using the following catalog YAML file: <code>https://zenodo.org/records/15824956/catalog.yaml</code></p>"},{"location":"vignettes/subregion_tutorials/xenium/","title":"10X Xenium Starter Tutorial","text":""},{"location":"vignettes/subregion_tutorials/xenium/#input-data","title":"Input Data","text":"<p>This tutorial uses SGE data generated with the 10x Genomics Xenium platform, and it has been cropped to a small region of the adult mouse brain for demonstration purposes.</p> <p>File Format</p> <p>10X Genomics Xenium platform outputs Spatial Gene Expression (SGE) data in a comma-separated values (CSV) format. </p> <p>CSV File Format</p> <pre><code>\"transcript_id\",\"cell_id\",\"overlaps_nucleus\",\"feature_name\",\"x_location\",\"y_location\",\"z_location\",\"qv\"\n281827164036151,133793,1,\"Sox10\",2350.0232,4153.6846,16.592316,40.0\n281827164036152,133793,1,\"Sox10\",2350.2585,4154.5225,17.237207,10.514394\n281827164036164,151216,0,\"Sox10\",2350.5874,4277.699,14.285685,40.0\n</code></pre> <ul> <li>\"<code>transcript_id</code>\": Unique identifier for each detected transcript molecule.  </li> <li>\"<code>cell_id</code>\": ID of the segmented cell associated with the transcript.</li> <li>\"<code>overlaps_nucleus</code>\": 1 if the transcript overlaps the nucleus mask, 0 otherwise.  </li> <li>\"<code>feature_name</code>\": Gene or other features name corresponding to the transcript.  </li> <li>\"<code>x_location</code>\": X-coordinate of the transcript.  </li> <li>\"<code>y_location</code>\": Y-coordinate of the transcript.  </li> <li>\"<code>z_location</code>\": Z-coordinate (depth) of the transcript.  </li> <li>\"<code>qv</code>\": Quality value indicating confidence in transcript detection.</li> </ul> <p>Data Access</p> <p>The example data is hosted on Zenedo ().</p> <p>Follow the commands below to download the example data.</p> <pre><code>work_dir=/path/to/work/directory\ncd $work_dir\nwget  https://zenodo.org/records/15786632/files/xenium_starter.raw.tar.gz \ntar --strip-components=1 -zxvf xenium_starter.raw.tar.gz  \n</code></pre>"},{"location":"vignettes/subregion_tutorials/xenium/#set-up-the-environment","title":"Set Up the Environment","text":"<p>Define paths to all required binaries and resources, and target AWS S3 bucket. Optionally, specify a fixed color map for consistent rendering.</p> <pre><code># ====\n# Replace each placeholder with the actual path on your system.  \n# ====\nwork_dir=/path/to/work/directory        # path to work directory that contains the downloaded input data\ncd $work_dir\n\n# Define paths to required binaries and resources\nspatula=/path/to/spatula/binary         # path to spatula executable\npunkst=/path/to/punkst/binary           # path to FICTURE2/punkst executable\ntippecanoe=/path/to/tippecanoe/binary   # path to tippecanoe executable\npmtiles=/path/to/pmtiles/binary         # path to pmtiles executable\naws=/path/to/aws/cli/binary             # path to AWS CLI binary\n\n# (Optional) Define path to color map. \ncmap=/path/to/color/map                 # Path to the fixed color map for rendering. cartloader provides a fixed color map at cartloader/assets/fixed_color_map_256.tsv.\n\n# AWS S3 target location for cartostore\nAWS_BUCKET=\"EXAMPLE_AWS_BUCKET\"         # replace EXAMPLE_AWS_BUCKET with your actual S3 bucket name\n\n# Activate the bioconda environment\nconda activate ENV_NAME              # replace BIOENV_NAME with your bioconda environment name\n</code></pre> <p>Define data ID and analysis parameters:</p> <pre><code># Unique identifier for your dataset\nDATA_ID=\"xenium_hippo\"                  # change this to reflect your dataset name\nPLATFORM=\"10x_xenium\"                   # platform information\nSCALE=1                                 # coordinate to micrometer scaling factor\n\n# LDA parameters\ntrain_width=12                           # define LDA training hexagon width (comma-separated if multiple widths are applied)\nn_factor=6,12                            # define number of factors in LDA training (comma-separated if multiple n-factor are applied)\n</code></pre> <p>How to Define Scaling Factors for Xenium</p> <p>The Xenium example data currently used here provides SGE in micrometer units. Use define scaling factor from coordinate to micrometer as 1.</p>"},{"location":"vignettes/subregion_tutorials/xenium/#sge-format-conversion","title":"SGE Format Conversion","text":"<p>Convert the raw input to the unified SGE format. See more details in Reference page.</p> <pre><code>cartloader sge_convert \\\n  --makefn sge_convert.mk \\\n  --platform ${PLATFORM} \\\n  --in-csv ./input.tsv.gz \\\n  --units-per-um ${SCALE} \\\n  --out-dir ./sge \\\n  --exclude-feature-regex '^(BLANK|NegCon|NegPrb)' \\\n  --sge-visual \\\n  --spatula ${spatula} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--platform</code> required string Platform (options: \"<code>10x_visium_hd</code>\", \"<code>seqscope</code>\", \"<code>10x_xenium</code>\", \"<code>bgi_stereoseq</code>\", \"<code>cosmx_smi</code>\", \"<code>vizgen_merscope</code>\", \"<code>pixel_seq</code>\", \"<code>generic</code>\") <code>--in-csv</code> required string Path to the input TSV/CSV file <code>--units-per-um</code> required float Scale to convert coordinates to microns (default: <code>1.0</code>) <code>--out-dir</code> required string Output directory for the converted SGE files <code>--makefn</code> string File name for the generated Makefile (default: <code>sge_convert.mk</code>) <code>--exclude-feature-regex</code> regex Pattern to exclude control features <code>--sge-visual</code> flag Enable SGE visualization step (generates diagnostic image) (default: <code>FALSE</code>) <code>--spatula</code> string Path to the spatula binary (default: <code>spatula</code>) <code>--n-jobs</code> int Number of parallel jobs for processing (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/xenium/#ficture-analysis","title":"<code>FICTURE</code> analysis","text":"<p>Compute spatial factors using <code>punkst</code> (FICTURE2 mode). See more details in Reference page.</p> <pre><code>cartloader run_ficture2 \\\n  --makefn run_ficture2.mk \\\n  --main \\\n  --in-transcript ./sge/transcripts.unsorted.tsv.gz \\\n  --in-feature ./sge/feature.clean.tsv.gz \\\n  --in-minmax ./sge/coordinate_minmax.tsv \\\n  --cmap-file ${cmap} \\\n  --exclude-feature-regex '^(mt-.*$|Gm\\d+$)' \\\n  --out-dir ./ficture2 \\\n  --width ${train_width} \\\n  --n-factor ${n_factor} \\\n  --spatula ${spatula} \\\n  --ficture2 ${punkst} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--main</code> required <sup>1</sup> flag Enable <code>cartloader</code> to run all five steps <code>--in-transcript</code> required string Path to input transcript-level SGE file <code>--out-dir</code> required string Path to output directory <code>--width</code> required int or comma-separated list LDA training hexagon width(s) <code>--n-factor</code> required int or comma-separated list Number of LDA factors <code>--makefn</code> string File name for the generated Makefile (default: <code>run_ficture2.mk</code> ) <code>--in-feature</code> string Path to input feature file <code>--in-minmax</code> string Path to input coordinate min/max file <code>--cmap-file</code> string Path to color map file <code>--exclude-feature-regex</code> regex Pattern to exclude features <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--ficture2</code> string Path to the <code>punkst</code> directory (defaults to <code>punkst</code> repository within <code>submodules</code> directory of  <code>cartloader</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>) <p><sub><sup>1</sup>: <code>cartloader</code> requires the user to specify at least one action. Available actions includes: <code>--tile</code> to run tiling step; <code>--segment</code> to run segmentation step; <code>--init-lda</code> to run LDA training step; <code>--decode</code> to run decoding step; <code>--summary</code> to run summarization step; <code>--main</code> to run all above five actions.</sub></p>"},{"location":"vignettes/subregion_tutorials/xenium/#cartloader-compilation","title":"<code>cartloader</code> Compilation","text":"<p>Generate pmtiles and web-compatible tile directories. See more details in Reference page.</p> <pre><code>cartloader run_cartload2 \\\n  --makefn run_cartload2.mk \\\n  --fic-dir ./ficture2 \\\n  --out-dir ./cartload2 \\\n  --id ${DATA_ID} \\\n  --spatula ${spatula} \\\n  --pmtiles ${pmtiles} \\\n  --tippecanoe ${tippecanoe} \\\n  --n-jobs 10 \\\n  --threads 10\n</code></pre> Parameter Required Type Description <code>--fic-dir</code> required string Path to the input directory containing FICTURE2 output <code>--out-dir</code> required string Path to the output directory for PMTiles and web tiles <code>--id</code> required string Dataset ID used for naming outputs and metadata <code>--makefn</code> string File name for the generated Makefile (default: <code>run_cartload2.mk</code>) <code>--spatula</code> string Path to the <code>spatula</code> binary (default: <code>spatula</code>) <code>--pmtiles</code> string Path to the <code>pmtiles</code> binary (default: <code>pmtiles</code>) <code>--tippecanoe</code> string Path to the <code>tippecanoe</code> binary (default: <code>tippecanoe</code>) <code>--n-jobs</code> int Number of parallel jobs (default: <code>1</code>) <code>--threads</code> int Number of threads per job (default: <code>1</code>)"},{"location":"vignettes/subregion_tutorials/xenium/#upload-to-data-repository","title":"Upload to Data Repository","text":"<p>Choose a data repository to host/share your output</p> <p><code>cartloader</code> supports two upload options (<code>AWS</code> and <code>Zenodo</code>) for storing PMTiles of SGE and spatial factors in a data repository.</p> <p>Choose the one that best suits your needs.</p>"},{"location":"vignettes/subregion_tutorials/xenium/#aws-uploads","title":"AWS Uploads","text":"<p>Upload the generated cartloader outputs to your designated AWS S3 directory:</p> <pre><code>cartloader upload_aws \\\n  --in-dir ./cartload2 \\\n  --s3-dir \"s3://${AWS_BUCKET}/${DATA_ID}\" \\\n  --aws ${aws} \\\n  --n-jobs 10\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--s3-dir</code> required string Path to the target S3 directory for uploading <code>--aws</code> string Path to the AWS CLI binary <code>--n-jobs</code> int Number of parallel jobs"},{"location":"vignettes/subregion_tutorials/xenium/#zenodo-uploads","title":"Zenodo Uploads","text":"<p>Upload the generated cartloader outputs to your designated Zenodo deposition or a new deposition.</p> <pre><code>cartloader upload_zenodo \\\n  --in-dir ./cartload2 \\\n  --upload-method catalog \\\n  --zenodo-token /path/to/zenodo/token/file \\\n  --create-new-deposition \\\n  --title  \"Yur Title\" \\\n  --creators \"Your Name\" \\\n  --description \"This is an example description\"\n</code></pre> Parameter Required Type Description <code>--in-dir</code> required string Path to the input directory containing the cartloader compilation output <code>--upload-method</code> required string Method to determine which files to upload. Options: <code>all</code> to upload all files in <code>--in-dir</code>; <code>catalog</code> to upload files listed in a catalog YAML file, <code>user_list</code> to upload files explicitly listed via <code>--in-list</code> <code>--catalog-yaml</code> string Required if <code>--upload-method catalog</code>.  Path to the catalog.yaml file generated in <code>run_cartload2</code>. If absent, will use the catalog.yaml in the input directory specified by <code>--in-dir</code>. <code>--zenodo-token</code> required string Path to your Zenodo access file <code>--create-new-deposition</code> flag a new Zenodo deposition will be created. <code>--title</code> required string Required if <code>--create-new-deposition</code>. Title for the new Zenodo deposition. <code>--creators</code> required list of str List of creators in \"Lastname, Firstname\" format."},{"location":"vignettes/subregion_tutorials/xenium/#output-data","title":"Output Data","text":"<p>See more details of output at the Reference pages for run_ficture2 and run_cartload2.</p>"},{"location":"vignettes/subregion_tutorials/xenium/#spatial-factor-inference-from-ficture","title":"Spatial Factor Inference from <code>FICTURE</code>","text":"<p>Below is an example of spatial factor inference results produced by <code>FICTURE</code> using a training width of 12, 12 factors, a fit width of 12, and an anchor resolution of 6.</p> <p> </p> Factor RGB Weight PostUMI TopGene_pval TopGene_fc TopGene_weight 2 101,255,101 0.16118 699466 Cabp7,Gfap,Arc,Orai2,2010300C02Rik,Arhgap12,Sipa1l3,Kctd12,Lyz2,Shisa6,Pou3f1,Rmst,Arhgap6,Clmn,Chrm2,Cntn6,Cux2,Fibcd1,Wfs1,Pkib Cabp7,Orai2,Slc6a3,Gfap,Arc,Th,Arhgap6,Arhgap12,Pkib,Lyz2,Pou3f1,Ror1,Shisa6,Rmst,Sipa1l3,Vip,Chrm2,Unc13c,2010300C02Rik,Ebf3 Cabp7,Gfap,Slc17a7,Arc,2010300C02Rik,Sipa1l3,Kctd12,Arhgap12,Clmn,Orai2,Acsbg1,Shisa6,Bcl11b,Igfbp5,Bhlhe22,Pou3f1,Rmst,Lyz2,Ntsr2,Wfs1 0 255,101,101 0.13961 605851 Prox1,Calb1,Bhlhe22,Plekha2,Rasgrf2,Pdzd2,Pip5k1b,Rasl10a,Prdm8,Epha4,2010300C02Rik,Npnt,Slc44a5,Nrn1,Bcl11b,Pdyn,Thsd7a,Dpyd,Cntnap5b,Zfpm2 Pdyn,Npnt,Prox1,Plekha2,Calb1,Pdzd2,Rasgrf2,Cntnap5b,Rasl10a,Slc44a5,Bhlhe22,Dpyd,Prdm8,Zfpm2,Thsd7a,Pip5k1b,Syt17,Gsg1l,Npy2r,Cdh9 Prox1,Nrn1,Epha4,2010300C02Rik,Slc17a7,Bhlhe22,Pip5k1b,Calb1,Bcl11b,Rasgrf2,Cpne6,Plekha2,Cpne4,Prdm8,Igfbp5,Rasl10a,Bhlhe40,Tanc1,Gad1,Pdzd2 1 237,238,0 0.12496 542277 Cpne4,Neurod6,Slc17a7,Cpne6,Epha4,Slit2,Nrn1,Prdm8,Sema3e,Dkk3,Nwd2,Npy2r,Strip2,Bdnf,Plcxd2,Shisa6,Tanc1,Rspo2,Mdga1,Car4 Slit2,Cpne4,Neurod6,Rspo2,Npy2r,Strip2,Prss35,Cpne6,Stard5,Bdnf,Prdm8,Nwd2,Sema3e,Plcxd2,Epha4,Shisa6,Slc17a7,Trp73,Nrn1,Tanc1 Slc17a7,Neurod6,Epha4,Nrn1,Cpne4,Cpne6,Cabp7,Dkk3,Dner,Slit2,Tanc1,Prdm8,Sema3e,Sipa1l3,2010300C02Rik,Shisa6,Nwd2,Bhlhe22,Car4,Plcxd2 4 101,101,255 0.10988 476853 Garnl3,Hs3st2,Nxph3,Myl4,Cplx3,Rprm,Satb2,Dpy19l1,Fhod3,Igfbp6,Tle4,Dkk3,Grik3,Ccn2,Gfra2,Gadd45a,Arc,Slc17a7,Igfbp4,Igsf21 Hs3st2,Trbc2,Myl4,Cplx3,Nxph3,Rxfp1,Igfbp6,Satb2,Garnl3,Rprm,Ccn2,Arhgap25,Gadd45a,Fhod3,Sema3a,Sdk2,Foxp2,Tox,Sla,Igsf21 Slc17a7,Garnl3,Dkk3,Nrn1,Arc,Dpy19l1,Neurod6,Id2,Tle4,Igfbp4,Rprm,Nxph3,Gfra2,Epha4,Hs3st2,Myl4,Grik3,2010300C02Rik,Satb2,Fhod3 3 101,254,255 0.1069 463920 Wfs1,Neurod6,Pou3f1,Epha4,Sema3e,Fibcd1,Dkk3,Sorcs3,Igfbp4,Bcl11b,Cpne8,2010300C02Rik,Trpc4,Nell1,Cpne6,Ndst4,Ndst3,Arhgap12,Penk,Mdga1 Wfs1,Pou3f1,Fibcd1,Ndst4,Sorcs3,Cpne8,Penk,Sema3e,Ndst3,Igfbp4,Trpc4,Neurod6,Nell1,Htr1f,Strip2,Bcl11b,Ror1,Mdga1,Dkk3,Epha4 Neurod6,Epha4,Slc17a7,2010300C02Rik,Dkk3,Nrn1,Cpne6,Wfs1,Bcl11b,Pou3f1,Sipa1l3,Sema3e,Arc,Dner,Igfbp4,Pip5k1b,Arhgap12,Cabp7,Sorcs3,Trpc4 5 255,101,254 0.09002 390640 Aqp4,Acsbg1,Ntsr2,Id2,Slc39a12,Rfx4,Rorb,Gfap,Hapln1,Gli3,Rmst,Cdh20,Igfbp5,Clmn,Ppp1r1b,Mapk4,Bhlhe40,Angpt1,Cd44,Gng12 Aqp4,Slc39a12,Rfx4,Ntsr2,Acsbg1,Id2,Gli3,Hapln1,Cd44,Rorb,Cdh20,Eya4,Rmst,Gjb2,Prph,Angpt1,Ppp1r1b,Pdzrn3,Cdh4,Gfap Acsbg1,Id2,Aqp4,Ntsr2,Gfap,Slc39a12,Rorb,Clmn,Igfbp5,Dkk3,Dner,Bhlhe40,Rfx4,Rmst,Hapln1,Gng12,Mapk4,Cdh20,Tle4,Ppp1r1b 6 255,178,101 0.06358 275899 Cldn5,Ly6a,Fn1,Adgrl4,Pecam1,Igf2,Laptm5,Kdr,Trem2,Acvrl1,Dcn,Siglech,Emcn,Cd53,Cd93,Sox17,Aldh1a2,Nostrin,Pglyrp1,Paqr5 Cldn5,Cd93,Acvrl1,Fn1,Nostrin,Slfn5,Pecam1,Sox17,Adgrl4,Emcn,Aldh1a2,Igf2,Ly6a,Paqr5,Fmod,Dcn,Kdr,Zfp366,Fgd5,Spp1 Ly6a,Cldn5,Fn1,Laptm5,Adgrl4,Igf2,Pecam1,Kctd12,Car4,Siglech,Gfap,Trem2,Kdr,Dcn,Cd53,Lyz2,Acvrl1,Nr2f2,Cobll1,Emcn 7 178,255,101 0.06088 264215 Gad2,Gad1,Pvalb,Rab3b,Dner,Sst,Kcnmb2,Btbd11,Cntnap4,Cdh13,Cort,Hapln1,Igf1,Col19a1,Zfp536,Rasgrf2,Necab1,Myo16,Cacna2d2,Lypd6 Sst,Gad2,Cort,Rab3b,Kcnmb2,Pvalb,Gad1,Crh,Igf1,Col19a1,Btbd11,Cntnap4,Rbp4,Pde11a,Pthlh,Cbln4,Cdh13,Hapln1,Syt2,Cacna2d2 Gad1,Gad2,Dner,Pvalb,Rab3b,Id2,Cdh13,Zfp536,Rasgrf2,Hapln1,Kctd12,Necab1,Cntnap4,Rims3,Igfbp4,Kcnmb2,Btbd11,Neto2,Plcxd3,Lypd6 8 0,223,95 0.05087 220765 Gjc3,Opalin,Sox10,Sema6a,Dpy19l1,Zfp536,Adamtsl1,Tmem163,Gng12,Clmn,Cobll1,Cdh20,Vwc2l,Gpr17,Prox1,Fign,Adamts2,Sema3d,Arhgef28,Chrm2 Opalin,Sox10,Gjc3,Adamtsl1,Sema6a,Tmem163,Zfp536,Fign,Adamts2,Cobll1,Dpy19l1,Gpr17,Vwc2l,Cdh20,Gng12,Sema3d,Clmn,Carmn,Chrm2,Parm1 Gjc3,Opalin,Sox10,Dpy19l1,Clmn,Sema6a,Gng12,Zfp536,Prox1,Gfap,Tmem163,Cdh20,Arhgef28,Cobll1,Bhlhe40,Adamtsl1,Igfbp5,Vwc2l,Chrm2,Tanc1 9 101,178,255 0.03417 148267 Slc17a6,Rims3,Necab1,Calb2,Rnf152,Nell1,Clmn,Tmem163,Pde7b,Rorb,Cux2,Foxp2,Opn3,Unc13c,Inpp4b,Btbd11,Thsd7a,Fign,Sema6a,Nrn1 Slc17a6,Rims3,Necab1,Opn3,Calb2,Rnf152,Fign,Unc13c,Nell1,Tmem163,Btbd11,Inpp4b,Foxp2,Cux2,Pde7b,Plch1,Deptor,Tox,Rorb,Thsd7a Rims3,Slc17a6,Nrn1,Necab1,Clmn,Calb2,Epha4,Nell1,Dner,Slc17a7,Rorb,Rnf152,Prox1,Bhlhe40,Pde7b,Nrep,Thsd7a,Tmem163,Tanc1,Sema6a 10 178,101,255 0.029 125838 Nwd2,Calb2,Syt6,Necab2,Sncg,Vat1l,Slc17a6,Gucy1a1,Kctd8,Nrp2,Tmem255a,Chat,Tacr1,Cacna2d2,Thsd7a,Ano1,Dner,Cbln1,Cntnap4,Cbln4 Chat,Sncg,Tacr1,Kctd8,Vat1l,Nwd2,Calb2,Syt6,Cbln1,Ano1,Necab2,Gucy1a1,Slc17a6,Tmem255a,Cacna2d2,Cbln4,Nrp2,Th,Pde11a,Sema3d Nwd2,Nrn1,Calb2,Necab2,Dner,Syt6,Slc17a6,Cpne4,Gucy1a1,Nrp2,Vat1l,Thsd7a,Sncg,Slc17a7,Kctd8,Cacna2d2,Rmst,Garnl3,Tmem255a,Cntnap4 11 255,153,204 0.02895 125631 Pdgfra,Cspg4,Gpr17,Cd24a,Sox11,Sema3d,Spag16,Igfbp5,Gjc3,Trp73,Gfap,Meis2,Nrep,Sox10,Sema5b,Cobll1,Rmst,Vwc2l,Tmem255a,Hat1 Pdgfra,Cspg4,Gpr17,Spag16,Cd24a,Sema3d,Trp73,Sox11,Chodl,Sema5b,Ebf3,Prph,Tmem255a,Plch1,Cdh4,Slc6a3,Sox10,Gjc3,Vwc2l,Cobll1 Pdgfra,Gfap,Igfbp5,Gpr17,Cspg4,Gjc3,Sox11,Cd24a,Nrep,Meis2,Dner,Dkk3,Sox10,Rmst,Bhlhe40,Gng12,Dpy19l1,Sema3d,Sema6a,Cobll1"},{"location":"vignettes/subregion_tutorials/xenium/#packed-sge-and-spatial-factor-outputs-from-run_cartload2","title":"Packed SGE and Spatial Factor Outputs from <code>run_cartload2</code>","text":"<p>The packed SGE data and spatial factor inferences generated by <code>FICTURE</code> are available in PMTile format on Zenodo: DOI:10.5281/zenodo.15824967.</p> <p>These datasets can also be loaded directly using the following catalog YAML file: <code>https://zenodo.org/records/15824968/catalog.yaml</code></p>"}]}